

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Aug 12 14:03:13 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	cinit,global,class=CODE,merge=1,delta=2
    24                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    27                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    28                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    30                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    31                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	clrtext,global,class=CODE,delta=2
    34                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    37                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2
    39                           	psect	text2,local,class=CODE,merge=1,delta=2
    40                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text4,local,class=CODE,merge=1,delta=2
    42                           	psect	text5,local,class=CODE,merge=1,delta=2
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    47                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    48                           	psect	text11,local,class=CODE,merge=1,delta=2
    49                           	psect	text12,local,class=CODE,merge=1,delta=2
    50                           	psect	text13,local,class=CODE,merge=1,delta=2
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2
    58                           	psect	text21,local,class=CODE,merge=1,delta=2
    59                           	psect	text22,local,class=CODE,merge=1,delta=2
    60                           	psect	text23,local,class=CODE,merge=1,delta=2
    61                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text25,local,class=CODE,merge=1,delta=2
    63                           	psect	text26,local,class=CODE,merge=1,delta=2
    64                           	psect	text27,local,class=CODE,merge=1,delta=2
    65                           	psect	text28,local,class=CODE,merge=1,delta=2
    66                           	psect	text29,local,class=CODE,merge=1,delta=2
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	text32,local,class=CODE,merge=1,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	psect	text39,local,class=CODE,merge=1,delta=2
    77                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text41,local,class=CODE,merge=1,delta=2
    79                           	psect	text42,local,class=CODE,merge=1,delta=2
    80                           	psect	text43,local,class=CODE,merge=1,delta=2
    81                           	psect	text44,local,class=CODE,merge=1,delta=2
    82                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text47,local,class=CODE,merge=1,delta=2
    85                           	psect	text48,local,class=CODE,merge=1,delta=2
    86                           	psect	text49,local,class=CODE,merge=1,delta=2
    87                           	psect	text50,local,class=CODE,merge=1,delta=2
    88                           	psect	text51,local,class=CODE,merge=1,delta=2
    89                           	psect	text52,local,class=CODE,merge=1,delta=2
    90                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text54,local,class=CODE,merge=1,delta=2
    92                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text56,local,class=CODE,merge=1,delta=2
    94                           	psect	text57,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text61,local,class=CODE,merge=1,delta=2
    99                           	psect	text62,local,class=CODE,merge=1,delta=2
   100                           	psect	text63,local,class=CODE,merge=1,delta=2
   101                           	psect	text64,local,class=CODE,merge=1,delta=2
   102                           	psect	text65,local,class=CODE,merge=1,delta=2
   103                           	psect	text66,local,class=CODE,merge=1,delta=2
   104                           	psect	text67,local,class=CODE,merge=1,delta=2
   105                           	psect	text68,local,class=CODE,merge=1,delta=2
   106                           	psect	text69,local,class=CODE,merge=1,delta=2
   107                           	psect	text70,local,class=CODE,merge=1,delta=2
   108                           	psect	text71,local,class=CODE,merge=1,delta=2
   109                           	psect	text72,local,class=CODE,merge=1,delta=2
   110                           	psect	text73,local,class=CODE,merge=1,delta=2
   111                           	psect	text74,local,class=CODE,merge=1,delta=2
   112                           	psect	text75,local,class=CODE,merge=1,delta=2
   113                           	psect	text76,local,class=CODE,merge=1,delta=2
   114                           	psect	text77,local,class=CODE,merge=1,delta=2
   115                           	psect	text78,local,class=CODE,merge=1,delta=2
   116                           	psect	text79,local,class=CODE,merge=1,delta=2
   117                           	psect	text80,local,class=CODE,merge=1,delta=2
   118                           	psect	text81,local,class=CODE,merge=1,delta=2,group=1
   119                           	psect	text82,local,class=CODE,merge=1,delta=2
   120                           	psect	text83,local,class=CODE,merge=1,delta=2
   121                           	psect	text84,local,class=CODE,merge=1,delta=2
   122                           	psect	text85,local,class=CODE,merge=1,delta=2
   123                           	psect	text86,local,class=CODE,merge=1,delta=2
   124                           	psect	text87,local,class=CODE,merge=1,delta=2
   125                           	psect	text88,local,class=CODE,merge=1,delta=2
   126                           	psect	text89,local,class=CODE,merge=1,delta=2
   127                           	psect	text90,local,class=CODE,merge=1,delta=2
   128                           	psect	text91,local,class=CODE,merge=1,delta=2
   129                           	psect	text92,local,class=CODE,merge=1,delta=2
   130                           	psect	text93,local,class=CODE,merge=1,delta=2
   131                           	psect	text94,local,class=CODE,merge=1,delta=2
   132                           	psect	text95,local,class=CODE,merge=1,delta=2
   133                           	psect	intentry,global,class=CODE,delta=2
   134                           	psect	text97,local,class=CODE,merge=1,delta=2
   135                           	psect	text98,local,class=CODE,merge=1,delta=2
   136                           	psect	text99,local,class=CODE,merge=1,delta=2
   137                           	psect	text100,local,class=CODE,merge=1,delta=2
   138                           	psect	text101,local,class=CODE,merge=1,delta=2
   139                           	psect	text102,local,class=CODE,merge=1,delta=2
   140                           	dabs	1,0x7E,2
   141  0000                     
   142                           ; Version 2.05
   143                           ; Generated 20/12/2018 GMT
   144                           ; 
   145                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   146                           ; All rights reserved.
   147                           ; 
   148                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   149                           ; 
   150                           ; Redistribution and use in source and binary forms, with or without modification, are
   151                           ; permitted provided that the following conditions are met:
   152                           ; 
   153                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   154                           ;        conditions and the following disclaimer.
   155                           ; 
   156                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   157                           ;        of conditions and the following disclaimer in the documentation and/or other
   158                           ;        materials provided with the distribution.
   159                           ; 
   160                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   161                           ;        software without specific prior written permission.
   162                           ; 
   163                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   164                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   165                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   166                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   167                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   168                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   169                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   170                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   171                           ; 
   172                           ; 
   173                           ; Code-generator required, PIC16LF1559 Definitions
   174                           ; 
   175                           ; SFR Addresses
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0008                     	;# 
   185  0009                     	;# 
   186  000A                     	;# 
   187  000B                     	;# 
   188  000C                     	;# 
   189  000D                     	;# 
   190  000E                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0015                     	;# 
   194  0016                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001B                     	;# 
   201  001C                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  0091                     	;# 
   206  0092                     	;# 
   207  0095                     	;# 
   208  0096                     	;# 
   209  0097                     	;# 
   210  0099                     	;# 
   211  009A                     	;# 
   212  009B                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  011D                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0199                     	;# 
   236  019A                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019C                     	;# 
   240  019D                     	;# 
   241  019E                     	;# 
   242  019F                     	;# 
   243  020C                     	;# 
   244  020D                     	;# 
   245  0211                     	;# 
   246  0211                     	;# 
   247  0212                     	;# 
   248  0212                     	;# 
   249  0213                     	;# 
   250  0213                     	;# 
   251  0214                     	;# 
   252  0214                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0216                     	;# 
   257  0216                     	;# 
   258  0217                     	;# 
   259  0217                     	;# 
   260  0391                     	;# 
   261  0392                     	;# 
   262  0393                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0611                     	;# 
   267  0612                     	;# 
   268  0613                     	;# 
   269  0613                     	;# 
   270  0614                     	;# 
   271  0615                     	;# 
   272  0616                     	;# 
   273  0616                     	;# 
   274  0711                     	;# 
   275  0711                     	;# 
   276  0711                     	;# 
   277  0712                     	;# 
   278  0712                     	;# 
   279  0713                     	;# 
   280  0713                     	;# 
   281  0713                     	;# 
   282  0714                     	;# 
   283  0714                     	;# 
   284  0714                     	;# 
   285  0715                     	;# 
   286  0715                     	;# 
   287  0716                     	;# 
   288  0716                     	;# 
   289  0716                     	;# 
   290  0716                     	;# 
   291  0717                     	;# 
   292  0717                     	;# 
   293  0717                     	;# 
   294  0717                     	;# 
   295  0718                     	;# 
   296  0718                     	;# 
   297  0718                     	;# 
   298  0719                     	;# 
   299  0719                     	;# 
   300  0719                     	;# 
   301  0719                     	;# 
   302  071A                     	;# 
   303  071A                     	;# 
   304  071A                     	;# 
   305  071A                     	;# 
   306  071A                     	;# 
   307  071B                     	;# 
   308  071B                     	;# 
   309  071C                     	;# 
   310  071C                     	;# 
   311  071C                     	;# 
   312  071C                     	;# 
   313  071C                     	;# 
   314  071D                     	;# 
   315  071D                     	;# 
   316  071E                     	;# 
   317  071E                     	;# 
   318  0791                     	;# 
   319  0791                     	;# 
   320  0793                     	;# 
   321  0793                     	;# 
   322  0794                     	;# 
   323  0794                     	;# 
   324  0796                     	;# 
   325  0796                     	;# 
   326  0796                     	;# 
   327  0797                     	;# 
   328  0797                     	;# 
   329  0797                     	;# 
   330  0798                     	;# 
   331  0798                     	;# 
   332  0799                     	;# 
   333  0799                     	;# 
   334  0799                     	;# 
   335  079A                     	;# 
   336  079A                     	;# 
   337  079A                     	;# 
   338  079B                     	;# 
   339  079C                     	;# 
   340  079C                     	;# 
   341  079C                     	;# 
   342  079D                     	;# 
   343  079E                     	;# 
   344  079E                     	;# 
   345  0F8C                     	;# 
   346  0F8D                     	;# 
   347  0F91                     	;# 
   348  0F96                     	;# 
   349  0F97                     	;# 
   350  0F9C                     	;# 
   351  0F9D                     	;# 
   352  0F9E                     	;# 
   353  0FE3                     	;# 
   354  0FE4                     	;# 
   355  0FE5                     	;# 
   356  0FE6                     	;# 
   357  0FE7                     	;# 
   358  0FE8                     	;# 
   359  0FE9                     	;# 
   360  0FEA                     	;# 
   361  0FEB                     	;# 
   362  0FED                     	;# 
   363  0FEE                     	;# 
   364  0FEF                     	;# 
   365  0000                     	;# 
   366  0001                     	;# 
   367  0002                     	;# 
   368  0003                     	;# 
   369  0004                     	;# 
   370  0005                     	;# 
   371  0006                     	;# 
   372  0007                     	;# 
   373  0008                     	;# 
   374  0009                     	;# 
   375  000A                     	;# 
   376  000B                     	;# 
   377  000C                     	;# 
   378  000D                     	;# 
   379  000E                     	;# 
   380  0011                     	;# 
   381  0012                     	;# 
   382  0015                     	;# 
   383  0016                     	;# 
   384  0016                     	;# 
   385  0017                     	;# 
   386  0018                     	;# 
   387  0019                     	;# 
   388  001A                     	;# 
   389  001B                     	;# 
   390  001C                     	;# 
   391  008C                     	;# 
   392  008D                     	;# 
   393  008E                     	;# 
   394  0091                     	;# 
   395  0092                     	;# 
   396  0095                     	;# 
   397  0096                     	;# 
   398  0097                     	;# 
   399  0099                     	;# 
   400  009A                     	;# 
   401  009B                     	;# 
   402  009B                     	;# 
   403  009C                     	;# 
   404  009D                     	;# 
   405  009E                     	;# 
   406  009F                     	;# 
   407  010C                     	;# 
   408  010D                     	;# 
   409  010E                     	;# 
   410  0116                     	;# 
   411  0117                     	;# 
   412  011D                     	;# 
   413  018C                     	;# 
   414  018D                     	;# 
   415  018E                     	;# 
   416  0191                     	;# 
   417  0191                     	;# 
   418  0192                     	;# 
   419  0193                     	;# 
   420  0193                     	;# 
   421  0194                     	;# 
   422  0195                     	;# 
   423  0196                     	;# 
   424  0199                     	;# 
   425  019A                     	;# 
   426  019B                     	;# 
   427  019B                     	;# 
   428  019C                     	;# 
   429  019D                     	;# 
   430  019E                     	;# 
   431  019F                     	;# 
   432  020C                     	;# 
   433  020D                     	;# 
   434  0211                     	;# 
   435  0211                     	;# 
   436  0212                     	;# 
   437  0212                     	;# 
   438  0213                     	;# 
   439  0213                     	;# 
   440  0214                     	;# 
   441  0214                     	;# 
   442  0215                     	;# 
   443  0215                     	;# 
   444  0215                     	;# 
   445  0216                     	;# 
   446  0216                     	;# 
   447  0217                     	;# 
   448  0217                     	;# 
   449  0391                     	;# 
   450  0392                     	;# 
   451  0393                     	;# 
   452  0394                     	;# 
   453  0395                     	;# 
   454  0396                     	;# 
   455  0611                     	;# 
   456  0612                     	;# 
   457  0613                     	;# 
   458  0613                     	;# 
   459  0614                     	;# 
   460  0615                     	;# 
   461  0616                     	;# 
   462  0616                     	;# 
   463  0711                     	;# 
   464  0711                     	;# 
   465  0711                     	;# 
   466  0712                     	;# 
   467  0712                     	;# 
   468  0713                     	;# 
   469  0713                     	;# 
   470  0713                     	;# 
   471  0714                     	;# 
   472  0714                     	;# 
   473  0714                     	;# 
   474  0715                     	;# 
   475  0715                     	;# 
   476  0716                     	;# 
   477  0716                     	;# 
   478  0716                     	;# 
   479  0716                     	;# 
   480  0717                     	;# 
   481  0717                     	;# 
   482  0717                     	;# 
   483  0717                     	;# 
   484  0718                     	;# 
   485  0718                     	;# 
   486  0718                     	;# 
   487  0719                     	;# 
   488  0719                     	;# 
   489  0719                     	;# 
   490  0719                     	;# 
   491  071A                     	;# 
   492  071A                     	;# 
   493  071A                     	;# 
   494  071A                     	;# 
   495  071A                     	;# 
   496  071B                     	;# 
   497  071B                     	;# 
   498  071C                     	;# 
   499  071C                     	;# 
   500  071C                     	;# 
   501  071C                     	;# 
   502  071C                     	;# 
   503  071D                     	;# 
   504  071D                     	;# 
   505  071E                     	;# 
   506  071E                     	;# 
   507  0791                     	;# 
   508  0791                     	;# 
   509  0793                     	;# 
   510  0793                     	;# 
   511  0794                     	;# 
   512  0794                     	;# 
   513  0796                     	;# 
   514  0796                     	;# 
   515  0796                     	;# 
   516  0797                     	;# 
   517  0797                     	;# 
   518  0797                     	;# 
   519  0798                     	;# 
   520  0798                     	;# 
   521  0799                     	;# 
   522  0799                     	;# 
   523  0799                     	;# 
   524  079A                     	;# 
   525  079A                     	;# 
   526  079A                     	;# 
   527  079B                     	;# 
   528  079C                     	;# 
   529  079C                     	;# 
   530  079C                     	;# 
   531  079D                     	;# 
   532  079E                     	;# 
   533  079E                     	;# 
   534  0F8C                     	;# 
   535  0F8D                     	;# 
   536  0F91                     	;# 
   537  0F96                     	;# 
   538  0F97                     	;# 
   539  0F9C                     	;# 
   540  0F9D                     	;# 
   541  0F9E                     	;# 
   542  0FE3                     	;# 
   543  0FE4                     	;# 
   544  0FE5                     	;# 
   545  0FE6                     	;# 
   546  0FE7                     	;# 
   547  0FE8                     	;# 
   548  0FE9                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000D                     	;# 
   568  000E                     	;# 
   569  0011                     	;# 
   570  0012                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  008C                     	;# 
   581  008D                     	;# 
   582  008E                     	;# 
   583  0091                     	;# 
   584  0092                     	;# 
   585  0095                     	;# 
   586  0096                     	;# 
   587  0097                     	;# 
   588  0099                     	;# 
   589  009A                     	;# 
   590  009B                     	;# 
   591  009B                     	;# 
   592  009C                     	;# 
   593  009D                     	;# 
   594  009E                     	;# 
   595  009F                     	;# 
   596  010C                     	;# 
   597  010D                     	;# 
   598  010E                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  011D                     	;# 
   602  018C                     	;# 
   603  018D                     	;# 
   604  018E                     	;# 
   605  0191                     	;# 
   606  0191                     	;# 
   607  0192                     	;# 
   608  0193                     	;# 
   609  0193                     	;# 
   610  0194                     	;# 
   611  0195                     	;# 
   612  0196                     	;# 
   613  0199                     	;# 
   614  019A                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019C                     	;# 
   618  019D                     	;# 
   619  019E                     	;# 
   620  019F                     	;# 
   621  020C                     	;# 
   622  020D                     	;# 
   623  0211                     	;# 
   624  0211                     	;# 
   625  0212                     	;# 
   626  0212                     	;# 
   627  0213                     	;# 
   628  0213                     	;# 
   629  0214                     	;# 
   630  0214                     	;# 
   631  0215                     	;# 
   632  0215                     	;# 
   633  0215                     	;# 
   634  0216                     	;# 
   635  0216                     	;# 
   636  0217                     	;# 
   637  0217                     	;# 
   638  0391                     	;# 
   639  0392                     	;# 
   640  0393                     	;# 
   641  0394                     	;# 
   642  0395                     	;# 
   643  0396                     	;# 
   644  0611                     	;# 
   645  0612                     	;# 
   646  0613                     	;# 
   647  0613                     	;# 
   648  0614                     	;# 
   649  0615                     	;# 
   650  0616                     	;# 
   651  0616                     	;# 
   652  0711                     	;# 
   653  0711                     	;# 
   654  0711                     	;# 
   655  0712                     	;# 
   656  0712                     	;# 
   657  0713                     	;# 
   658  0713                     	;# 
   659  0713                     	;# 
   660  0714                     	;# 
   661  0714                     	;# 
   662  0714                     	;# 
   663  0715                     	;# 
   664  0715                     	;# 
   665  0716                     	;# 
   666  0716                     	;# 
   667  0716                     	;# 
   668  0716                     	;# 
   669  0717                     	;# 
   670  0717                     	;# 
   671  0717                     	;# 
   672  0717                     	;# 
   673  0718                     	;# 
   674  0718                     	;# 
   675  0718                     	;# 
   676  0719                     	;# 
   677  0719                     	;# 
   678  0719                     	;# 
   679  0719                     	;# 
   680  071A                     	;# 
   681  071A                     	;# 
   682  071A                     	;# 
   683  071A                     	;# 
   684  071A                     	;# 
   685  071B                     	;# 
   686  071B                     	;# 
   687  071C                     	;# 
   688  071C                     	;# 
   689  071C                     	;# 
   690  071C                     	;# 
   691  071C                     	;# 
   692  071D                     	;# 
   693  071D                     	;# 
   694  071E                     	;# 
   695  071E                     	;# 
   696  0791                     	;# 
   697  0791                     	;# 
   698  0793                     	;# 
   699  0793                     	;# 
   700  0794                     	;# 
   701  0794                     	;# 
   702  0796                     	;# 
   703  0796                     	;# 
   704  0796                     	;# 
   705  0797                     	;# 
   706  0797                     	;# 
   707  0797                     	;# 
   708  0798                     	;# 
   709  0798                     	;# 
   710  0799                     	;# 
   711  0799                     	;# 
   712  0799                     	;# 
   713  079A                     	;# 
   714  079A                     	;# 
   715  079A                     	;# 
   716  079B                     	;# 
   717  079C                     	;# 
   718  079C                     	;# 
   719  079C                     	;# 
   720  079D                     	;# 
   721  079E                     	;# 
   722  079E                     	;# 
   723  0F8C                     	;# 
   724  0F8D                     	;# 
   725  0F91                     	;# 
   726  0F96                     	;# 
   727  0F97                     	;# 
   728  0F9C                     	;# 
   729  0F9D                     	;# 
   730  0F9E                     	;# 
   731  0FE3                     	;# 
   732  0FE4                     	;# 
   733  0FE5                     	;# 
   734  0FE6                     	;# 
   735  0FE7                     	;# 
   736  0FE8                     	;# 
   737  0FE9                     	;# 
   738  0FEA                     	;# 
   739  0FEB                     	;# 
   740  0FED                     	;# 
   741  0FEE                     	;# 
   742  0FEF                     	;# 
   743  0000                     	;# 
   744  0001                     	;# 
   745  0002                     	;# 
   746  0003                     	;# 
   747  0004                     	;# 
   748  0005                     	;# 
   749  0006                     	;# 
   750  0007                     	;# 
   751  0008                     	;# 
   752  0009                     	;# 
   753  000A                     	;# 
   754  000B                     	;# 
   755  000C                     	;# 
   756  000D                     	;# 
   757  000E                     	;# 
   758  0011                     	;# 
   759  0012                     	;# 
   760  0015                     	;# 
   761  0016                     	;# 
   762  0016                     	;# 
   763  0017                     	;# 
   764  0018                     	;# 
   765  0019                     	;# 
   766  001A                     	;# 
   767  001B                     	;# 
   768  001C                     	;# 
   769  008C                     	;# 
   770  008D                     	;# 
   771  008E                     	;# 
   772  0091                     	;# 
   773  0092                     	;# 
   774  0095                     	;# 
   775  0096                     	;# 
   776  0097                     	;# 
   777  0099                     	;# 
   778  009A                     	;# 
   779  009B                     	;# 
   780  009B                     	;# 
   781  009C                     	;# 
   782  009D                     	;# 
   783  009E                     	;# 
   784  009F                     	;# 
   785  010C                     	;# 
   786  010D                     	;# 
   787  010E                     	;# 
   788  0116                     	;# 
   789  0117                     	;# 
   790  011D                     	;# 
   791  018C                     	;# 
   792  018D                     	;# 
   793  018E                     	;# 
   794  0191                     	;# 
   795  0191                     	;# 
   796  0192                     	;# 
   797  0193                     	;# 
   798  0193                     	;# 
   799  0194                     	;# 
   800  0195                     	;# 
   801  0196                     	;# 
   802  0199                     	;# 
   803  019A                     	;# 
   804  019B                     	;# 
   805  019B                     	;# 
   806  019C                     	;# 
   807  019D                     	;# 
   808  019E                     	;# 
   809  019F                     	;# 
   810  020C                     	;# 
   811  020D                     	;# 
   812  0211                     	;# 
   813  0211                     	;# 
   814  0212                     	;# 
   815  0212                     	;# 
   816  0213                     	;# 
   817  0213                     	;# 
   818  0214                     	;# 
   819  0214                     	;# 
   820  0215                     	;# 
   821  0215                     	;# 
   822  0215                     	;# 
   823  0216                     	;# 
   824  0216                     	;# 
   825  0217                     	;# 
   826  0217                     	;# 
   827  0391                     	;# 
   828  0392                     	;# 
   829  0393                     	;# 
   830  0394                     	;# 
   831  0395                     	;# 
   832  0396                     	;# 
   833  0611                     	;# 
   834  0612                     	;# 
   835  0613                     	;# 
   836  0613                     	;# 
   837  0614                     	;# 
   838  0615                     	;# 
   839  0616                     	;# 
   840  0616                     	;# 
   841  0711                     	;# 
   842  0711                     	;# 
   843  0711                     	;# 
   844  0712                     	;# 
   845  0712                     	;# 
   846  0713                     	;# 
   847  0713                     	;# 
   848  0713                     	;# 
   849  0714                     	;# 
   850  0714                     	;# 
   851  0714                     	;# 
   852  0715                     	;# 
   853  0715                     	;# 
   854  0716                     	;# 
   855  0716                     	;# 
   856  0716                     	;# 
   857  0716                     	;# 
   858  0717                     	;# 
   859  0717                     	;# 
   860  0717                     	;# 
   861  0717                     	;# 
   862  0718                     	;# 
   863  0718                     	;# 
   864  0718                     	;# 
   865  0719                     	;# 
   866  0719                     	;# 
   867  0719                     	;# 
   868  0719                     	;# 
   869  071A                     	;# 
   870  071A                     	;# 
   871  071A                     	;# 
   872  071A                     	;# 
   873  071A                     	;# 
   874  071B                     	;# 
   875  071B                     	;# 
   876  071C                     	;# 
   877  071C                     	;# 
   878  071C                     	;# 
   879  071C                     	;# 
   880  071C                     	;# 
   881  071D                     	;# 
   882  071D                     	;# 
   883  071E                     	;# 
   884  071E                     	;# 
   885  0791                     	;# 
   886  0791                     	;# 
   887  0793                     	;# 
   888  0793                     	;# 
   889  0794                     	;# 
   890  0794                     	;# 
   891  0796                     	;# 
   892  0796                     	;# 
   893  0796                     	;# 
   894  0797                     	;# 
   895  0797                     	;# 
   896  0797                     	;# 
   897  0798                     	;# 
   898  0798                     	;# 
   899  0799                     	;# 
   900  0799                     	;# 
   901  0799                     	;# 
   902  079A                     	;# 
   903  079A                     	;# 
   904  079A                     	;# 
   905  079B                     	;# 
   906  079C                     	;# 
   907  079C                     	;# 
   908  079C                     	;# 
   909  079D                     	;# 
   910  079E                     	;# 
   911  079E                     	;# 
   912  0F8C                     	;# 
   913  0F8D                     	;# 
   914  0F91                     	;# 
   915  0F96                     	;# 
   916  0F97                     	;# 
   917  0F9C                     	;# 
   918  0F9D                     	;# 
   919  0F9E                     	;# 
   920  0FE3                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0011                     	;# 
   948  0012                     	;# 
   949  0015                     	;# 
   950  0016                     	;# 
   951  0016                     	;# 
   952  0017                     	;# 
   953  0018                     	;# 
   954  0019                     	;# 
   955  001A                     	;# 
   956  001B                     	;# 
   957  001C                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  009F                     	;# 
   974  010C                     	;# 
   975  010D                     	;# 
   976  010E                     	;# 
   977  0116                     	;# 
   978  0117                     	;# 
   979  011D                     	;# 
   980  018C                     	;# 
   981  018D                     	;# 
   982  018E                     	;# 
   983  0191                     	;# 
   984  0191                     	;# 
   985  0192                     	;# 
   986  0193                     	;# 
   987  0193                     	;# 
   988  0194                     	;# 
   989  0195                     	;# 
   990  0196                     	;# 
   991  0199                     	;# 
   992  019A                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019C                     	;# 
   996  019D                     	;# 
   997  019E                     	;# 
   998  019F                     	;# 
   999  020C                     	;# 
  1000  020D                     	;# 
  1001  0211                     	;# 
  1002  0211                     	;# 
  1003  0212                     	;# 
  1004  0212                     	;# 
  1005  0213                     	;# 
  1006  0213                     	;# 
  1007  0214                     	;# 
  1008  0214                     	;# 
  1009  0215                     	;# 
  1010  0215                     	;# 
  1011  0215                     	;# 
  1012  0216                     	;# 
  1013  0216                     	;# 
  1014  0217                     	;# 
  1015  0217                     	;# 
  1016  0391                     	;# 
  1017  0392                     	;# 
  1018  0393                     	;# 
  1019  0394                     	;# 
  1020  0395                     	;# 
  1021  0396                     	;# 
  1022  0611                     	;# 
  1023  0612                     	;# 
  1024  0613                     	;# 
  1025  0613                     	;# 
  1026  0614                     	;# 
  1027  0615                     	;# 
  1028  0616                     	;# 
  1029  0616                     	;# 
  1030  0711                     	;# 
  1031  0711                     	;# 
  1032  0711                     	;# 
  1033  0712                     	;# 
  1034  0712                     	;# 
  1035  0713                     	;# 
  1036  0713                     	;# 
  1037  0713                     	;# 
  1038  0714                     	;# 
  1039  0714                     	;# 
  1040  0714                     	;# 
  1041  0715                     	;# 
  1042  0715                     	;# 
  1043  0716                     	;# 
  1044  0716                     	;# 
  1045  0716                     	;# 
  1046  0716                     	;# 
  1047  0717                     	;# 
  1048  0717                     	;# 
  1049  0717                     	;# 
  1050  0717                     	;# 
  1051  0718                     	;# 
  1052  0718                     	;# 
  1053  0718                     	;# 
  1054  0719                     	;# 
  1055  0719                     	;# 
  1056  0719                     	;# 
  1057  0719                     	;# 
  1058  071A                     	;# 
  1059  071A                     	;# 
  1060  071A                     	;# 
  1061  071A                     	;# 
  1062  071A                     	;# 
  1063  071B                     	;# 
  1064  071B                     	;# 
  1065  071C                     	;# 
  1066  071C                     	;# 
  1067  071C                     	;# 
  1068  071C                     	;# 
  1069  071C                     	;# 
  1070  071D                     	;# 
  1071  071D                     	;# 
  1072  071E                     	;# 
  1073  071E                     	;# 
  1074  0791                     	;# 
  1075  0791                     	;# 
  1076  0793                     	;# 
  1077  0793                     	;# 
  1078  0794                     	;# 
  1079  0794                     	;# 
  1080  0796                     	;# 
  1081  0796                     	;# 
  1082  0796                     	;# 
  1083  0797                     	;# 
  1084  0797                     	;# 
  1085  0797                     	;# 
  1086  0798                     	;# 
  1087  0798                     	;# 
  1088  0799                     	;# 
  1089  0799                     	;# 
  1090  0799                     	;# 
  1091  079A                     	;# 
  1092  079A                     	;# 
  1093  079A                     	;# 
  1094  079B                     	;# 
  1095  079C                     	;# 
  1096  079C                     	;# 
  1097  079C                     	;# 
  1098  079D                     	;# 
  1099  079E                     	;# 
  1100  079E                     	;# 
  1101  0F8C                     	;# 
  1102  0F8D                     	;# 
  1103  0F91                     	;# 
  1104  0F96                     	;# 
  1105  0F97                     	;# 
  1106  0F9C                     	;# 
  1107  0F9D                     	;# 
  1108  0F9E                     	;# 
  1109  0FE3                     	;# 
  1110  0FE4                     	;# 
  1111  0FE5                     	;# 
  1112  0FE6                     	;# 
  1113  0FE7                     	;# 
  1114  0FE8                     	;# 
  1115  0FE9                     	;# 
  1116  0FEA                     	;# 
  1117  0FEB                     	;# 
  1118  0FED                     	;# 
  1119  0FEE                     	;# 
  1120  0FEF                     	;# 
  1121  0000                     	;# 
  1122  0001                     	;# 
  1123  0002                     	;# 
  1124  0003                     	;# 
  1125  0004                     	;# 
  1126  0005                     	;# 
  1127  0006                     	;# 
  1128  0007                     	;# 
  1129  0008                     	;# 
  1130  0009                     	;# 
  1131  000A                     	;# 
  1132  000B                     	;# 
  1133  000C                     	;# 
  1134  000D                     	;# 
  1135  000E                     	;# 
  1136  0011                     	;# 
  1137  0012                     	;# 
  1138  0015                     	;# 
  1139  0016                     	;# 
  1140  0016                     	;# 
  1141  0017                     	;# 
  1142  0018                     	;# 
  1143  0019                     	;# 
  1144  001A                     	;# 
  1145  001B                     	;# 
  1146  001C                     	;# 
  1147  008C                     	;# 
  1148  008D                     	;# 
  1149  008E                     	;# 
  1150  0091                     	;# 
  1151  0092                     	;# 
  1152  0095                     	;# 
  1153  0096                     	;# 
  1154  0097                     	;# 
  1155  0099                     	;# 
  1156  009A                     	;# 
  1157  009B                     	;# 
  1158  009B                     	;# 
  1159  009C                     	;# 
  1160  009D                     	;# 
  1161  009E                     	;# 
  1162  009F                     	;# 
  1163  010C                     	;# 
  1164  010D                     	;# 
  1165  010E                     	;# 
  1166  0116                     	;# 
  1167  0117                     	;# 
  1168  011D                     	;# 
  1169  018C                     	;# 
  1170  018D                     	;# 
  1171  018E                     	;# 
  1172  0191                     	;# 
  1173  0191                     	;# 
  1174  0192                     	;# 
  1175  0193                     	;# 
  1176  0193                     	;# 
  1177  0194                     	;# 
  1178  0195                     	;# 
  1179  0196                     	;# 
  1180  0199                     	;# 
  1181  019A                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019C                     	;# 
  1185  019D                     	;# 
  1186  019E                     	;# 
  1187  019F                     	;# 
  1188  020C                     	;# 
  1189  020D                     	;# 
  1190  0211                     	;# 
  1191  0211                     	;# 
  1192  0212                     	;# 
  1193  0212                     	;# 
  1194  0213                     	;# 
  1195  0213                     	;# 
  1196  0214                     	;# 
  1197  0214                     	;# 
  1198  0215                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0216                     	;# 
  1202  0216                     	;# 
  1203  0217                     	;# 
  1204  0217                     	;# 
  1205  0391                     	;# 
  1206  0392                     	;# 
  1207  0393                     	;# 
  1208  0394                     	;# 
  1209  0395                     	;# 
  1210  0396                     	;# 
  1211  0611                     	;# 
  1212  0612                     	;# 
  1213  0613                     	;# 
  1214  0613                     	;# 
  1215  0614                     	;# 
  1216  0615                     	;# 
  1217  0616                     	;# 
  1218  0616                     	;# 
  1219  0711                     	;# 
  1220  0711                     	;# 
  1221  0711                     	;# 
  1222  0712                     	;# 
  1223  0712                     	;# 
  1224  0713                     	;# 
  1225  0713                     	;# 
  1226  0713                     	;# 
  1227  0714                     	;# 
  1228  0714                     	;# 
  1229  0714                     	;# 
  1230  0715                     	;# 
  1231  0715                     	;# 
  1232  0716                     	;# 
  1233  0716                     	;# 
  1234  0716                     	;# 
  1235  0716                     	;# 
  1236  0717                     	;# 
  1237  0717                     	;# 
  1238  0717                     	;# 
  1239  0717                     	;# 
  1240  0718                     	;# 
  1241  0718                     	;# 
  1242  0718                     	;# 
  1243  0719                     	;# 
  1244  0719                     	;# 
  1245  0719                     	;# 
  1246  0719                     	;# 
  1247  071A                     	;# 
  1248  071A                     	;# 
  1249  071A                     	;# 
  1250  071A                     	;# 
  1251  071A                     	;# 
  1252  071B                     	;# 
  1253  071B                     	;# 
  1254  071C                     	;# 
  1255  071C                     	;# 
  1256  071C                     	;# 
  1257  071C                     	;# 
  1258  071C                     	;# 
  1259  071D                     	;# 
  1260  071D                     	;# 
  1261  071E                     	;# 
  1262  071E                     	;# 
  1263  0791                     	;# 
  1264  0791                     	;# 
  1265  0793                     	;# 
  1266  0793                     	;# 
  1267  0794                     	;# 
  1268  0794                     	;# 
  1269  0796                     	;# 
  1270  0796                     	;# 
  1271  0796                     	;# 
  1272  0797                     	;# 
  1273  0797                     	;# 
  1274  0797                     	;# 
  1275  0798                     	;# 
  1276  0798                     	;# 
  1277  0799                     	;# 
  1278  0799                     	;# 
  1279  0799                     	;# 
  1280  079A                     	;# 
  1281  079A                     	;# 
  1282  079A                     	;# 
  1283  079B                     	;# 
  1284  079C                     	;# 
  1285  079C                     	;# 
  1286  079C                     	;# 
  1287  079D                     	;# 
  1288  079E                     	;# 
  1289  079E                     	;# 
  1290  0F8C                     	;# 
  1291  0F8D                     	;# 
  1292  0F91                     	;# 
  1293  0F96                     	;# 
  1294  0F97                     	;# 
  1295  0F9C                     	;# 
  1296  0F9D                     	;# 
  1297  0F9E                     	;# 
  1298  0FE3                     	;# 
  1299  0FE4                     	;# 
  1300  0FE5                     	;# 
  1301  0FE6                     	;# 
  1302  0FE7                     	;# 
  1303  0FE8                     	;# 
  1304  0FE9                     	;# 
  1305  0FEA                     	;# 
  1306  0FEB                     	;# 
  1307  0FED                     	;# 
  1308  0FEE                     	;# 
  1309  0FEF                     	;# 
  1310  0000                     	;# 
  1311  0001                     	;# 
  1312  0002                     	;# 
  1313  0003                     	;# 
  1314  0004                     	;# 
  1315  0005                     	;# 
  1316  0006                     	;# 
  1317  0007                     	;# 
  1318  0008                     	;# 
  1319  0009                     	;# 
  1320  000A                     	;# 
  1321  000B                     	;# 
  1322  000C                     	;# 
  1323  000D                     	;# 
  1324  000E                     	;# 
  1325  0011                     	;# 
  1326  0012                     	;# 
  1327  0015                     	;# 
  1328  0016                     	;# 
  1329  0016                     	;# 
  1330  0017                     	;# 
  1331  0018                     	;# 
  1332  0019                     	;# 
  1333  001A                     	;# 
  1334  001B                     	;# 
  1335  001C                     	;# 
  1336  008C                     	;# 
  1337  008D                     	;# 
  1338  008E                     	;# 
  1339  0091                     	;# 
  1340  0092                     	;# 
  1341  0095                     	;# 
  1342  0096                     	;# 
  1343  0097                     	;# 
  1344  0099                     	;# 
  1345  009A                     	;# 
  1346  009B                     	;# 
  1347  009B                     	;# 
  1348  009C                     	;# 
  1349  009D                     	;# 
  1350  009E                     	;# 
  1351  009F                     	;# 
  1352  010C                     	;# 
  1353  010D                     	;# 
  1354  010E                     	;# 
  1355  0116                     	;# 
  1356  0117                     	;# 
  1357  011D                     	;# 
  1358  018C                     	;# 
  1359  018D                     	;# 
  1360  018E                     	;# 
  1361  0191                     	;# 
  1362  0191                     	;# 
  1363  0192                     	;# 
  1364  0193                     	;# 
  1365  0193                     	;# 
  1366  0194                     	;# 
  1367  0195                     	;# 
  1368  0196                     	;# 
  1369  0199                     	;# 
  1370  019A                     	;# 
  1371  019B                     	;# 
  1372  019B                     	;# 
  1373  019C                     	;# 
  1374  019D                     	;# 
  1375  019E                     	;# 
  1376  019F                     	;# 
  1377  020C                     	;# 
  1378  020D                     	;# 
  1379  0211                     	;# 
  1380  0211                     	;# 
  1381  0212                     	;# 
  1382  0212                     	;# 
  1383  0213                     	;# 
  1384  0213                     	;# 
  1385  0214                     	;# 
  1386  0214                     	;# 
  1387  0215                     	;# 
  1388  0215                     	;# 
  1389  0215                     	;# 
  1390  0216                     	;# 
  1391  0216                     	;# 
  1392  0217                     	;# 
  1393  0217                     	;# 
  1394  0391                     	;# 
  1395  0392                     	;# 
  1396  0393                     	;# 
  1397  0394                     	;# 
  1398  0395                     	;# 
  1399  0396                     	;# 
  1400  0611                     	;# 
  1401  0612                     	;# 
  1402  0613                     	;# 
  1403  0613                     	;# 
  1404  0614                     	;# 
  1405  0615                     	;# 
  1406  0616                     	;# 
  1407  0616                     	;# 
  1408  0711                     	;# 
  1409  0711                     	;# 
  1410  0711                     	;# 
  1411  0712                     	;# 
  1412  0712                     	;# 
  1413  0713                     	;# 
  1414  0713                     	;# 
  1415  0713                     	;# 
  1416  0714                     	;# 
  1417  0714                     	;# 
  1418  0714                     	;# 
  1419  0715                     	;# 
  1420  0715                     	;# 
  1421  0716                     	;# 
  1422  0716                     	;# 
  1423  0716                     	;# 
  1424  0716                     	;# 
  1425  0717                     	;# 
  1426  0717                     	;# 
  1427  0717                     	;# 
  1428  0717                     	;# 
  1429  0718                     	;# 
  1430  0718                     	;# 
  1431  0718                     	;# 
  1432  0719                     	;# 
  1433  0719                     	;# 
  1434  0719                     	;# 
  1435  0719                     	;# 
  1436  071A                     	;# 
  1437  071A                     	;# 
  1438  071A                     	;# 
  1439  071A                     	;# 
  1440  071A                     	;# 
  1441  071B                     	;# 
  1442  071B                     	;# 
  1443  071C                     	;# 
  1444  071C                     	;# 
  1445  071C                     	;# 
  1446  071C                     	;# 
  1447  071C                     	;# 
  1448  071D                     	;# 
  1449  071D                     	;# 
  1450  071E                     	;# 
  1451  071E                     	;# 
  1452  0791                     	;# 
  1453  0791                     	;# 
  1454  0793                     	;# 
  1455  0793                     	;# 
  1456  0794                     	;# 
  1457  0794                     	;# 
  1458  0796                     	;# 
  1459  0796                     	;# 
  1460  0796                     	;# 
  1461  0797                     	;# 
  1462  0797                     	;# 
  1463  0797                     	;# 
  1464  0798                     	;# 
  1465  0798                     	;# 
  1466  0799                     	;# 
  1467  0799                     	;# 
  1468  0799                     	;# 
  1469  079A                     	;# 
  1470  079A                     	;# 
  1471  079A                     	;# 
  1472  079B                     	;# 
  1473  079C                     	;# 
  1474  079C                     	;# 
  1475  079C                     	;# 
  1476  079D                     	;# 
  1477  079E                     	;# 
  1478  079E                     	;# 
  1479  0F8C                     	;# 
  1480  0F8D                     	;# 
  1481  0F91                     	;# 
  1482  0F96                     	;# 
  1483  0F97                     	;# 
  1484  0F9C                     	;# 
  1485  0F9D                     	;# 
  1486  0F9E                     	;# 
  1487  0FE3                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0011                     	;# 
  1515  0012                     	;# 
  1516  0015                     	;# 
  1517  0016                     	;# 
  1518  0016                     	;# 
  1519  0017                     	;# 
  1520  0018                     	;# 
  1521  0019                     	;# 
  1522  001A                     	;# 
  1523  001B                     	;# 
  1524  001C                     	;# 
  1525  008C                     	;# 
  1526  008D                     	;# 
  1527  008E                     	;# 
  1528  0091                     	;# 
  1529  0092                     	;# 
  1530  0095                     	;# 
  1531  0096                     	;# 
  1532  0097                     	;# 
  1533  0099                     	;# 
  1534  009A                     	;# 
  1535  009B                     	;# 
  1536  009B                     	;# 
  1537  009C                     	;# 
  1538  009D                     	;# 
  1539  009E                     	;# 
  1540  009F                     	;# 
  1541  010C                     	;# 
  1542  010D                     	;# 
  1543  010E                     	;# 
  1544  0116                     	;# 
  1545  0117                     	;# 
  1546  011D                     	;# 
  1547  018C                     	;# 
  1548  018D                     	;# 
  1549  018E                     	;# 
  1550  0191                     	;# 
  1551  0191                     	;# 
  1552  0192                     	;# 
  1553  0193                     	;# 
  1554  0193                     	;# 
  1555  0194                     	;# 
  1556  0195                     	;# 
  1557  0196                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019F                     	;# 
  1566  020C                     	;# 
  1567  020D                     	;# 
  1568  0211                     	;# 
  1569  0211                     	;# 
  1570  0212                     	;# 
  1571  0212                     	;# 
  1572  0213                     	;# 
  1573  0213                     	;# 
  1574  0214                     	;# 
  1575  0214                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0216                     	;# 
  1580  0216                     	;# 
  1581  0217                     	;# 
  1582  0217                     	;# 
  1583  0391                     	;# 
  1584  0392                     	;# 
  1585  0393                     	;# 
  1586  0394                     	;# 
  1587  0395                     	;# 
  1588  0396                     	;# 
  1589  0611                     	;# 
  1590  0612                     	;# 
  1591  0613                     	;# 
  1592  0613                     	;# 
  1593  0614                     	;# 
  1594  0615                     	;# 
  1595  0616                     	;# 
  1596  0616                     	;# 
  1597  0711                     	;# 
  1598  0711                     	;# 
  1599  0711                     	;# 
  1600  0712                     	;# 
  1601  0712                     	;# 
  1602  0713                     	;# 
  1603  0713                     	;# 
  1604  0713                     	;# 
  1605  0714                     	;# 
  1606  0714                     	;# 
  1607  0714                     	;# 
  1608  0715                     	;# 
  1609  0715                     	;# 
  1610  0716                     	;# 
  1611  0716                     	;# 
  1612  0716                     	;# 
  1613  0716                     	;# 
  1614  0717                     	;# 
  1615  0717                     	;# 
  1616  0717                     	;# 
  1617  0717                     	;# 
  1618  0718                     	;# 
  1619  0718                     	;# 
  1620  0718                     	;# 
  1621  0719                     	;# 
  1622  0719                     	;# 
  1623  0719                     	;# 
  1624  0719                     	;# 
  1625  071A                     	;# 
  1626  071A                     	;# 
  1627  071A                     	;# 
  1628  071A                     	;# 
  1629  071A                     	;# 
  1630  071B                     	;# 
  1631  071B                     	;# 
  1632  071C                     	;# 
  1633  071C                     	;# 
  1634  071C                     	;# 
  1635  071C                     	;# 
  1636  071C                     	;# 
  1637  071D                     	;# 
  1638  071D                     	;# 
  1639  071E                     	;# 
  1640  071E                     	;# 
  1641  0791                     	;# 
  1642  0791                     	;# 
  1643  0793                     	;# 
  1644  0793                     	;# 
  1645  0794                     	;# 
  1646  0794                     	;# 
  1647  0796                     	;# 
  1648  0796                     	;# 
  1649  0796                     	;# 
  1650  0797                     	;# 
  1651  0797                     	;# 
  1652  0797                     	;# 
  1653  0798                     	;# 
  1654  0798                     	;# 
  1655  0799                     	;# 
  1656  0799                     	;# 
  1657  0799                     	;# 
  1658  079A                     	;# 
  1659  079A                     	;# 
  1660  079A                     	;# 
  1661  079B                     	;# 
  1662  079C                     	;# 
  1663  079C                     	;# 
  1664  079C                     	;# 
  1665  079D                     	;# 
  1666  079E                     	;# 
  1667  079E                     	;# 
  1668  0F8C                     	;# 
  1669  0F8D                     	;# 
  1670  0F91                     	;# 
  1671  0F96                     	;# 
  1672  0F97                     	;# 
  1673  0F9C                     	;# 
  1674  0F9D                     	;# 
  1675  0F9E                     	;# 
  1676  0FE3                     	;# 
  1677  0FE4                     	;# 
  1678  0FE5                     	;# 
  1679  0FE6                     	;# 
  1680  0FE7                     	;# 
  1681  0FE8                     	;# 
  1682  0FE9                     	;# 
  1683  0FEA                     	;# 
  1684  0FEB                     	;# 
  1685  0FED                     	;# 
  1686  0FEE                     	;# 
  1687  0FEF                     	;# 
  1688  0000                     	;# 
  1689  0001                     	;# 
  1690  0002                     	;# 
  1691  0003                     	;# 
  1692  0004                     	;# 
  1693  0005                     	;# 
  1694  0006                     	;# 
  1695  0007                     	;# 
  1696  0008                     	;# 
  1697  0009                     	;# 
  1698  000A                     	;# 
  1699  000B                     	;# 
  1700  000C                     	;# 
  1701  000D                     	;# 
  1702  000E                     	;# 
  1703  0011                     	;# 
  1704  0012                     	;# 
  1705  0015                     	;# 
  1706  0016                     	;# 
  1707  0016                     	;# 
  1708  0017                     	;# 
  1709  0018                     	;# 
  1710  0019                     	;# 
  1711  001A                     	;# 
  1712  001B                     	;# 
  1713  001C                     	;# 
  1714  008C                     	;# 
  1715  008D                     	;# 
  1716  008E                     	;# 
  1717  0091                     	;# 
  1718  0092                     	;# 
  1719  0095                     	;# 
  1720  0096                     	;# 
  1721  0097                     	;# 
  1722  0099                     	;# 
  1723  009A                     	;# 
  1724  009B                     	;# 
  1725  009B                     	;# 
  1726  009C                     	;# 
  1727  009D                     	;# 
  1728  009E                     	;# 
  1729  009F                     	;# 
  1730  010C                     	;# 
  1731  010D                     	;# 
  1732  010E                     	;# 
  1733  0116                     	;# 
  1734  0117                     	;# 
  1735  011D                     	;# 
  1736  018C                     	;# 
  1737  018D                     	;# 
  1738  018E                     	;# 
  1739  0191                     	;# 
  1740  0191                     	;# 
  1741  0192                     	;# 
  1742  0193                     	;# 
  1743  0193                     	;# 
  1744  0194                     	;# 
  1745  0195                     	;# 
  1746  0196                     	;# 
  1747  0199                     	;# 
  1748  019A                     	;# 
  1749  019B                     	;# 
  1750  019B                     	;# 
  1751  019C                     	;# 
  1752  019D                     	;# 
  1753  019E                     	;# 
  1754  019F                     	;# 
  1755  020C                     	;# 
  1756  020D                     	;# 
  1757  0211                     	;# 
  1758  0211                     	;# 
  1759  0212                     	;# 
  1760  0212                     	;# 
  1761  0213                     	;# 
  1762  0213                     	;# 
  1763  0214                     	;# 
  1764  0214                     	;# 
  1765  0215                     	;# 
  1766  0215                     	;# 
  1767  0215                     	;# 
  1768  0216                     	;# 
  1769  0216                     	;# 
  1770  0217                     	;# 
  1771  0217                     	;# 
  1772  0391                     	;# 
  1773  0392                     	;# 
  1774  0393                     	;# 
  1775  0394                     	;# 
  1776  0395                     	;# 
  1777  0396                     	;# 
  1778  0611                     	;# 
  1779  0612                     	;# 
  1780  0613                     	;# 
  1781  0613                     	;# 
  1782  0614                     	;# 
  1783  0615                     	;# 
  1784  0616                     	;# 
  1785  0616                     	;# 
  1786  0711                     	;# 
  1787  0711                     	;# 
  1788  0711                     	;# 
  1789  0712                     	;# 
  1790  0712                     	;# 
  1791  0713                     	;# 
  1792  0713                     	;# 
  1793  0713                     	;# 
  1794  0714                     	;# 
  1795  0714                     	;# 
  1796  0714                     	;# 
  1797  0715                     	;# 
  1798  0715                     	;# 
  1799  0716                     	;# 
  1800  0716                     	;# 
  1801  0716                     	;# 
  1802  0716                     	;# 
  1803  0717                     	;# 
  1804  0717                     	;# 
  1805  0717                     	;# 
  1806  0717                     	;# 
  1807  0718                     	;# 
  1808  0718                     	;# 
  1809  0718                     	;# 
  1810  0719                     	;# 
  1811  0719                     	;# 
  1812  0719                     	;# 
  1813  0719                     	;# 
  1814  071A                     	;# 
  1815  071A                     	;# 
  1816  071A                     	;# 
  1817  071A                     	;# 
  1818  071A                     	;# 
  1819  071B                     	;# 
  1820  071B                     	;# 
  1821  071C                     	;# 
  1822  071C                     	;# 
  1823  071C                     	;# 
  1824  071C                     	;# 
  1825  071C                     	;# 
  1826  071D                     	;# 
  1827  071D                     	;# 
  1828  071E                     	;# 
  1829  071E                     	;# 
  1830  0791                     	;# 
  1831  0791                     	;# 
  1832  0793                     	;# 
  1833  0793                     	;# 
  1834  0794                     	;# 
  1835  0794                     	;# 
  1836  0796                     	;# 
  1837  0796                     	;# 
  1838  0796                     	;# 
  1839  0797                     	;# 
  1840  0797                     	;# 
  1841  0797                     	;# 
  1842  0798                     	;# 
  1843  0798                     	;# 
  1844  0799                     	;# 
  1845  0799                     	;# 
  1846  0799                     	;# 
  1847  079A                     	;# 
  1848  079A                     	;# 
  1849  079A                     	;# 
  1850  079B                     	;# 
  1851  079C                     	;# 
  1852  079C                     	;# 
  1853  079C                     	;# 
  1854  079D                     	;# 
  1855  079E                     	;# 
  1856  079E                     	;# 
  1857  0F8C                     	;# 
  1858  0F8D                     	;# 
  1859  0F91                     	;# 
  1860  0F96                     	;# 
  1861  0F97                     	;# 
  1862  0F9C                     	;# 
  1863  0F9D                     	;# 
  1864  0F9E                     	;# 
  1865  0FE3                     	;# 
  1866  0FE4                     	;# 
  1867  0FE5                     	;# 
  1868  0FE6                     	;# 
  1869  0FE7                     	;# 
  1870  0FE8                     	;# 
  1871  0FE9                     	;# 
  1872  0FEA                     	;# 
  1873  0FEB                     	;# 
  1874  0FED                     	;# 
  1875  0FEE                     	;# 
  1876  0FEF                     	;# 
  1877  0000                     	;# 
  1878  0001                     	;# 
  1879  0002                     	;# 
  1880  0003                     	;# 
  1881  0004                     	;# 
  1882  0005                     	;# 
  1883  0006                     	;# 
  1884  0007                     	;# 
  1885  0008                     	;# 
  1886  0009                     	;# 
  1887  000A                     	;# 
  1888  000B                     	;# 
  1889  000C                     	;# 
  1890  000D                     	;# 
  1891  000E                     	;# 
  1892  0011                     	;# 
  1893  0012                     	;# 
  1894  0015                     	;# 
  1895  0016                     	;# 
  1896  0016                     	;# 
  1897  0017                     	;# 
  1898  0018                     	;# 
  1899  0019                     	;# 
  1900  001A                     	;# 
  1901  001B                     	;# 
  1902  001C                     	;# 
  1903  008C                     	;# 
  1904  008D                     	;# 
  1905  008E                     	;# 
  1906  0091                     	;# 
  1907  0092                     	;# 
  1908  0095                     	;# 
  1909  0096                     	;# 
  1910  0097                     	;# 
  1911  0099                     	;# 
  1912  009A                     	;# 
  1913  009B                     	;# 
  1914  009B                     	;# 
  1915  009C                     	;# 
  1916  009D                     	;# 
  1917  009E                     	;# 
  1918  009F                     	;# 
  1919  010C                     	;# 
  1920  010D                     	;# 
  1921  010E                     	;# 
  1922  0116                     	;# 
  1923  0117                     	;# 
  1924  011D                     	;# 
  1925  018C                     	;# 
  1926  018D                     	;# 
  1927  018E                     	;# 
  1928  0191                     	;# 
  1929  0191                     	;# 
  1930  0192                     	;# 
  1931  0193                     	;# 
  1932  0193                     	;# 
  1933  0194                     	;# 
  1934  0195                     	;# 
  1935  0196                     	;# 
  1936  0199                     	;# 
  1937  019A                     	;# 
  1938  019B                     	;# 
  1939  019B                     	;# 
  1940  019C                     	;# 
  1941  019D                     	;# 
  1942  019E                     	;# 
  1943  019F                     	;# 
  1944  020C                     	;# 
  1945  020D                     	;# 
  1946  0211                     	;# 
  1947  0211                     	;# 
  1948  0212                     	;# 
  1949  0212                     	;# 
  1950  0213                     	;# 
  1951  0213                     	;# 
  1952  0214                     	;# 
  1953  0214                     	;# 
  1954  0215                     	;# 
  1955  0215                     	;# 
  1956  0215                     	;# 
  1957  0216                     	;# 
  1958  0216                     	;# 
  1959  0217                     	;# 
  1960  0217                     	;# 
  1961  0391                     	;# 
  1962  0392                     	;# 
  1963  0393                     	;# 
  1964  0394                     	;# 
  1965  0395                     	;# 
  1966  0396                     	;# 
  1967  0611                     	;# 
  1968  0612                     	;# 
  1969  0613                     	;# 
  1970  0613                     	;# 
  1971  0614                     	;# 
  1972  0615                     	;# 
  1973  0616                     	;# 
  1974  0616                     	;# 
  1975  0711                     	;# 
  1976  0711                     	;# 
  1977  0711                     	;# 
  1978  0712                     	;# 
  1979  0712                     	;# 
  1980  0713                     	;# 
  1981  0713                     	;# 
  1982  0713                     	;# 
  1983  0714                     	;# 
  1984  0714                     	;# 
  1985  0714                     	;# 
  1986  0715                     	;# 
  1987  0715                     	;# 
  1988  0716                     	;# 
  1989  0716                     	;# 
  1990  0716                     	;# 
  1991  0716                     	;# 
  1992  0717                     	;# 
  1993  0717                     	;# 
  1994  0717                     	;# 
  1995  0717                     	;# 
  1996  0718                     	;# 
  1997  0718                     	;# 
  1998  0718                     	;# 
  1999  0719                     	;# 
  2000  0719                     	;# 
  2001  0719                     	;# 
  2002  0719                     	;# 
  2003  071A                     	;# 
  2004  071A                     	;# 
  2005  071A                     	;# 
  2006  071A                     	;# 
  2007  071A                     	;# 
  2008  071B                     	;# 
  2009  071B                     	;# 
  2010  071C                     	;# 
  2011  071C                     	;# 
  2012  071C                     	;# 
  2013  071C                     	;# 
  2014  071C                     	;# 
  2015  071D                     	;# 
  2016  071D                     	;# 
  2017  071E                     	;# 
  2018  071E                     	;# 
  2019  0791                     	;# 
  2020  0791                     	;# 
  2021  0793                     	;# 
  2022  0793                     	;# 
  2023  0794                     	;# 
  2024  0794                     	;# 
  2025  0796                     	;# 
  2026  0796                     	;# 
  2027  0796                     	;# 
  2028  0797                     	;# 
  2029  0797                     	;# 
  2030  0797                     	;# 
  2031  0798                     	;# 
  2032  0798                     	;# 
  2033  0799                     	;# 
  2034  0799                     	;# 
  2035  0799                     	;# 
  2036  079A                     	;# 
  2037  079A                     	;# 
  2038  079A                     	;# 
  2039  079B                     	;# 
  2040  079C                     	;# 
  2041  079C                     	;# 
  2042  079C                     	;# 
  2043  079D                     	;# 
  2044  079E                     	;# 
  2045  079E                     	;# 
  2046  0F8C                     	;# 
  2047  0F8D                     	;# 
  2048  0F91                     	;# 
  2049  0F96                     	;# 
  2050  0F97                     	;# 
  2051  0F9C                     	;# 
  2052  0F9D                     	;# 
  2053  0F9E                     	;# 
  2054  0FE3                     	;# 
  2055  0FE4                     	;# 
  2056  0FE5                     	;# 
  2057  0FE6                     	;# 
  2058  0FE7                     	;# 
  2059  0FE8                     	;# 
  2060  0FE9                     	;# 
  2061  0FEA                     	;# 
  2062  0FEB                     	;# 
  2063  0FED                     	;# 
  2064  0FEE                     	;# 
  2065  0FEF                     	;# 
  2066  0000                     	;# 
  2067  0001                     	;# 
  2068  0002                     	;# 
  2069  0003                     	;# 
  2070  0004                     	;# 
  2071  0005                     	;# 
  2072  0006                     	;# 
  2073  0007                     	;# 
  2074  0008                     	;# 
  2075  0009                     	;# 
  2076  000A                     	;# 
  2077  000B                     	;# 
  2078  000C                     	;# 
  2079  000D                     	;# 
  2080  000E                     	;# 
  2081  0011                     	;# 
  2082  0012                     	;# 
  2083  0015                     	;# 
  2084  0016                     	;# 
  2085  0016                     	;# 
  2086  0017                     	;# 
  2087  0018                     	;# 
  2088  0019                     	;# 
  2089  001A                     	;# 
  2090  001B                     	;# 
  2091  001C                     	;# 
  2092  008C                     	;# 
  2093  008D                     	;# 
  2094  008E                     	;# 
  2095  0091                     	;# 
  2096  0092                     	;# 
  2097  0095                     	;# 
  2098  0096                     	;# 
  2099  0097                     	;# 
  2100  0099                     	;# 
  2101  009A                     	;# 
  2102  009B                     	;# 
  2103  009B                     	;# 
  2104  009C                     	;# 
  2105  009D                     	;# 
  2106  009E                     	;# 
  2107  009F                     	;# 
  2108  010C                     	;# 
  2109  010D                     	;# 
  2110  010E                     	;# 
  2111  0116                     	;# 
  2112  0117                     	;# 
  2113  011D                     	;# 
  2114  018C                     	;# 
  2115  018D                     	;# 
  2116  018E                     	;# 
  2117  0191                     	;# 
  2118  0191                     	;# 
  2119  0192                     	;# 
  2120  0193                     	;# 
  2121  0193                     	;# 
  2122  0194                     	;# 
  2123  0195                     	;# 
  2124  0196                     	;# 
  2125  0199                     	;# 
  2126  019A                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019C                     	;# 
  2130  019D                     	;# 
  2131  019E                     	;# 
  2132  019F                     	;# 
  2133  020C                     	;# 
  2134  020D                     	;# 
  2135  0211                     	;# 
  2136  0211                     	;# 
  2137  0212                     	;# 
  2138  0212                     	;# 
  2139  0213                     	;# 
  2140  0213                     	;# 
  2141  0214                     	;# 
  2142  0214                     	;# 
  2143  0215                     	;# 
  2144  0215                     	;# 
  2145  0215                     	;# 
  2146  0216                     	;# 
  2147  0216                     	;# 
  2148  0217                     	;# 
  2149  0217                     	;# 
  2150  0391                     	;# 
  2151  0392                     	;# 
  2152  0393                     	;# 
  2153  0394                     	;# 
  2154  0395                     	;# 
  2155  0396                     	;# 
  2156  0611                     	;# 
  2157  0612                     	;# 
  2158  0613                     	;# 
  2159  0613                     	;# 
  2160  0614                     	;# 
  2161  0615                     	;# 
  2162  0616                     	;# 
  2163  0616                     	;# 
  2164  0711                     	;# 
  2165  0711                     	;# 
  2166  0711                     	;# 
  2167  0712                     	;# 
  2168  0712                     	;# 
  2169  0713                     	;# 
  2170  0713                     	;# 
  2171  0713                     	;# 
  2172  0714                     	;# 
  2173  0714                     	;# 
  2174  0714                     	;# 
  2175  0715                     	;# 
  2176  0715                     	;# 
  2177  0716                     	;# 
  2178  0716                     	;# 
  2179  0716                     	;# 
  2180  0716                     	;# 
  2181  0717                     	;# 
  2182  0717                     	;# 
  2183  0717                     	;# 
  2184  0717                     	;# 
  2185  0718                     	;# 
  2186  0718                     	;# 
  2187  0718                     	;# 
  2188  0719                     	;# 
  2189  0719                     	;# 
  2190  0719                     	;# 
  2191  0719                     	;# 
  2192  071A                     	;# 
  2193  071A                     	;# 
  2194  071A                     	;# 
  2195  071A                     	;# 
  2196  071A                     	;# 
  2197  071B                     	;# 
  2198  071B                     	;# 
  2199  071C                     	;# 
  2200  071C                     	;# 
  2201  071C                     	;# 
  2202  071C                     	;# 
  2203  071C                     	;# 
  2204  071D                     	;# 
  2205  071D                     	;# 
  2206  071E                     	;# 
  2207  071E                     	;# 
  2208  0791                     	;# 
  2209  0791                     	;# 
  2210  0793                     	;# 
  2211  0793                     	;# 
  2212  0794                     	;# 
  2213  0794                     	;# 
  2214  0796                     	;# 
  2215  0796                     	;# 
  2216  0796                     	;# 
  2217  0797                     	;# 
  2218  0797                     	;# 
  2219  0797                     	;# 
  2220  0798                     	;# 
  2221  0798                     	;# 
  2222  0799                     	;# 
  2223  0799                     	;# 
  2224  0799                     	;# 
  2225  079A                     	;# 
  2226  079A                     	;# 
  2227  079A                     	;# 
  2228  079B                     	;# 
  2229  079C                     	;# 
  2230  079C                     	;# 
  2231  079C                     	;# 
  2232  079D                     	;# 
  2233  079E                     	;# 
  2234  079E                     	;# 
  2235  0F8C                     	;# 
  2236  0F8D                     	;# 
  2237  0F91                     	;# 
  2238  0F96                     	;# 
  2239  0F97                     	;# 
  2240  0F9C                     	;# 
  2241  0F9D                     	;# 
  2242  0F9E                     	;# 
  2243  0FE3                     	;# 
  2244  0FE4                     	;# 
  2245  0FE5                     	;# 
  2246  0FE6                     	;# 
  2247  0FE7                     	;# 
  2248  0FE8                     	;# 
  2249  0FE9                     	;# 
  2250  0FEA                     	;# 
  2251  0FEB                     	;# 
  2252  0FED                     	;# 
  2253  0FEE                     	;# 
  2254  0FEF                     	;# 
  2255                           
  2256                           	psect	idataBANK0
  2257  1486                     __pidataBANK0:	
  2258                           
  2259                           ;initializer for _callback_notPressed
  2260  1486  3476               	retlw	low _Button_DefaultCallback
  2261  1487  3414               	retlw	high _Button_DefaultCallback
  2262                           
  2263                           ;initializer for _sample_period
  2264  1488  34AE               	retlw	174
  2265                           
  2266                           	psect	idataBANK1
  2267  152A                     __pidataBANK1:	
  2268                           
  2269                           ;initializer for _Button_StateMachine
  2270  152A  34AD               	retlw	low _Button_State_Initializing
  2271  152B  340C               	retlw	high _Button_State_Initializing
  2272  152C  349E               	retlw	low _Button_State_NotPressed
  2273  152D  3406               	retlw	high _Button_State_NotPressed
  2274  152E  340F               	retlw	low _Button_State_Pressed
  2275  152F  340D               	retlw	high _Button_State_Pressed
  2276                           
  2277                           ;initializer for _callback_pressed
  2278  1530  3476               	retlw	low _Button_DefaultCallback
  2279  1531  3414               	retlw	high _Button_DefaultCallback
  2280                           
  2281                           ;initializer for _callback_sampled
  2282  1532  3400               	retlw	low _Sensor_DefaultCallback
  2283  1533  3408               	retlw	high _Sensor_DefaultCallback
  2284                           
  2285                           	psect	idataBANK2
  2286  1702                     __pidataBANK2:	
  2287                           
  2288                           ;initializer for _mtouch_sensor
  2289  1702  3400               	retlw	0
  2290  1703  3469               	retlw	105
  2291  1704  3430               	retlw	48
  2292  1705  3410               	retlw	16
  2293  1706  3420               	retlw	32
  2294  1707  3400               	retlw	0
  2295  1708  3400               	retlw	0
  2296  1709  3400               	retlw	0
  2297  170A  3400               	retlw	0
  2298  170B  3401               	retlw	1
  2299  170C  3431               	retlw	49
  2300  170D  3430               	retlw	48
  2301  170E  3410               	retlw	16
  2302  170F  3420               	retlw	32
  2303  1710  3400               	retlw	0
  2304  1711  3400               	retlw	0
  2305  1712  3400               	retlw	0
  2306  1713  3400               	retlw	0
  2307  1714  3402               	retlw	2
  2308  1715  3461               	retlw	97
  2309  1716  3430               	retlw	48
  2310  1717  3410               	retlw	16
  2311  1718  3420               	retlw	32
  2312  1719  3400               	retlw	0
  2313  171A  3400               	retlw	0
  2314  171B  3400               	retlw	0
  2315  171C  3400               	retlw	0
  2316                           
  2317                           	psect	stringtext1
  2318  180F                     __pstringtext1:	
  2319  180F                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  2320  180F  3400               	retlw	0
  2321  1810  340D               	retlw	13
  2322  1811  341C               	retlw	28
  2323  1812  341E               	retlw	30
  2324  1813  3417               	retlw	23
  2325  1814                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  2326                           
  2327                           	psect	stringtext2
  2328  183C                     __pstringtext2:	
  2329  183C                     _sensor_scan_group:	
  2330  183C  3459               	retlw	low ((_mtouch_sensor| (0+256)+9))
  2331  183D  3450               	retlw	low (_mtouch_sensor| (0+256))
  2332  183E  3400               	retlw	0
  2333  183F  3462               	retlw	low ((_mtouch_sensor| (0+256)+18))
  2334  1840                     __end_of_sensor_scan_group:	
  2335                           
  2336                           	psect	stringtext3
  2337  1000                     __pstringtext3:	
  2338  1000                     _mtouch_button_init:	
  2339  1000  3400               	retlw	0
  2340  1001  3402               	retlw	2
  2341  1002  3400               	retlw	0
  2342  1003  3400               	retlw	0
  2343  1004  3400               	retlw	0
  2344  1005  3400               	retlw	0
  2345  1006  3400               	retlw	0
  2346  1007  3400               	retlw	0
  2347  1008  3400               	retlw	0
  2348  1009  3400               	retlw	0
  2349  100A  3400               	retlw	0
  2350  100B  3400               	retlw	0
  2351  100C  3400               	retlw	0
  2352  100D  3400               	retlw	0
  2353  100E  3464               	retlw	100
  2354  100F  3401               	retlw	1
  2355  1010  3401               	retlw	1
  2356  1011  3400               	retlw	0
  2357  1012  3400               	retlw	0
  2358  1013  3400               	retlw	0
  2359  1014  3400               	retlw	0
  2360  1015  3400               	retlw	0
  2361  1016  3400               	retlw	0
  2362  1017  3400               	retlw	0
  2363  1018  3400               	retlw	0
  2364  1019  3400               	retlw	0
  2365  101A  3400               	retlw	0
  2366  101B  3400               	retlw	0
  2367  101C  3400               	retlw	0
  2368  101D  3400               	retlw	0
  2369  101E  3464               	retlw	100
  2370  101F  3401               	retlw	1
  2371  1020  3402               	retlw	2
  2372  1021  3401               	retlw	1
  2373  1022  3400               	retlw	0
  2374  1023  3400               	retlw	0
  2375  1024  3400               	retlw	0
  2376  1025  3400               	retlw	0
  2377  1026  3400               	retlw	0
  2378  1027  3400               	retlw	0
  2379  1028  3400               	retlw	0
  2380  1029  3400               	retlw	0
  2381  102A  3400               	retlw	0
  2382  102B  3400               	retlw	0
  2383  102C  3400               	retlw	0
  2384  102D  3400               	retlw	0
  2385  102E  3464               	retlw	100
  2386  102F  3401               	retlw	1
  2387  1030                     __end_of_mtouch_button_init:	
  2388                           
  2389                           	psect	nvBANK1
  2390  00C4                     __pnvBANK1:	
  2391  00C4                     _EUSART_ErrorHandler:	
  2392  00C4                     	ds	2
  2393  00C6                     _EUSART_OverrunErrorHandler:	
  2394  00C6                     	ds	2
  2395  00C8                     _EUSART_FramingErrorHandler:	
  2396  00C8                     	ds	2
  2397  00CA                     _EUSART_RxDefaultInterruptHandler:	
  2398  00CA                     	ds	2
  2399  00CC                     _EUSART_TxDefaultInterruptHandler:	
  2400  00CC                     	ds	2
  2401  00CE                     _eusartTxBufferRemaining:	
  2402  00CE                     	ds	1
  2403  001C                     _T2CON	set	28
  2404  001A                     _TMR2	set	26
  2405  001B                     _PR2	set	27
  2406  000B                     _INTCONbits	set	11
  2407  0012                     _PIR2bits	set	18
  2408  0011                     _PIR1bits	set	17
  2409  001C                     _T2CONbits	set	28
  2410  005F                     _GIE	set	95
  2411  0095                     _OPTION_REGbits	set	149
  2412  008E                     _TRISC	set	142
  2413  008D                     _TRISB	set	141
  2414  008C                     _TRISA	set	140
  2415  0097                     _WDTCON	set	151
  2416  0099                     _OSCCON	set	153
  2417  0091                     _PIE1bits	set	145
  2418  010C                     _LATAbits	set	268
  2419  010E                     _LATCbits	set	270
  2420  011D                     _APFCON	set	285
  2421  010E                     _LATC	set	270
  2422  010D                     _LATB	set	269
  2423  010C                     _LATA	set	268
  2424  0116                     _BORCON	set	278
  2425  011D                     _APFCONbits	set	285
  2426  018C                     _ANSELA	set	396
  2427  018D                     _ANSELB	set	397
  2428  018E                     _ANSELC	set	398
  2429  0199                     _RCREG	set	409
  2430  019D                     _RCSTAbits	set	413
  2431  019A                     _TXREG	set	410
  2432  019E                     _TXSTAbits	set	414
  2433  019C                     _SPBRGH	set	412
  2434  019B                     _SPBRGL	set	411
  2435  019E                     _TXSTA	set	414
  2436  019D                     _RCSTA	set	413
  2437  019F                     _BAUDCON	set	415
  2438  020C                     _WPUA	set	524
  2439  020D                     _WPUB	set	525
  2440  071A                     _AAD1RES0	set	1818
  2441  0711                     _AD1CON0bits	set	1809
  2442  0714                     _AAD1CON3	set	1812
  2443  0713                     _AD1CON2	set	1811
  2444  0717                     _AD1ACQCON	set	1815
  2445  0716                     _AD1PRECON	set	1814
  2446  0718                     _AAD1GRD	set	1816
  2447  0713                     _AAD1CON2	set	1811
  2448  0719                     _AAD1CAP	set	1817
  2449  0714                     _AD1CON3	set	1812
  2450  0712                     _ADCOMCON	set	1810
  2451  0711                     _AD1CON0	set	1809
  2452  079A                     _AAD2RES0	set	1946
  2453  0791                     _AD2CON0bits	set	1937
  2454  0797                     _AD2ACQCON	set	1943
  2455  0796                     _AD2PRECON	set	1942
  2456  0794                     _AAD2CON3	set	1940
  2457  0798                     _AAD2GRD	set	1944
  2458  0793                     _AD2CON2	set	1939
  2459  0794                     _AD2CON3	set	1940
  2460  0791                     _AD2CON0	set	1937
  2461                           
  2462                           	psect	stringtext4
  2463  1800                     __pstringtext4:	
  2464  1800                     STR_1:	
  2465  1800  3450               	retlw	80	;'P'
  2466  1801  3449               	retlw	73	;'I'
  2467  1802  3443               	retlw	67	;'C'
  2468  1803  3453               	retlw	83	;'S'
  2469  1804  344D               	retlw	77	;'M'
  2470  1805  3441               	retlw	65	;'A'
  2471  1806  3452               	retlw	82	;'R'
  2472  1807  3454               	retlw	84	;'T'
  2473  1808  3400               	retlw	0
  2474                           
  2475                           	psect	stringtext5
  2476  1809                     __pstringtext5:	
  2477  1809                     STR_2:	
  2478  1809  3452               	retlw	82	;'R'
  2479  180A  3455               	retlw	85	;'U'
  2480  180B  344E               	retlw	78	;'N'
  2481  180C  340D               	retlw	13
  2482  180D  340A               	retlw	10
  2483  180E  3400               	retlw	0
  2484                           
  2485                           	psect	stringtext6
  2486  1814                     __pstringtext6:	
  2487  1814                     STR_3:	
  2488  1814  3450               	retlw	80	;'P'
  2489  1815  3449               	retlw	73	;'I'
  2490  1816  3443               	retlw	67	;'C'
  2491  1817  3430               	retlw	48	;'0'
  2492  1818  3400               	retlw	0
  2493                           
  2494                           	psect	stringtext7
  2495  1819                     __pstringtext7:	
  2496  1819                     STR_4:	
  2497  1819  3450               	retlw	80	;'P'
  2498  181A  3449               	retlw	73	;'I'
  2499  181B  3443               	retlw	67	;'C'
  2500  181C  3431               	retlw	49	;'1'
  2501  181D  3400               	retlw	0
  2502                           
  2503                           	psect	stringtext8
  2504  181E                     __pstringtext8:	
  2505  181E                     STR_5:	
  2506  181E  3450               	retlw	80	;'P'
  2507  181F  3449               	retlw	73	;'I'
  2508  1820  3443               	retlw	67	;'C'
  2509  1821  3432               	retlw	50	;'2'
  2510  1822  3400               	retlw	0
  2511                           
  2512                           	psect	stringtext9
  2513  1823                     __pstringtext9:	
  2514  1823                     STR_6:	
  2515  1823  3450               	retlw	80	;'P'
  2516  1824  3449               	retlw	73	;'I'
  2517  1825  3443               	retlw	67	;'C'
  2518  1826  3433               	retlw	51	;'3'
  2519  1827  3400               	retlw	0
  2520                           
  2521                           	psect	stringtext10
  2522  1828                     __pstringtext10:	
  2523  1828                     STR_7:	
  2524  1828  3450               	retlw	80	;'P'
  2525  1829  3449               	retlw	73	;'I'
  2526  182A  3443               	retlw	67	;'C'
  2527  182B  3434               	retlw	52	;'4'
  2528  182C  3400               	retlw	0
  2529                           
  2530                           	psect	stringtext11
  2531  182D                     __pstringtext11:	
  2532  182D                     STR_8:	
  2533  182D  3450               	retlw	80	;'P'
  2534  182E  3449               	retlw	73	;'I'
  2535  182F  3443               	retlw	67	;'C'
  2536  1830  3435               	retlw	53	;'5'
  2537  1831  3400               	retlw	0
  2538                           
  2539                           	psect	stringtext12
  2540  1832                     __pstringtext12:	
  2541  1832                     STR_9:	
  2542  1832  3450               	retlw	80	;'P'
  2543  1833  3449               	retlw	73	;'I'
  2544  1834  3443               	retlw	67	;'C'
  2545  1835  3436               	retlw	54	;'6'
  2546  1836  3400               	retlw	0
  2547                           
  2548                           	psect	stringtext13
  2549  1837                     __pstringtext13:	
  2550  1837                     STR_10:	
  2551  1837  3450               	retlw	80	;'P'
  2552  1838  3449               	retlw	73	;'I'
  2553  1839  3443               	retlw	67	;'C'
  2554  183A  3437               	retlw	55	;'7'
  2555  183B  3400               	retlw	0
  2556                           
  2557                           	psect	stringtext14
  2558  1840                     __pstringtext14:	
  2559  1840                     STR_11:	
  2560  1840  3425               	retlw	37	;'%'
  2561  1841  3463               	retlw	99	;'c'
  2562  1842  3400               	retlw	0
  2563                           
  2564                           	psect	stringtext15
  2565  0000                     __pstringtext15:	
  2566                           
  2567                           ; #config settings
  2568  0000                     
  2569                           	psect	cinit
  2570  0025                     start_initialization:	
  2571  0025                     __initialization:	
  2572                           
  2573                           ; Initialize objects allocated to BANK0
  2574  0025  3086               	movlw	low __pidataBANK0
  2575  0026  0084               	movwf	4
  2576  0027  3094               	movlw	(high __pidataBANK0)| (0+128)
  2577  0028  0085               	movwf	5
  2578  0029  306C               	movlw	low __pdataBANK0
  2579  002A  0086               	movwf	6
  2580  002B  3000               	movlw	high __pdataBANK0
  2581  002C  0087               	movwf	7
  2582  002D  3003               	movlw	3
  2583  002E  3194  24E9  3180   	fcall	init_ram
  2584                           
  2585                           ; Initialize objects allocated to BANK1
  2586  0031  302A               	movlw	low __pidataBANK1
  2587  0032  0084               	movwf	4
  2588  0033  3095               	movlw	(high __pidataBANK1)| (0+128)
  2589  0034  0085               	movwf	5
  2590  0035  30CF               	movlw	low __pdataBANK1
  2591  0036  0086               	movwf	6
  2592  0037  3000               	movlw	high __pdataBANK1
  2593  0038  0087               	movwf	7
  2594  0039  300A               	movlw	10
  2595  003A  3194  24E9  3180   	fcall	init_ram
  2596                           
  2597                           ; Initialize objects allocated to BANK2
  2598  003D  3002               	movlw	low __pidataBANK2
  2599  003E  0084               	movwf	4
  2600  003F  3097               	movlw	(high __pidataBANK2)| (0+128)
  2601  0040  0085               	movwf	5
  2602  0041  3050               	movlw	low __pdataBANK2
  2603  0042  0086               	movwf	6
  2604  0043  3001               	movlw	high __pdataBANK2
  2605  0044  0087               	movwf	7
  2606  0045  301B               	movlw	27
  2607  0046  3194  24E9  3180   	fcall	init_ram
  2608                           
  2609                           ; Clear objects allocated to COMMON
  2610  0049  01FC               	clrf	__pbssCOMMON& (0+127)
  2611                           
  2612                           ; Clear objects allocated to BANK0
  2613  004A  3053               	movlw	low __pbssBANK0
  2614  004B  0084               	movwf	4
  2615  004C  3000               	movlw	high __pbssBANK0
  2616  004D  0085               	movwf	5
  2617  004E  3019               	movlw	25
  2618  004F  3194  24E3  3180   	fcall	clear_ram0
  2619                           
  2620                           ; Clear objects allocated to BANK1
  2621  0052  30A0               	movlw	low __pbssBANK1
  2622  0053  0084               	movwf	4
  2623  0054  3000               	movlw	high __pbssBANK1
  2624  0055  0085               	movwf	5
  2625  0056  3024               	movlw	36
  2626  0057  3194  24E3  3180   	fcall	clear_ram0
  2627                           
  2628                           ; Clear objects allocated to BANK2
  2629  005A  3020               	movlw	low __pbssBANK2
  2630  005B  0084               	movwf	4
  2631  005C  3001               	movlw	high __pbssBANK2
  2632  005D  0085               	movwf	5
  2633  005E  3030               	movlw	48
  2634  005F  3194  24E3  3180   	fcall	clear_ram0
  2635                           
  2636                           ; Clear objects allocated to BANK3
  2637  0062  30A0               	movlw	low __pbssBANK3
  2638  0063  0084               	movwf	4
  2639  0064  3001               	movlw	high __pbssBANK3
  2640  0065  0085               	movwf	5
  2641  0066  3020               	movlw	32
  2642  0067  3194  24E3         	fcall	clear_ram0
  2643  0069                     end_of_initialization:	
  2644                           ;End of C runtime variable initialization code
  2645                           
  2646  0069                     __end_of__initialization:	
  2647  0069  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2648  006A  0020               	movlb	0
  2649  006B  3180  286D         	ljmp	_main	;jump to C main() function
  2650                           
  2651                           	psect	bssCOMMON
  2652  007C                     __pbssCOMMON:	
  2653  007C                     _eusartRxHead:	
  2654  007C                     	ds	1
  2655                           
  2656                           	psect	bssBANK0
  2657  0053                     __pbssBANK0:	
  2658  0053                     _packet_sample:	
  2659  0053                     	ds	4
  2660  0057                     _width:	
  2661  0057                     	ds	2
  2662  0059                     _last_touch_status:	
  2663  0059                     	ds	2
  2664  005B                     _packet_noise:	
  2665  005B                     	ds	2
  2666  005D                     _update_state_flag:	
  2667  005D                     	ds	1
  2668  005E                     _blink_count:	
  2669  005E                     	ds	1
  2670  005F                     _blink:	
  2671  005F                     	ds	1
  2672  0060                     _check_request:	
  2673  0060                     	ds	1
  2674  0061                     _config_status:	
  2675  0061                     	ds	1
  2676  0062                     _prcData:	
  2677  0062                     	ds	1
  2678  0063                     _rxData:	
  2679  0063                     	ds	1
  2680  0064                     _eusartRxLastError:	
  2681  0064                     	ds	1
  2682  0065                     _eusartRxCount:	
  2683  0065                     	ds	1
  2684  0066                     _eusartRxTail:	
  2685  0066                     	ds	1
  2686  0067                     _eusartTxTail:	
  2687  0067                     	ds	1
  2688  0068                     _eusartTxHead:	
  2689  0068                     	ds	1
  2690  0069                     _sensor_globalFlags:	
  2691  0069                     	ds	1
  2692  006A                     _lowpowerActivated:	
  2693  006A                     	ds	1
  2694  006B                     _mtouch_time_toScan:	
  2695  006B                     	ds	1
  2696                           
  2697                           	psect	dataBANK0
  2698  006C                     __pdataBANK0:	
  2699  006C                     _callback_notPressed:	
  2700  006C                     	ds	2
  2701  006E                     _sample_period:	
  2702  006E                     	ds	1
  2703                           
  2704                           	psect	bssBANK1
  2705  00A0                     __pbssBANK1:	
  2706  00A0                     _eusartRxStatusBuffer:	
  2707  00A0                     	ds	8
  2708  00A8                     _eusartRxBuffer:	
  2709  00A8                     	ds	8
  2710  00B0                     _eusartTxBuffer:	
  2711  00B0                     	ds	8
  2712  00B8                     _timeout_count:	
  2713  00B8                     	ds	4
  2714  00BC                     _nout:	
  2715  00BC                     	ds	2
  2716  00BE                     _prec:	
  2717  00BE                     	ds	2
  2718  00C0                     _flags:	
  2719  00C0                     	ds	2
  2720  00C2                     _count_conf:	
  2721  00C2                     	ds	2
  2722                           
  2723                           	psect	dataBANK1
  2724  00CF                     __pdataBANK1:	
  2725  00CF                     _Button_StateMachine:	
  2726  00CF                     	ds	6
  2727  00D5                     _callback_pressed:	
  2728  00D5                     	ds	2
  2729  00D7                     _callback_sampled:	
  2730  00D7                     	ds	2
  2731                           
  2732                           	psect	bssBANK2
  2733  0120                     __pbssBANK2:	
  2734  0120                     _mtouch_button:	
  2735  0120                     	ds	48
  2736                           
  2737                           	psect	dataBANK2
  2738  0150                     __pdataBANK2:	
  2739  0150                     _mtouch_sensor:	
  2740  0150                     	ds	27
  2741                           
  2742                           	psect	bssBANK3
  2743  01A0                     __pbssBANK3:	
  2744  01A0                     _dbuf:	
  2745  01A0                     	ds	32
  2746                           
  2747                           	psect	inittext
  2748  14E9                     init_ram:	
  2749  14E9  00FE               	movwf	126
  2750  14EA                     initloop:	
  2751  14EA  0012               	moviw fsr0++
  2752  14EB  001E               	movwi fsr1++
  2753  14EC  0BFE               	decfsz	126,f
  2754  14ED  2CEA               	goto	initloop
  2755  14EE  3400               	retlw	0
  2756                           
  2757                           	psect	clrtext
  2758  14E3                     clear_ram0:	
  2759                           ;	Called with FSR0 containing the base address, and
  2760                           ;	WREG with the size to clear
  2761                           
  2762  14E3  0064               	clrwdt	;clear the watchdog before getting into this loop
  2763  14E4                     clrloop0:	
  2764  14E4  0180               	clrf	0	;clear RAM location pointed to by FSR
  2765  14E5  3101               	addfsr 0,1
  2766  14E6  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2767  14E7  2CE4               	goto	clrloop0	;have we reached the end yet?
  2768  14E8  3400               	retlw	0	;all done for this memory range, return
  2769                           
  2770                           	psect	cstackBANK1
  2771  00D9                     __pcstackBANK1:	
  2772  00D9                     ??_main:	
  2773                           
  2774                           ; 1 bytes @ 0x0
  2775  00D9                     	ds	2
  2776                           
  2777                           	psect	cstackCOMMON
  2778  0070                     __pcstackCOMMON:	
  2779  0070                     ?_MTOUCH_Service_Mainloop:	
  2780  0070                     ?_MTOUCH_Button_isPressed:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0070                     ?_MTOUCH_Button_InitializeAll:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0070                     ?_MTOUCH_Sensor_SampleAll:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0070                     ?_MTOUCH_Button_ServiceAll:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0070                     ?_MTOUCH_needReburst:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0070                     ?_MTOUCH_Tick:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0070                     ?_MTOUCH_Button_Tick:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0070                     ?_MTOUCH_Sensor_Enable:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0070                     ?_MTOUCH_Sensor_Calibrate:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816  0070                     ?_Sensor_Sampled_Reset:	
  2817                           ; 1 bytes @ 0x0
  2818                           
  2819  0070                     ?_Sensor_Service:	
  2820                           ; 1 bytes @ 0x0
  2821                           
  2822  0070                     ?_Sensor_isEnabled:	
  2823                           ; 1 bytes @ 0x0
  2824                           
  2825  0070                     ?_Sensor_RawSample_Update:	
  2826                           ; 1 bytes @ 0x0
  2827                           
  2828  0070                     ?_Sensor_setSampled:	
  2829                           ; 1 bytes @ 0x0
  2830                           
  2831  0070                     ?_Sensor_postAcquisitionProcess:	
  2832                           ; 1 bytes @ 0x0
  2833                           
  2834  0070                     ?_Sensor_isActive:	
  2835                           ; 1 bytes @ 0x0
  2836                           
  2837  0070                     ?_Sensor_isCalibrated:	
  2838                           ; 1 bytes @ 0x0
  2839                           
  2840  0070                     ?_Sensor_setActive:	
  2841                           ; 1 bytes @ 0x0
  2842                           
  2843  0070                     ?_Sensor_setInactive:	
  2844                           ; 1 bytes @ 0x0
  2845                           
  2846  0070                     ?_Sensor_isCalibratingAcqTime:	
  2847                           ; 1 bytes @ 0x0
  2848                           
  2849  0070                     ?_TMR2_LoadPeriodRegister:	
  2850                           ; 1 bytes @ 0x0
  2851                           
  2852  0070                     ?_TMR2_StartTimer:	
  2853                           ; 1 bytes @ 0x0
  2854                           
  2855  0070                     ?_TMR2_StopTimer:	
  2856                           ; 1 bytes @ 0x0
  2857                           
  2858  0070                     ?_Sensor_autoCalibration:	
  2859                           ; 1 bytes @ 0x0
  2860                           
  2861  0070                     ?_Sensor_setCalibratAcqTime:	
  2862                           ; 1 bytes @ 0x0
  2863                           
  2864  0070                     ?_Sensor_setCalibrated:	
  2865                           ; 1 bytes @ 0x0
  2866                           
  2867  0070                     ?_Button_Service:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0070                     ?_Button_Reading_Update:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_Button_Deviation_Update:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_Button_Baseline_Initialize:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_Button_Baseline_Update:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_Button_Tick_helper:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_Button_Reading_Update_Helper:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_EUSART_Receive_ISR:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_EUSART_Transmit_ISR:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ??_EUSART_Transmit_ISR:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_EUSART_DefaultErrorHandler:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_EUSART_RxDataHandler:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ??_EUSART_RxDataHandler:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_PIN_MANAGER_Initialize:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_OSCILLATOR_Initialize:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_WDT_Initialize:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_LED_PROCESS:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_RELAY_PROCESS:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_update_state:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_check_data:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     ?_check_message:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942  0070                     ?_DATA_PROCESS:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_MTOUCH_Initialize:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_MTOUCH_Sensor_Initialize:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_Sensor_getScanGroupIndex:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_MTOUCH_Button_Initialize:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_EUSART_Initialize:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_EUSART_is_rx_ready:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_EUSART_Read:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ?_EUSART_Write:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ?_putch:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     ?_TMR2_Initialize:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0070                     ?_INTERRUPT_InterruptManager:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0070                     ?_SYSTEM_Initialize:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0070                     ?_main:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990  0070                     ?_LED_2_SetHigh:	
  2991                           ; 1 bytes @ 0x0
  2992                           
  2993  0070                     ?_LED_2_SetLow:	
  2994                           ; 1 bytes @ 0x0
  2995                           
  2996  0070                     ?_LED_1_SetHigh:	
  2997                           ; 1 bytes @ 0x0
  2998                           
  2999  0070                     ?_LED_1_SetLow:	
  3000                           ; 1 bytes @ 0x0
  3001                           
  3002  0070                     ?_LED_0_SetHigh:	
  3003                           ; 1 bytes @ 0x0
  3004                           
  3005  0070                     ?_LED_0_SetLow:	
  3006                           ; 1 bytes @ 0x0
  3007                           
  3008                           
  3009                           ; 1 bytes @ 0x0
  3010  0070                     	ds	1
  3011  0071                     ??_MTOUCH_Button_isPressed:	
  3012  0071                     ??_MTOUCH_Sensor_Scan_Initialize:	
  3013                           ; 1 bytes @ 0x1
  3014                           
  3015  0071                     ??_MTOUCH_needReburst:	
  3016                           ; 1 bytes @ 0x1
  3017                           
  3018  0071                     ?_Sensor_DefaultCallback:	
  3019                           ; 1 bytes @ 0x1
  3020                           
  3021  0071                     ??_Sensor_Sampled_Reset:	
  3022                           ; 1 bytes @ 0x1
  3023                           
  3024  0071                     ??_Sensor_isEnabled:	
  3025                           ; 1 bytes @ 0x1
  3026                           
  3027  0071                     ??_Sensor_setSampled:	
  3028                           ; 1 bytes @ 0x1
  3029                           
  3030  0071                     ??_Sensor_isActive:	
  3031                           ; 1 bytes @ 0x1
  3032                           
  3033  0071                     ??_Sensor_isCalibrated:	
  3034                           ; 1 bytes @ 0x1
  3035                           
  3036  0071                     ??_Sensor_setActive:	
  3037                           ; 1 bytes @ 0x1
  3038                           
  3039  0071                     ??_Sensor_setInactive:	
  3040                           ; 1 bytes @ 0x1
  3041                           
  3042  0071                     ??_Sensor_isCalibratingAcqTime:	
  3043                           ; 1 bytes @ 0x1
  3044                           
  3045  0071                     ??_TMR2_LoadPeriodRegister:	
  3046                           ; 1 bytes @ 0x1
  3047                           
  3048  0071                     ??_TMR2_StartTimer:	
  3049                           ; 1 bytes @ 0x1
  3050                           
  3051  0071                     ??_TMR2_StopTimer:	
  3052                           ; 1 bytes @ 0x1
  3053                           
  3054  0071                     ??_Sensor_setCalibratAcqTime:	
  3055                           ; 1 bytes @ 0x1
  3056                           
  3057  0071                     ??_Sensor_setCalibrated:	
  3058                           ; 1 bytes @ 0x1
  3059                           
  3060  0071                     ?_memcpy:	
  3061                           ; 1 bytes @ 0x1
  3062                           
  3063  0071                     ??_Button_Deviation_Update:	
  3064                           ; 1 bytes @ 0x1
  3065                           
  3066  0071                     ??_Button_Baseline_Update:	
  3067                           ; 1 bytes @ 0x1
  3068                           
  3069  0071                     ??_Button_Tick_helper:	
  3070                           ; 1 bytes @ 0x1
  3071                           
  3072  0071                     ?_EUSART_SetRxInterruptHandler:	
  3073                           ; 1 bytes @ 0x1
  3074                           
  3075  0071                     ??_EUSART_Receive_ISR:	
  3076                           ; 1 bytes @ 0x1
  3077                           
  3078  0071                     ?_EUSART_SetTxInterruptHandler:	
  3079                           ; 1 bytes @ 0x1
  3080                           
  3081  0071                     ?_EUSART_SetFramingErrorHandler:	
  3082                           ; 1 bytes @ 0x1
  3083                           
  3084  0071                     ?_EUSART_SetOverrunErrorHandler:	
  3085                           ; 1 bytes @ 0x1
  3086                           
  3087  0071                     ?_EUSART_SetErrorHandler:	
  3088                           ; 1 bytes @ 0x1
  3089                           
  3090  0071                     ??_EUSART_DefaultErrorHandler:	
  3091                           ; 1 bytes @ 0x1
  3092                           
  3093  0071                     ??_PIN_MANAGER_Initialize:	
  3094                           ; 1 bytes @ 0x1
  3095                           
  3096  0071                     ??_OSCILLATOR_Initialize:	
  3097                           ; 1 bytes @ 0x1
  3098                           
  3099  0071                     ??_WDT_Initialize:	
  3100                           ; 1 bytes @ 0x1
  3101                           
  3102  0071                     ??_LED_PROCESS:	
  3103                           ; 1 bytes @ 0x1
  3104                           
  3105  0071                     ??_RELAY_PROCESS:	
  3106                           ; 1 bytes @ 0x1
  3107                           
  3108  0071                     ??_check_data:	
  3109                           ; 1 bytes @ 0x1
  3110                           
  3111  0071                     ??_Sensor_getScanGroupIndex:	
  3112                           ; 1 bytes @ 0x1
  3113                           
  3114  0071                     ?_MTOUCH_Button_SetPressedCallback:	
  3115                           ; 1 bytes @ 0x1
  3116                           
  3117  0071                     ?_MTOUCH_Button_SetNotPressedCallback:	
  3118                           ; 1 bytes @ 0x1
  3119                           
  3120  0071                     ??_EUSART_is_rx_ready:	
  3121                           ; 1 bytes @ 0x1
  3122                           
  3123  0071                     ??_EUSART_Read:	
  3124                           ; 1 bytes @ 0x1
  3125                           
  3126  0071                     ??_EUSART_Write:	
  3127                           ; 1 bytes @ 0x1
  3128                           
  3129  0071                     ??_TMR2_Initialize:	
  3130                           ; 1 bytes @ 0x1
  3131                           
  3132  0071                     ??_INTERRUPT_InterruptManager:	
  3133                           ; 1 bytes @ 0x1
  3134                           
  3135  0071                     ??_LED_2_SetHigh:	
  3136                           ; 1 bytes @ 0x1
  3137                           
  3138  0071                     ??_LED_2_SetLow:	
  3139                           ; 1 bytes @ 0x1
  3140                           
  3141  0071                     ??_LED_1_SetHigh:	
  3142                           ; 1 bytes @ 0x1
  3143                           
  3144  0071                     ??_LED_1_SetLow:	
  3145                           ; 1 bytes @ 0x1
  3146                           
  3147  0071                     ??_LED_0_SetHigh:	
  3148                           ; 1 bytes @ 0x1
  3149                           
  3150  0071                     ??_LED_0_SetLow:	
  3151                           ; 1 bytes @ 0x1
  3152                           
  3153  0071                     ?___bmul:	
  3154                           ; 1 bytes @ 0x1
  3155                           
  3156  0071                     ?_abs:	
  3157                           ; 1 bytes @ 0x1
  3158                           
  3159  0071                     ?_strlen:	
  3160                           ; 2 bytes @ 0x1
  3161                           
  3162  0071                     Sensor_DefaultCallback@sensor:	
  3163                           ; 2 bytes @ 0x1
  3164                           
  3165  0071                     Sensor_setActive@sensor:	
  3166                           ; 1 bytes @ 0x1
  3167                           
  3168  0071                     Sensor_setInactive@sensor:	
  3169                           ; 1 bytes @ 0x1
  3170                           
  3171  0071                     Sensor_isActive@sensor:	
  3172                           ; 1 bytes @ 0x1
  3173                           
  3174  0071                     Sensor_isCalibrated@sensor:	
  3175                           ; 1 bytes @ 0x1
  3176                           
  3177  0071                     Sensor_setCalibrated@sensor:	
  3178                           ; 1 bytes @ 0x1
  3179                           
  3180  0071                     Sensor_setCalibratAcqTime@sensor:	
  3181                           ; 1 bytes @ 0x1
  3182                           
  3183  0071                     Sensor_isCalibratingAcqTime@sensor:	
  3184                           ; 1 bytes @ 0x1
  3185                           
  3186  0071                     Sensor_Sampled_Reset@sensor:	
  3187                           ; 1 bytes @ 0x1
  3188                           
  3189  0071                     Sensor_setSampled@sensor:	
  3190                           ; 1 bytes @ 0x1
  3191                           
  3192  0071                     TMR2_LoadPeriodRegister@periodVal:	
  3193                           ; 1 bytes @ 0x1
  3194                           
  3195  0071                     ___bmul@multiplicand:	
  3196                           ; 1 bytes @ 0x1
  3197                           
  3198  0071                     MTOUCH_Button_SetPressedCallback@callback:	
  3199                           ; 1 bytes @ 0x1
  3200                           
  3201  0071                     MTOUCH_Button_SetNotPressedCallback@callback:	
  3202                           ; 2 bytes @ 0x1
  3203                           
  3204  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3205                           ; 2 bytes @ 0x1
  3206                           
  3207  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3208                           ; 2 bytes @ 0x1
  3209                           
  3210  0071                     EUSART_SetErrorHandler@interruptHandler:	
  3211                           ; 2 bytes @ 0x1
  3212                           
  3213  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3214                           ; 2 bytes @ 0x1
  3215                           
  3216  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3217                           ; 2 bytes @ 0x1
  3218                           
  3219  0071                     abs@a:	
  3220                           ; 2 bytes @ 0x1
  3221                           
  3222  0071                     memcpy@s1:	
  3223                           ; 2 bytes @ 0x1
  3224                           
  3225                           
  3226                           ; 2 bytes @ 0x1
  3227  0071                     	ds	1
  3228  0072                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  3229  0072                     ??_Sensor_DefaultCallback:	
  3230                           ; 1 bytes @ 0x2
  3231                           
  3232  0072                     ?_Sensor_loadADCSettings:	
  3233                           ; 1 bytes @ 0x2
  3234                           
  3235  0072                     ??___bmul:	
  3236                           ; 1 bytes @ 0x2
  3237                           
  3238  0072                     Sensor_loadADCSettings@adc_index:	
  3239                           ; 1 bytes @ 0x2
  3240                           
  3241  0072                     Sensor_isEnabled@sensor:	
  3242                           ; 1 bytes @ 0x2
  3243                           
  3244  0072                     MTOUCH_Button_isPressed@name:	
  3245                           ; 1 bytes @ 0x2
  3246                           
  3247  0072                     EUSART_Read@readValue:	
  3248                           ; 1 bytes @ 0x2
  3249                           
  3250  0072                     EUSART_Write@txData:	
  3251                           ; 1 bytes @ 0x2
  3252                           
  3253                           
  3254                           ; 1 bytes @ 0x2
  3255  0072                     	ds	1
  3256  0073                     ??_abs:	
  3257  0073                     ??_EUSART_SetRxInterruptHandler:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260  0073                     ??_EUSART_SetTxInterruptHandler:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263  0073                     ??_EUSART_SetFramingErrorHandler:	
  3264                           ; 1 bytes @ 0x3
  3265                           
  3266  0073                     ??_EUSART_SetOverrunErrorHandler:	
  3267                           ; 1 bytes @ 0x3
  3268                           
  3269  0073                     ??_EUSART_SetErrorHandler:	
  3270                           ; 1 bytes @ 0x3
  3271                           
  3272  0073                     ??_strlen:	
  3273                           ; 1 bytes @ 0x3
  3274                           
  3275  0073                     ??_Sensor_loadADCSettings:	
  3276                           ; 1 bytes @ 0x3
  3277                           
  3278  0073                     ??_MTOUCH_Button_SetPressedCallback:	
  3279                           ; 1 bytes @ 0x3
  3280                           
  3281  0073                     ??_MTOUCH_Button_SetNotPressedCallback:	
  3282                           ; 1 bytes @ 0x3
  3283                           
  3284  0073                     ??_EUSART_Initialize:	
  3285                           ; 1 bytes @ 0x3
  3286                           
  3287  0073                     ??_putch:	
  3288                           ; 1 bytes @ 0x3
  3289                           
  3290  0073                     Sensor_getScanGroupIndex@sensor:	
  3291                           ; 1 bytes @ 0x3
  3292                           
  3293  0073                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  3294                           ; 1 bytes @ 0x3
  3295                           
  3296  0073                     Button_Tick_helper@button:	
  3297                           ; 1 bytes @ 0x3
  3298                           
  3299  0073                     putch@txData:	
  3300                           ; 1 bytes @ 0x3
  3301                           
  3302  0073                     check_data@x:	
  3303                           ; 1 bytes @ 0x3
  3304                           
  3305  0073                     LED_PROCESS@x:	
  3306                           ; 1 bytes @ 0x3
  3307                           
  3308  0073                     RELAY_PROCESS@x:	
  3309                           ; 1 bytes @ 0x3
  3310                           
  3311  0073                     ___bmul@product:	
  3312                           ; 1 bytes @ 0x3
  3313                           
  3314  0073                     memcpy@n:	
  3315                           ; 1 bytes @ 0x3
  3316                           
  3317                           
  3318                           ; 2 bytes @ 0x3
  3319  0073                     	ds	1
  3320  0074                     ??_MTOUCH_Button_Tick:	
  3321  0074                     ?_Button_DefaultCallback:	
  3322                           ; 1 bytes @ 0x4
  3323                           
  3324  0074                     ?_myButtonPressedCallback:	
  3325                           ; 1 bytes @ 0x4
  3326                           
  3327  0074                     ?_myButtonReleasedCallback:	
  3328                           ; 1 bytes @ 0x4
  3329                           
  3330  0074                     ??_DATA_PROCESS:	
  3331                           ; 1 bytes @ 0x4
  3332                           
  3333  0074                     ?_fputc:	
  3334                           ; 1 bytes @ 0x4
  3335                           
  3336  0074                     Sensor_getScanGroupIndex@sensorGroup:	
  3337                           ; 2 bytes @ 0x4
  3338                           
  3339  0074                     Button_DefaultCallback@button:	
  3340                           ; 1 bytes @ 0x4
  3341                           
  3342  0074                     myButtonPressedCallback@button:	
  3343                           ; 1 bytes @ 0x4
  3344                           
  3345  0074                     myButtonReleasedCallback@button:	
  3346                           ; 1 bytes @ 0x4
  3347                           
  3348  0074                     ___bmul@multiplier:	
  3349                           ; 1 bytes @ 0x4
  3350                           
  3351  0074                     strlen@a:	
  3352                           ; 1 bytes @ 0x4
  3353                           
  3354  0074                     fputc@c:	
  3355                           ; 1 bytes @ 0x4
  3356                           
  3357                           
  3358                           ; 2 bytes @ 0x4
  3359  0074                     	ds	1
  3360  0075                     ??_MTOUCH_Sensor_Enable:	
  3361  0075                     ??_MTOUCH_Sensor_Calibrate:	
  3362                           ; 1 bytes @ 0x5
  3363                           
  3364  0075                     ??_Sensor_RawSample_Update:	
  3365                           ; 1 bytes @ 0x5
  3366                           
  3367  0075                     ??_Sensor_postAcquisitionProcess:	
  3368                           ; 1 bytes @ 0x5
  3369                           
  3370  0075                     ??_Sensor_autoCalibration:	
  3371                           ; 1 bytes @ 0x5
  3372                           
  3373  0075                     ??_Button_DefaultCallback:	
  3374                           ; 1 bytes @ 0x5
  3375                           
  3376  0075                     ??_memcpy:	
  3377                           ; 1 bytes @ 0x5
  3378                           
  3379  0075                     ??_myButtonPressedCallback:	
  3380                           ; 1 bytes @ 0x5
  3381                           
  3382  0075                     ??_myButtonReleasedCallback:	
  3383                           ; 1 bytes @ 0x5
  3384                           
  3385  0075                     ??_MTOUCH_Sensor_isCalibrated:	
  3386                           ; 1 bytes @ 0x5
  3387                           
  3388  0075                     ??_MTOUCH_Sensor_wasSampled:	
  3389                           ; 1 bytes @ 0x5
  3390                           
  3391  0075                     ?_MTOUCH_Sensor_RawSample_Get:	
  3392                           ; 1 bytes @ 0x5
  3393                           
  3394  0075                     MTOUCH_Button_Tick@i:	
  3395                           ; 2 bytes @ 0x5
  3396                           
  3397  0075                     strlen@s:	
  3398                           ; 1 bytes @ 0x5
  3399                           
  3400                           
  3401                           ; 1 bytes @ 0x5
  3402  0075                     	ds	1
  3403  0076                     ??_MTOUCH_Tick:	
  3404  0076                     Sensor_RawSample_Update@adcIndex:	
  3405                           ; 1 bytes @ 0x6
  3406                           
  3407  0076                     MTOUCH_Sensor_Enable@sensor:	
  3408                           ; 1 bytes @ 0x6
  3409                           
  3410  0076                     MTOUCH_Sensor_Calibrate@sensor:	
  3411                           ; 1 bytes @ 0x6
  3412                           
  3413  0076                     MTOUCH_Sensor_isCalibrated@sensor:	
  3414                           ; 1 bytes @ 0x6
  3415                           
  3416  0076                     MTOUCH_Sensor_wasSampled@sensor:	
  3417                           ; 1 bytes @ 0x6
  3418                           
  3419  0076                     DATA_PROCESS@x:	
  3420                           ; 1 bytes @ 0x6
  3421                           
  3422  0076                     memcpy@tmp:	
  3423                           ; 1 bytes @ 0x6
  3424                           
  3425  0076                     fputc@fp:	
  3426                           ; 1 bytes @ 0x6
  3427                           
  3428  0076                     Sensor_postAcquisitionProcess@deviation:	
  3429                           ; 1 bytes @ 0x6
  3430                           
  3431  0076                     _Sensor_loadADCSettings$562:	
  3432                           ; 2 bytes @ 0x6
  3433                           
  3434                           
  3435                           ; 2 bytes @ 0x6
  3436  0076                     	ds	1
  3437  0077                     ??_fputc:	
  3438  0077                     ??_MTOUCH_Sensor_Initialize:	
  3439                           ; 1 bytes @ 0x7
  3440                           
  3441  0077                     ??_MTOUCH_Sensor_RawSample_Get:	
  3442                           ; 1 bytes @ 0x7
  3443                           
  3444  0077                     ??_MTOUCH_Button_Initialize:	
  3445                           ; 1 bytes @ 0x7
  3446                           
  3447  0077                     Sensor_RawSample_Update@sensor:	
  3448                           ; 1 bytes @ 0x7
  3449                           
  3450  0077                     Button_Baseline_Update@button:	
  3451                           ; 1 bytes @ 0x7
  3452                           
  3453  0077                     memcpy@s:	
  3454                           ; 1 bytes @ 0x7
  3455                           
  3456                           
  3457                           ; 2 bytes @ 0x7
  3458  0077                     	ds	1
  3459  0078                     MTOUCH_Sensor_Initialize@sensor:	
  3460  0078                     Sensor_postAcquisitionProcess@adcIndex:	
  3461                           ; 1 bytes @ 0x8
  3462                           
  3463  0078                     Sensor_loadADCSettings@addressOffset:	
  3464                           ; 1 bytes @ 0x8
  3465                           
  3466  0078                     MTOUCH_Sensor_RawSample_Get@name:	
  3467                           ; 1 bytes @ 0x8
  3468                           
  3469                           
  3470                           ; 1 bytes @ 0x8
  3471  0078                     	ds	1
  3472  0079                     ??_MTOUCH_Sensor_InitializeAll:	
  3473  0079                     ??_Button_Reading_Update_Helper:	
  3474                           ; 1 bytes @ 0x9
  3475                           
  3476  0079                     Sensor_postAcquisitionProcess@sensor:	
  3477                           ; 1 bytes @ 0x9
  3478                           
  3479  0079                     Sensor_loadADCSettings@sensor:	
  3480                           ; 1 bytes @ 0x9
  3481                           
  3482  0079                     Sensor_autoCalibration@adcIndex:	
  3483                           ; 1 bytes @ 0x9
  3484                           
  3485  0079                     MTOUCH_Button_Initialize@name:	
  3486                           ; 1 bytes @ 0x9
  3487                           
  3488  0079                     Button_Baseline_Initialize@button:	
  3489                           ; 1 bytes @ 0x9
  3490                           
  3491  0079                     memcpy@d1:	
  3492                           ; 1 bytes @ 0x9
  3493                           
  3494                           
  3495                           ; 1 bytes @ 0x9
  3496  0079                     	ds	1
  3497  007A                     MTOUCH_Sensor_InitializeAll@sensor:	
  3498  007A                     Sensor_autoCalibration@sensor:	
  3499                           ; 1 bytes @ 0xA
  3500                           
  3501  007A                     MTOUCH_Button_Initialize@button:	
  3502                           ; 1 bytes @ 0xA
  3503                           
  3504  007A                     memcpy@d:	
  3505                           ; 1 bytes @ 0xA
  3506                           
  3507                           
  3508                           ; 1 bytes @ 0xA
  3509  007A                     	ds	1
  3510  007B                     ??_MTOUCH_Button_InitializeAll:	
  3511  007B                     ?_Sensor_Acq_ExecutePacket:	
  3512                           ; 1 bytes @ 0xB
  3513                           
  3514  007B                     Sensor_Acq_ExecutePacket@sensor_adc2:	
  3515                           ; 1 bytes @ 0xB
  3516                           
  3517  007B                     Button_Reading_Update_Helper@button:	
  3518                           ; 1 bytes @ 0xB
  3519                           
  3520                           
  3521                           ; 1 bytes @ 0xB
  3522  007B                     	ds	1
  3523  007C                     ??_Button_Reading_Update:	
  3524  007C                     ??_update_state:	
  3525                           ; 1 bytes @ 0xC
  3526                           
  3527  007C                     ??_MTOUCH_Initialize:	
  3528                           ; 1 bytes @ 0xC
  3529                           
  3530  007C                     ??_SYSTEM_Initialize:	
  3531                           ; 1 bytes @ 0xC
  3532                           
  3533                           
  3534                           	psect	cstackBANK0
  3535  0020                     __pcstackBANK0:	
  3536                           ; 1 bytes @ 0xC
  3537                           
  3538  0020                     ??_Sensor_Acq_ExecutePacket:	
  3539  0020                     ??_Button_Baseline_Initialize:	
  3540                           ; 1 bytes @ 0x0
  3541                           
  3542  0020                     ?_fputs:	
  3543                           ; 1 bytes @ 0x0
  3544                           
  3545  0020                     MTOUCH_Button_InitializeAll@button:	
  3546                           ; 2 bytes @ 0x0
  3547                           
  3548  0020                     Button_Deviation_Update@button:	
  3549                           ; 1 bytes @ 0x0
  3550                           
  3551  0020                     Button_Reading_Update@button:	
  3552                           ; 1 bytes @ 0x0
  3553                           
  3554  0020                     fputs@fp:	
  3555                           ; 1 bytes @ 0x0
  3556                           
  3557                           
  3558                           ; 1 bytes @ 0x0
  3559  0020                     	ds	1
  3560  0021                     ??_fputs:	
  3561  0021                     Sensor_Acq_ExecutePacket@ADCOMCON_temp:	
  3562                           ; 1 bytes @ 0x1
  3563                           
  3564  0021                     Button_Deviation_Update@deviation:	
  3565                           ; 1 bytes @ 0x1
  3566                           
  3567                           
  3568                           ; 4 bytes @ 0x1
  3569  0021                     	ds	1
  3570  0022                     Sensor_Acq_ExecutePacket@AD1CON2_temp:	
  3571                           
  3572                           ; 1 bytes @ 0x2
  3573  0022                     	ds	1
  3574  0023                     Sensor_Acq_ExecutePacket@AD2CON2_temp:	
  3575                           
  3576                           ; 1 bytes @ 0x3
  3577  0023                     	ds	1
  3578  0024                     ?_Button_State_Initializing:	
  3579  0024                     ?_Button_State_NotPressed:	
  3580                           ; 1 bytes @ 0x4
  3581                           
  3582  0024                     ?_Button_State_Pressed:	
  3583                           ; 1 bytes @ 0x4
  3584                           
  3585  0024                     Sensor_Acq_ExecutePacket@sensor1ForceEnabled:	
  3586                           ; 1 bytes @ 0x4
  3587                           
  3588  0024                     Button_State_Initializing@button:	
  3589                           ; 1 bytes @ 0x4
  3590                           
  3591  0024                     Button_State_NotPressed@button:	
  3592                           ; 1 bytes @ 0x4
  3593                           
  3594  0024                     Button_State_Pressed@button:	
  3595                           ; 1 bytes @ 0x4
  3596                           
  3597  0024                     fputs@c:	
  3598                           ; 1 bytes @ 0x4
  3599                           
  3600                           
  3601                           ; 1 bytes @ 0x4
  3602  0024                     	ds	1
  3603  0025                     ??_Button_State_Initializing:	
  3604  0025                     ??_Button_State_NotPressed:	
  3605                           ; 1 bytes @ 0x5
  3606                           
  3607  0025                     ??_Button_State_Pressed:	
  3608                           ; 1 bytes @ 0x5
  3609                           
  3610  0025                     Sensor_Acq_ExecutePacket@sensor2ForceEnabled:	
  3611                           ; 1 bytes @ 0x5
  3612                           
  3613  0025                     fputs@i:	
  3614                           ; 1 bytes @ 0x5
  3615                           
  3616                           
  3617                           ; 2 bytes @ 0x5
  3618  0025                     	ds	1
  3619  0026                     Sensor_Acq_ExecutePacket@ADxIF_flag:	
  3620                           
  3621                           ; 1 bytes @ 0x6
  3622  0026                     	ds	1
  3623  0027                     Sensor_Acq_ExecutePacket@activeSensor:	
  3624  0027                     fputs@s:	
  3625                           ; 1 bytes @ 0x7
  3626                           
  3627                           
  3628                           ; 1 bytes @ 0x7
  3629  0027                     	ds	1
  3630  0028                     ?_pad:	
  3631  0028                     pad@buf:	
  3632                           ; 2 bytes @ 0x8
  3633                           
  3634  0028                     Sensor_Acq_ExecutePacket@last_a:	
  3635                           ; 1 bytes @ 0x8
  3636                           
  3637                           
  3638                           ; 2 bytes @ 0x8
  3639  0028                     	ds	1
  3640  0029                     ??_Button_Service:	
  3641  0029                     pad@p:	
  3642                           ; 1 bytes @ 0x9
  3643                           
  3644                           
  3645                           ; 2 bytes @ 0x9
  3646  0029                     	ds	1
  3647  002A                     Sensor_Acq_ExecutePacket@last_b:	
  3648                           
  3649                           ; 2 bytes @ 0xA
  3650  002A                     	ds	1
  3651  002B                     ??_pad:	
  3652  002B                     Button_Service@name:	
  3653                           ; 1 bytes @ 0xB
  3654                           
  3655                           
  3656                           ; 1 bytes @ 0xB
  3657  002B                     	ds	1
  3658  002C                     Sensor_Acq_ExecutePacket@packet_counter:	
  3659  002C                     Button_Service@button:	
  3660                           ; 1 bytes @ 0xC
  3661                           
  3662  002C                     pad@i:	
  3663                           ; 1 bytes @ 0xC
  3664                           
  3665                           
  3666                           ; 2 bytes @ 0xC
  3667  002C                     	ds	1
  3668  002D                     ??_MTOUCH_Button_ServiceAll:	
  3669  002D                     Sensor_Acq_ExecutePacket@sensor_adc1:	
  3670                           ; 1 bytes @ 0xD
  3671                           
  3672                           
  3673                           ; 1 bytes @ 0xD
  3674  002D                     	ds	1
  3675  002E                     ?_Sensor_Scanfrequency_Evaluation:	
  3676  002E                     Sensor_Scanfrequency_Evaluation@sensor_adc2:	
  3677                           ; 1 bytes @ 0xE
  3678                           
  3679  002E                     MTOUCH_Button_ServiceAll@button:	
  3680                           ; 1 bytes @ 0xE
  3681                           
  3682  002E                     pad@w:	
  3683                           ; 1 bytes @ 0xE
  3684                           
  3685                           
  3686                           ; 2 bytes @ 0xE
  3687  002E                     	ds	1
  3688  002F                     ??_Sensor_Scanfrequency_Evaluation:	
  3689                           
  3690                           ; 1 bytes @ 0xF
  3691  002F                     	ds	1
  3692  0030                     pad@fp:	
  3693                           
  3694                           ; 1 bytes @ 0x10
  3695  0030                     	ds	1
  3696  0031                     ?_ctoa:	
  3697  0031                     Sensor_Scanfrequency_Evaluation@sensor_adc1:	
  3698                           ; 2 bytes @ 0x11
  3699                           
  3700  0031                     ctoa@c:	
  3701                           ; 1 bytes @ 0x11
  3702                           
  3703                           
  3704                           ; 1 bytes @ 0x11
  3705  0031                     	ds	1
  3706  0032                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  3707                           
  3708                           ; 2 bytes @ 0x12
  3709  0032                     	ds	1
  3710  0033                     ??_ctoa:	
  3711                           
  3712                           ; 1 bytes @ 0x13
  3713  0033                     	ds	1
  3714  0034                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  3715  0034                     ctoa@w:	
  3716                           ; 1 bytes @ 0x14
  3717                           
  3718                           
  3719                           ; 2 bytes @ 0x14
  3720  0034                     	ds	1
  3721  0035                     Sensor_Scanfrequency_Evaluation@retry:	
  3722                           
  3723                           ; 1 bytes @ 0x15
  3724  0035                     	ds	1
  3725  0036                     ctoa@fp:	
  3726  0036                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  3727                           ; 1 bytes @ 0x16
  3728                           
  3729                           
  3730                           ; 4 bytes @ 0x16
  3731  0036                     	ds	1
  3732  0037                     ?_vfpfcnvrt:	
  3733  0037                     vfpfcnvrt@fmt:	
  3734                           ; 2 bytes @ 0x17
  3735                           
  3736                           
  3737                           ; 1 bytes @ 0x17
  3738  0037                     	ds	1
  3739  0038                     vfpfcnvrt@ap:	
  3740                           
  3741                           ; 1 bytes @ 0x18
  3742  0038                     	ds	1
  3743  0039                     ??_vfpfcnvrt:	
  3744                           
  3745                           ; 1 bytes @ 0x19
  3746  0039                     	ds	1
  3747  003A                     Sensor_Scanfrequency_Evaluation@i:	
  3748                           
  3749                           ; 1 bytes @ 0x1A
  3750  003A                     	ds	1
  3751  003B                     ?_Sensor_Acquisition:	
  3752  003B                     Sensor_Acquisition@sensor_adc2:	
  3753                           ; 1 bytes @ 0x1B
  3754                           
  3755                           
  3756                           ; 1 bytes @ 0x1B
  3757  003B                     	ds	1
  3758  003C                     ??_Sensor_Acquisition:	
  3759                           
  3760                           ; 1 bytes @ 0x1C
  3761  003C                     	ds	1
  3762  003D                     Sensor_Acquisition@retry:	
  3763                           
  3764                           ; 1 bytes @ 0x1D
  3765  003D                     	ds	1
  3766  003E                     Sensor_Acquisition@sensor_adc1:	
  3767  003E                     vfpfcnvrt@c:	
  3768                           ; 1 bytes @ 0x1E
  3769                           
  3770                           
  3771                           ; 1 bytes @ 0x1E
  3772  003E                     	ds	1
  3773  003F                     ??_Sensor_Service:	
  3774  003F                     vfpfcnvrt@fp:	
  3775                           ; 1 bytes @ 0x1F
  3776                           
  3777                           
  3778                           ; 1 bytes @ 0x1F
  3779  003F                     	ds	1
  3780  0040                     ?_vfprintf:	
  3781  0040                     vfprintf@fmt:	
  3782                           ; 2 bytes @ 0x20
  3783                           
  3784                           
  3785                           ; 2 bytes @ 0x20
  3786  0040                     	ds	2
  3787  0042                     Sensor_Service@scanGroup:	
  3788  0042                     vfprintf@ap:	
  3789                           ; 1 bytes @ 0x22
  3790                           
  3791                           
  3792                           ; 1 bytes @ 0x22
  3793  0042                     	ds	1
  3794  0043                     ??_vfprintf:	
  3795  0043                     Sensor_Service@error:	
  3796                           ; 1 bytes @ 0x23
  3797                           
  3798                           
  3799                           ; 1 bytes @ 0x23
  3800  0043                     	ds	1
  3801  0044                     Sensor_Service@sensor_adc1:	
  3802                           
  3803                           ; 1 bytes @ 0x24
  3804  0044                     	ds	1
  3805  0045                     Sensor_Service@sensor_adc2:	
  3806  0045                     vfprintf@fp:	
  3807                           ; 1 bytes @ 0x25
  3808                           
  3809                           
  3810                           ; 1 bytes @ 0x25
  3811  0045                     	ds	1
  3812  0046                     ??_MTOUCH_Sensor_SampleAll:	
  3813  0046                     vfprintf@cfmt:	
  3814                           ; 1 bytes @ 0x26
  3815                           
  3816                           
  3817                           ; 2 bytes @ 0x26
  3818  0046                     	ds	1
  3819  0047                     MTOUCH_Sensor_SampleAll@group:	
  3820                           
  3821                           ; 1 bytes @ 0x27
  3822  0047                     	ds	1
  3823  0048                     ??_MTOUCH_Service_Mainloop:	
  3824  0048                     ?_printf:	
  3825                           ; 1 bytes @ 0x28
  3826                           
  3827  0048                     printf@fmt:	
  3828                           ; 2 bytes @ 0x28
  3829                           
  3830                           
  3831                           ; 2 bytes @ 0x28
  3832  0048                     	ds	4
  3833  004C                     ??_printf:	
  3834                           
  3835                           ; 1 bytes @ 0x2C
  3836  004C                     	ds	3
  3837  004F                     printf@ap:	
  3838                           
  3839                           ; 1 bytes @ 0x2F
  3840  004F                     	ds	1
  3841  0050                     ??_check_message:	
  3842                           
  3843                           ; 1 bytes @ 0x30
  3844  0050                     	ds	2
  3845  0052                     check_message@x:	
  3846                           
  3847                           ; 1 bytes @ 0x32
  3848  0052                     	ds	1
  3849                           
  3850                           	psect	maintext
  3851  006D                     __pmaintext:	
  3852 ;;
  3853 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3854 ;;
  3855 ;; *************** function _main *****************
  3856 ;; Defined at:
  3857 ;;		line 17 in file "main.c"
  3858 ;; Parameters:    Size  Location     Type
  3859 ;;		None
  3860 ;; Auto vars:     Size  Location     Type
  3861 ;;		None
  3862 ;; Return value:  Size  Location     Type
  3863 ;;                  1    wreg      void 
  3864 ;; Registers used:
  3865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3866 ;; Tracked objects:
  3867 ;;		On entry : B1F/0
  3868 ;;		On exit  : 0/0
  3869 ;;		Unchanged: 0/0
  3870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3871 ;;      Params:         0       0       0       0       0       0       0       0
  3872 ;;      Locals:         0       0       0       0       0       0       0       0
  3873 ;;      Temps:          0       0       2       0       0       0       0       0
  3874 ;;      Totals:         0       0       2       0       0       0       0       0
  3875 ;;Total ram usage:        2 bytes
  3876 ;; Hardware stack levels required when called:   14
  3877 ;; This function calls:
  3878 ;;		_DATA_PROCESS
  3879 ;;		_EUSART_Read
  3880 ;;		_EUSART_is_rx_ready
  3881 ;;		_LED_PROCESS
  3882 ;;		_MTOUCH_Button_SetNotPressedCallback
  3883 ;;		_MTOUCH_Button_SetPressedCallback
  3884 ;;		_MTOUCH_Button_isPressed
  3885 ;;		_MTOUCH_Service_Mainloop
  3886 ;;		_RELAY_PROCESS
  3887 ;;		_SYSTEM_Initialize
  3888 ;;		_check_data
  3889 ;;		_check_message
  3890 ;;		_printf
  3891 ;;		_update_state
  3892 ;; This function is called by:
  3893 ;;		Startup code after reset
  3894 ;; This function uses a non-reentrant model
  3895 ;;
  3896                           
  3897                           
  3898                           ;psect for function _main
  3899  006D                     _main:	
  3900                           
  3901                           ;main.c: 20:     SYSTEM_Initialize();
  3902                           
  3903                           ;incstack = 0
  3904                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3905  006D  3196  260D  3180   	fcall	_SYSTEM_Initialize
  3906                           
  3907                           ;main.c: 21:     (INTCONbits.GIE = 1);
  3908  0070  178B               	bsf	11,7	;volatile
  3909                           
  3910                           ;main.c: 22:     (INTCONbits.PEIE = 1);
  3911  0071  170B               	bsf	11,6	;volatile
  3912                           
  3913                           ;main.c: 23:     MTOUCH_Button_SetPressedCallback(myButtonPressedCallback);
  3914  0072  30DA               	movlw	low _myButtonPressedCallback
  3915  0073  00F1               	movwf	MTOUCH_Button_SetPressedCallback@callback
  3916  0074  3017               	movlw	high _myButtonPressedCallback
  3917  0075  00F2               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  3918  0076  3194  24B9  3180   	fcall	_MTOUCH_Button_SetPressedCallback
  3919                           
  3920                           ;main.c: 24:     MTOUCH_Button_SetNotPressedCallback(myButtonReleasedCallback);
  3921  0079  3072               	movlw	low _myButtonReleasedCallback
  3922  007A  00F1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  3923  007B  3017               	movlw	high _myButtonReleasedCallback
  3924  007C  00F2               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  3925  007D  3194  24B3  3180   	fcall	_MTOUCH_Button_SetNotPressedCallback
  3926                           
  3927                           ;main.c: 25:     config_status = 0;
  3928  0080  0020               	movlb	0	; select bank0
  3929  0081  01E1               	clrf	_config_status
  3930                           
  3931                           ;main.c: 26:     last_touch_status.full_status = 0x00;
  3932  0082  01D9               	clrf	_last_touch_status
  3933  0083  01DA               	clrf	_last_touch_status+1
  3934                           
  3935                           ;main.c: 27:     LED_PROCESS(last_touch_status.full_status);
  3936  0084  0859               	movf	_last_touch_status,w
  3937  0085  318D  2575  3180   	fcall	_LED_PROCESS
  3938                           
  3939                           ;main.c: 28:     RELAY_PROCESS(last_touch_status.full_status);
  3940  0088  0020               	movlb	0	; select bank0
  3941  0089  0859               	movf	_last_touch_status,w
  3942  008A  318A  22B8  3180   	fcall	_RELAY_PROCESS
  3943                           
  3944                           ;main.c: 29:     timeout_count = 0;
  3945  008D  3000               	movlw	0
  3946  008E  0021               	movlb	1	; select bank1
  3947  008F  00BB               	movwf	(_timeout_count+3)^(0+128)
  3948  0090  3000               	movlw	0
  3949  0091  00BA               	movwf	(_timeout_count+2)^(0+128)
  3950  0092  3000               	movlw	0
  3951  0093  00B9               	movwf	(_timeout_count+1)^(0+128)
  3952  0094  3000               	movlw	0
  3953  0095  00B8               	movwf	_timeout_count^(0+128)
  3954  0096                     l6441:	
  3955                           
  3956                           ;main.c: 31:     {;main.c: 32:         if(update_state_flag == 1)
  3957  0096  0020               	movlb	0	; select bank0
  3958  0097  035D               	decf	_update_state_flag,w
  3959  0098  1D03               	btfss	3,2
  3960  0099  289E               	goto	l6447
  3961                           
  3962                           ;main.c: 33:         {;main.c: 34:             update_state_flag = 0;
  3963  009A  01DD               	clrf	_update_state_flag
  3964                           
  3965                           ;main.c: 35:             update_state();
  3966  009B  318B  23F7  3180   	fcall	_update_state
  3967  009E                     l6447:	
  3968                           
  3969                           ;main.c: 37:         if(EUSART_is_rx_ready())
  3970  009E  3194  247A  3180   	fcall	_EUSART_is_rx_ready
  3971  00A1  3A00               	xorlw	0
  3972  00A2  1903               	skipnz
  3973  00A3  29A2               	goto	l6517
  3974                           
  3975                           ;main.c: 38:         {;main.c: 39:             rxData = EUSART_Read();
  3976  00A4  3197  27B5  3180   	fcall	_EUSART_Read
  3977  00A7  0021               	movlb	1	; select bank1
  3978  00A8  00D9               	movwf	??_main^(0+128)
  3979  00A9  0859               	movf	??_main^(0+128),w
  3980  00AA  0020               	movlb	0	; select bank0
  3981  00AB  00E3               	movwf	_rxData
  3982                           
  3983                           ;main.c: 40:             if(check_data(rxData))
  3984  00AC  0863               	movf	_rxData,w
  3985  00AD  3189  21A2  3180   	fcall	_check_data
  3986  00B0  3A00               	xorlw	0
  3987  00B1  1903               	skipnz
  3988  00B2  29A2               	goto	l6517
  3989                           
  3990                           ;main.c: 41:             {;main.c: 42:                 if(check_request == 0)
  3991  00B3  0020               	movlb	0	; select bank0
  3992  00B4  0860               	movf	_check_request,w
  3993  00B5  1D03               	btfss	3,2
  3994  00B6  28C2               	goto	l6459
  3995                           
  3996                           ;main.c: 43:                 {;main.c: 44:                     prcData = rxData;
  3997  00B7  0863               	movf	_rxData,w
  3998  00B8  0021               	movlb	1	; select bank1
  3999  00B9  00D9               	movwf	??_main^(0+128)
  4000  00BA  0859               	movf	??_main^(0+128),w
  4001  00BB  0020               	movlb	0	; select bank0
  4002  00BC  00E2               	movwf	_prcData
  4003                           
  4004                           ;main.c: 45:                     check_message(rxData);
  4005  00BD  0863               	movf	_rxData,w
  4006  00BE  3188  206C  3180   	fcall	_check_message
  4007                           
  4008                           ;main.c: 46:                 }
  4009  00C1  29A2               	goto	l6517
  4010  00C2                     l6459:	
  4011                           
  4012                           ;main.c: 48:                 {;main.c: 49:                     if(config_status == 1)
  4013  00C2  0361               	decf	_config_status,w
  4014  00C3  1D03               	btfss	3,2
  4015  00C4  2995               	goto	l6509
  4016                           
  4017                           ;main.c: 50:                     {;main.c: 51:                         if(rxData == 'T')
  4018  00C5  3054               	movlw	84
  4019  00C6  0663               	xorwf	_rxData,w
  4020  00C7  1D03               	btfss	3,2
  4021  00C8  292C               	goto	l6485
  4022                           
  4023                           ;main.c: 52:                         {;main.c: 53:                             LED_PROCE
      +                          SS(7);
  4024  00C9  3007               	movlw	7
  4025  00CA  318D  2575  3180   	fcall	_LED_PROCESS
  4026                           
  4027                           ;main.c: 54:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4028  00CD  3015               	movlw	21
  4029  00CE  0021               	movlb	1	; select bank1
  4030  00CF  00DA               	movwf	(??_main^(0+128)+1)
  4031  00D0  304B               	movlw	75
  4032  00D1  00D9               	movwf	??_main^(0+128)
  4033  00D2  30BE               	movlw	190
  4034  00D3                     u5567:	
  4035  00D3  0B89               	decfsz	9,f
  4036  00D4  28D3               	goto	u5567
  4037  00D5  0BD9               	decfsz	??_main^(0+128),f
  4038  00D6  28D3               	goto	u5567
  4039  00D7  0BDA               	decfsz	(??_main^(0+128)+1),f
  4040  00D8  28D3               	goto	u5567
  4041  00D9  0000               	nop
  4042                           
  4043                           ;main.c: 55:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4044  00DA  3015               	movlw	21
  4045  00DB  0021               	movlb	1	; select bank1
  4046  00DC  00DA               	movwf	(??_main^(0+128)+1)
  4047  00DD  304B               	movlw	75
  4048  00DE  00D9               	movwf	??_main^(0+128)
  4049  00DF  30BE               	movlw	190
  4050  00E0                     u5577:	
  4051  00E0  0B89               	decfsz	9,f
  4052  00E1  28E0               	goto	u5577
  4053  00E2  0BD9               	decfsz	??_main^(0+128),f
  4054  00E3  28E0               	goto	u5577
  4055  00E4  0BDA               	decfsz	(??_main^(0+128)+1),f
  4056  00E5  28E0               	goto	u5577
  4057  00E6  0000               	nop
  4058                           
  4059                           ;main.c: 56:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4060  00E7  3015               	movlw	21
  4061  00E8  0021               	movlb	1	; select bank1
  4062  00E9  00DA               	movwf	(??_main^(0+128)+1)
  4063  00EA  304B               	movlw	75
  4064  00EB  00D9               	movwf	??_main^(0+128)
  4065  00EC  30BE               	movlw	190
  4066  00ED                     u5587:	
  4067  00ED  0B89               	decfsz	9,f
  4068  00EE  28ED               	goto	u5587
  4069  00EF  0BD9               	decfsz	??_main^(0+128),f
  4070  00F0  28ED               	goto	u5587
  4071  00F1  0BDA               	decfsz	(??_main^(0+128)+1),f
  4072  00F2  28ED               	goto	u5587
  4073  00F3  0000               	nop
  4074                           
  4075                           ;main.c: 57:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4076  00F4  3015               	movlw	21
  4077  00F5  0021               	movlb	1	; select bank1
  4078  00F6  00DA               	movwf	(??_main^(0+128)+1)
  4079  00F7  304B               	movlw	75
  4080  00F8  00D9               	movwf	??_main^(0+128)
  4081  00F9  30BE               	movlw	190
  4082  00FA                     u5597:	
  4083  00FA  0B89               	decfsz	9,f
  4084  00FB  28FA               	goto	u5597
  4085  00FC  0BD9               	decfsz	??_main^(0+128),f
  4086  00FD  28FA               	goto	u5597
  4087  00FE  0BDA               	decfsz	(??_main^(0+128)+1),f
  4088  00FF  28FA               	goto	u5597
  4089  0100  0000               	nop
  4090                           
  4091                           ;main.c: 58:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4092  0101  3015               	movlw	21
  4093  0102  0021               	movlb	1	; select bank1
  4094  0103  00DA               	movwf	(??_main^(0+128)+1)
  4095  0104  304B               	movlw	75
  4096  0105  00D9               	movwf	??_main^(0+128)
  4097  0106  30BE               	movlw	190
  4098  0107                     u5607:	
  4099  0107  0B89               	decfsz	9,f
  4100  0108  2907               	goto	u5607
  4101  0109  0BD9               	decfsz	??_main^(0+128),f
  4102  010A  2907               	goto	u5607
  4103  010B  0BDA               	decfsz	(??_main^(0+128)+1),f
  4104  010C  2907               	goto	u5607
  4105  010D  0000               	nop
  4106                           
  4107                           ;main.c: 59:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4108  010E  3015               	movlw	21
  4109  010F  0021               	movlb	1	; select bank1
  4110  0110  00DA               	movwf	(??_main^(0+128)+1)
  4111  0111  304B               	movlw	75
  4112  0112  00D9               	movwf	??_main^(0+128)
  4113  0113  30BE               	movlw	190
  4114  0114                     u5617:	
  4115  0114  0B89               	decfsz	9,f
  4116  0115  2914               	goto	u5617
  4117  0116  0BD9               	decfsz	??_main^(0+128),f
  4118  0117  2914               	goto	u5617
  4119  0118  0BDA               	decfsz	(??_main^(0+128)+1),f
  4120  0119  2914               	goto	u5617
  4121  011A  0000               	nop
  4122                           
  4123                           ;main.c: 60:                             config_status = 0;
  4124  011B  0020               	movlb	0	; select bank0
  4125  011C  01E1               	clrf	_config_status
  4126                           
  4127                           ;main.c: 61:                             check_request = 0;
  4128  011D  01E0               	clrf	_check_request
  4129                           
  4130                           ;main.c: 62:                             timeout_count = 0;
  4131  011E  3000               	movlw	0
  4132  011F  0021               	movlb	1	; select bank1
  4133  0120  00BB               	movwf	(_timeout_count+3)^(0+128)
  4134  0121  3000               	movlw	0
  4135  0122  00BA               	movwf	(_timeout_count+2)^(0+128)
  4136  0123  3000               	movlw	0
  4137  0124  00B9               	movwf	(_timeout_count+1)^(0+128)
  4138  0125  3000               	movlw	0
  4139  0126  00B8               	movwf	_timeout_count^(0+128)
  4140                           
  4141                           ;main.c: 63:                             LED_PROCESS(last_touch_status.full_status);
  4142  0127  0020               	movlb	0	; select bank0
  4143  0128  0859               	movf	_last_touch_status,w
  4144  0129  318D  2575  3180   	fcall	_LED_PROCESS
  4145  012C                     l6485:	
  4146                           
  4147                           ;main.c: 65:                         if(rxData == 'F')
  4148  012C  3046               	movlw	70
  4149  012D  0020               	movlb	0	; select bank0
  4150  012E  0663               	xorwf	_rxData,w
  4151  012F  1D03               	btfss	3,2
  4152  0130  29A2               	goto	l6517
  4153                           
  4154                           ;main.c: 66:                         {;main.c: 67:                             LED_PROCE
      +                          SS(0);
  4155  0131  3000               	movlw	0
  4156  0132  318D  2575  3180   	fcall	_LED_PROCESS
  4157                           
  4158                           ;main.c: 68:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4159  0135  3015               	movlw	21
  4160  0136  0021               	movlb	1	; select bank1
  4161  0137  00DA               	movwf	(??_main^(0+128)+1)
  4162  0138  304B               	movlw	75
  4163  0139  00D9               	movwf	??_main^(0+128)
  4164  013A  30BE               	movlw	190
  4165  013B                     u5627:	
  4166  013B  0B89               	decfsz	9,f
  4167  013C  293B               	goto	u5627
  4168  013D  0BD9               	decfsz	??_main^(0+128),f
  4169  013E  293B               	goto	u5627
  4170  013F  0BDA               	decfsz	(??_main^(0+128)+1),f
  4171  0140  293B               	goto	u5627
  4172  0141  0000               	nop
  4173                           
  4174                           ;main.c: 69:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4175  0142  3015               	movlw	21
  4176  0143  0021               	movlb	1	; select bank1
  4177  0144  00DA               	movwf	(??_main^(0+128)+1)
  4178  0145  304B               	movlw	75
  4179  0146  00D9               	movwf	??_main^(0+128)
  4180  0147  30BE               	movlw	190
  4181  0148                     u5637:	
  4182  0148  0B89               	decfsz	9,f
  4183  0149  2948               	goto	u5637
  4184  014A  0BD9               	decfsz	??_main^(0+128),f
  4185  014B  2948               	goto	u5637
  4186  014C  0BDA               	decfsz	(??_main^(0+128)+1),f
  4187  014D  2948               	goto	u5637
  4188  014E  0000               	nop
  4189                           
  4190                           ;main.c: 70:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4191  014F  3015               	movlw	21
  4192  0150  0021               	movlb	1	; select bank1
  4193  0151  00DA               	movwf	(??_main^(0+128)+1)
  4194  0152  304B               	movlw	75
  4195  0153  00D9               	movwf	??_main^(0+128)
  4196  0154  30BE               	movlw	190
  4197  0155                     u5647:	
  4198  0155  0B89               	decfsz	9,f
  4199  0156  2955               	goto	u5647
  4200  0157  0BD9               	decfsz	??_main^(0+128),f
  4201  0158  2955               	goto	u5647
  4202  0159  0BDA               	decfsz	(??_main^(0+128)+1),f
  4203  015A  2955               	goto	u5647
  4204  015B  0000               	nop
  4205                           
  4206                           ;main.c: 71:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4207  015C  3015               	movlw	21
  4208  015D  0021               	movlb	1	; select bank1
  4209  015E  00DA               	movwf	(??_main^(0+128)+1)
  4210  015F  304B               	movlw	75
  4211  0160  00D9               	movwf	??_main^(0+128)
  4212  0161  30BE               	movlw	190
  4213  0162                     u5657:	
  4214  0162  0B89               	decfsz	9,f
  4215  0163  2962               	goto	u5657
  4216  0164  0BD9               	decfsz	??_main^(0+128),f
  4217  0165  2962               	goto	u5657
  4218  0166  0BDA               	decfsz	(??_main^(0+128)+1),f
  4219  0167  2962               	goto	u5657
  4220  0168  0000               	nop
  4221                           
  4222                           ;main.c: 72:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4223  0169  3015               	movlw	21
  4224  016A  0021               	movlb	1	; select bank1
  4225  016B  00DA               	movwf	(??_main^(0+128)+1)
  4226  016C  304B               	movlw	75
  4227  016D  00D9               	movwf	??_main^(0+128)
  4228  016E  30BE               	movlw	190
  4229  016F                     u5667:	
  4230  016F  0B89               	decfsz	9,f
  4231  0170  296F               	goto	u5667
  4232  0171  0BD9               	decfsz	??_main^(0+128),f
  4233  0172  296F               	goto	u5667
  4234  0173  0BDA               	decfsz	(??_main^(0+128)+1),f
  4235  0174  296F               	goto	u5667
  4236  0175  0000               	nop
  4237                           
  4238                           ;main.c: 73:                             _delay((unsigned long)((500)*(32000000/4000.0))
      +                          );
  4239  0176  3015               	movlw	21
  4240  0177  0021               	movlb	1	; select bank1
  4241  0178  00DA               	movwf	(??_main^(0+128)+1)
  4242  0179  304B               	movlw	75
  4243  017A  00D9               	movwf	??_main^(0+128)
  4244  017B  30BE               	movlw	190
  4245  017C                     u5677:	
  4246  017C  0B89               	decfsz	9,f
  4247  017D  297C               	goto	u5677
  4248  017E  0BD9               	decfsz	??_main^(0+128),f
  4249  017F  297C               	goto	u5677
  4250  0180  0BDA               	decfsz	(??_main^(0+128)+1),f
  4251  0181  297C               	goto	u5677
  4252  0182  0000               	nop
  4253                           
  4254                           ;main.c: 74:                             config_status = 0;
  4255  0183  0020               	movlb	0	; select bank0
  4256  0184  01E1               	clrf	_config_status
  4257                           
  4258                           ;main.c: 75:                             check_request = 0;
  4259  0185  01E0               	clrf	_check_request
  4260                           
  4261                           ;main.c: 76:                             timeout_count = 0;
  4262  0186  3000               	movlw	0
  4263  0187  0021               	movlb	1	; select bank1
  4264  0188  00BB               	movwf	(_timeout_count+3)^(0+128)
  4265  0189  3000               	movlw	0
  4266  018A  00BA               	movwf	(_timeout_count+2)^(0+128)
  4267  018B  3000               	movlw	0
  4268  018C  00B9               	movwf	(_timeout_count+1)^(0+128)
  4269  018D  3000               	movlw	0
  4270  018E  00B8               	movwf	_timeout_count^(0+128)
  4271                           
  4272                           ;main.c: 77:                             LED_PROCESS(last_touch_status.full_status);
  4273  018F  0020               	movlb	0	; select bank0
  4274  0190  0859               	movf	_last_touch_status,w
  4275  0191  318D  2575  3180   	fcall	_LED_PROCESS
  4276  0194  29A2               	goto	l6517
  4277  0195                     l6509:	
  4278                           
  4279                           ;main.c: 81:                     {;main.c: 82:                         if(rxData == 'T')
  4280  0195  3054               	movlw	84
  4281  0196  0663               	xorwf	_rxData,w
  4282  0197  1D03               	btfss	3,2
  4283  0198  299D               	goto	l6513
  4284                           
  4285                           ;main.c: 83:                         {;main.c: 84:                             DATA_PROC
      +                          ESS(prcData);
  4286  0199  0862               	movf	_prcData,w
  4287  019A  3185  25F7  3180   	fcall	_DATA_PROCESS
  4288  019D                     l6513:	
  4289                           
  4290                           ;main.c: 86:                         if(rxData == 'F')
  4291  019D  3046               	movlw	70
  4292  019E  0020               	movlb	0	; select bank0
  4293  019F  0663               	xorwf	_rxData,w
  4294  01A0  1903               	btfsc	3,2
  4295                           
  4296                           ;main.c: 87:                         {;main.c: 88:                             check_req
      +                          uest = 0;
  4297  01A1  01E0               	clrf	_check_request
  4298  01A2                     l6517:	
  4299                           ;main.c: 92:             }
  4300                           
  4301                           
  4302                           ;main.c: 94:         if(MTOUCH_Service_Mainloop())
  4303  01A2  3197  271D  3180   	fcall	_MTOUCH_Service_Mainloop
  4304  01A5  3A00               	xorlw	0
  4305  01A6  1903               	skipnz
  4306  01A7  2896               	goto	l6441
  4307                           
  4308                           ;main.c: 95:         {;main.c: 96:             if(config_status == 0)
  4309  01A8  0020               	movlb	0	; select bank0
  4310  01A9  0861               	movf	_config_status,w
  4311  01AA  1D03               	btfss	3,2
  4312  01AB  2A7C               	goto	l6575
  4313                           
  4314                           ;main.c: 97:             {;main.c: 98:                 if(check_request == 1)
  4315  01AC  0360               	decf	_check_request,w
  4316  01AD  1D03               	btfss	3,2
  4317  01AE  29C9               	goto	l6531
  4318                           
  4319                           ;main.c: 99:                 {;main.c: 100:                     timeout_count++;
  4320  01AF  3001               	movlw	1
  4321  01B0  0021               	movlb	1	; select bank1
  4322  01B1  07B8               	addwf	_timeout_count^(0+128),f
  4323  01B2  3000               	movlw	0
  4324  01B3  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4325  01B4  3000               	movlw	0
  4326  01B5  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4327  01B6  3000               	movlw	0
  4328  01B7  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4329                           
  4330                           ;main.c: 101:                     if(timeout_count == 30)
  4331  01B8  301E               	movlw	30
  4332  01B9  0638               	xorwf	_timeout_count^(0+128),w
  4333  01BA  0439               	iorwf	(_timeout_count+1)^(0+128),w
  4334  01BB  043A               	iorwf	(_timeout_count+2)^(0+128),w
  4335  01BC  043B               	iorwf	(_timeout_count+3)^(0+128),w
  4336  01BD  1D03               	btfss	3,2
  4337  01BE  29C9               	goto	l6531
  4338                           
  4339                           ;main.c: 102:                     {;main.c: 103:                         timeout_count =
      +                           0;
  4340  01BF  3000               	movlw	0
  4341  01C0  00BB               	movwf	(_timeout_count+3)^(0+128)
  4342  01C1  3000               	movlw	0
  4343  01C2  00BA               	movwf	(_timeout_count+2)^(0+128)
  4344  01C3  3000               	movlw	0
  4345  01C4  00B9               	movwf	(_timeout_count+1)^(0+128)
  4346  01C5  3000               	movlw	0
  4347  01C6  00B8               	movwf	_timeout_count^(0+128)
  4348                           
  4349                           ;main.c: 104:                         check_request = 0;
  4350  01C7  0020               	movlb	0	; select bank0
  4351  01C8  01E0               	clrf	_check_request
  4352  01C9                     l6531:	
  4353                           
  4354                           ;main.c: 107:                 if(MTOUCH_Button_isPressed(0) == 1 && MTOUCH_Button_isPres
      +                          sed(1) == 1 && MTOUCH_Button_isPressed(2) == 0)
  4355  01C9  3000               	movlw	0
  4356  01CA  3196  26E7  3180   	fcall	_MTOUCH_Button_isPressed
  4357  01CD  3A01               	xorlw	1
  4358  01CE  1D03               	skipz
  4359  01CF  2A78               	goto	l6573
  4360  01D0  3001               	movlw	1
  4361  01D1  3196  26E7  3180   	fcall	_MTOUCH_Button_isPressed
  4362  01D4  3A01               	xorlw	1
  4363  01D5  1D03               	skipz
  4364  01D6  2A78               	goto	l6573
  4365  01D7  3002               	movlw	2
  4366  01D8  3196  26E7  3180   	fcall	_MTOUCH_Button_isPressed
  4367  01DB  3A00               	xorlw	0
  4368  01DC  1D03               	skipz
  4369  01DD  2A78               	goto	l6573
  4370                           
  4371                           ;main.c: 108:                 {;main.c: 109:                     count_conf++;
  4372  01DE  3001               	movlw	1
  4373  01DF  0021               	movlb	1	; select bank1
  4374  01E0  07C2               	addwf	_count_conf^(0+128),f
  4375  01E1  3000               	movlw	0
  4376  01E2  3DC3               	addwfc	(_count_conf+1)^(0+128),f
  4377                           
  4378                           ;main.c: 110:                     if(count_conf == 1800)
  4379  01E3  3008               	movlw	8
  4380  01E4  0642               	xorwf	_count_conf^(0+128),w
  4381  01E5  3007               	movlw	7
  4382  01E6  1903               	skipnz
  4383  01E7  0643               	xorwf	(_count_conf+1)^(0+128),w
  4384  01E8  1D03               	btfss	3,2
  4385  01E9  2896               	goto	l6441
  4386                           
  4387                           ;main.c: 111:                     {;main.c: 112:                         count_conf = 0;
  4388  01EA  01C2               	clrf	_count_conf^(0+128)
  4389  01EB  01C3               	clrf	(_count_conf+1)^(0+128)
  4390                           
  4391                           ;main.c: 113:                         printf("PICSMART");
  4392  01EC  3000               	movlw	low (STR_1| (0+32768))
  4393  01ED  0020               	movlb	0	; select bank0
  4394  01EE  00C8               	movwf	printf@fmt
  4395  01EF  3098               	movlw	high (STR_1| (0+32768))
  4396  01F0  00C9               	movwf	printf@fmt+1
  4397  01F1  3195  25D8  3180   	fcall	_printf
  4398                           
  4399                           ;main.c: 114:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4400  01F4  3015               	movlw	21
  4401  01F5  0021               	movlb	1	; select bank1
  4402  01F6  00DA               	movwf	(??_main^(0+128)+1)
  4403  01F7  304B               	movlw	75
  4404  01F8  00D9               	movwf	??_main^(0+128)
  4405  01F9  30BE               	movlw	190
  4406  01FA                     u5687:	
  4407  01FA  0B89               	decfsz	9,f
  4408  01FB  29FA               	goto	u5687
  4409  01FC  0BD9               	decfsz	??_main^(0+128),f
  4410  01FD  29FA               	goto	u5687
  4411  01FE  0BDA               	decfsz	(??_main^(0+128)+1),f
  4412  01FF  29FA               	goto	u5687
  4413  0200  0000               	nop
  4414                           
  4415                           ;main.c: 115:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4416  0201  3015               	movlw	21
  4417  0202  0021               	movlb	1	; select bank1
  4418  0203  00DA               	movwf	(??_main^(0+128)+1)
  4419  0204  304B               	movlw	75
  4420  0205  00D9               	movwf	??_main^(0+128)
  4421  0206  30BE               	movlw	190
  4422  0207                     u5697:	
  4423  0207  0B89               	decfsz	9,f
  4424  0208  2A07               	goto	u5697
  4425  0209  0BD9               	decfsz	??_main^(0+128),f
  4426  020A  2A07               	goto	u5697
  4427  020B  0BDA               	decfsz	(??_main^(0+128)+1),f
  4428  020C  2A07               	goto	u5697
  4429  020D  0000               	nop
  4430                           
  4431                           ;main.c: 116:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4432  020E  3015               	movlw	21
  4433  020F  0021               	movlb	1	; select bank1
  4434  0210  00DA               	movwf	(??_main^(0+128)+1)
  4435  0211  304B               	movlw	75
  4436  0212  00D9               	movwf	??_main^(0+128)
  4437  0213  30BE               	movlw	190
  4438  0214                     u5707:	
  4439  0214  0B89               	decfsz	9,f
  4440  0215  2A14               	goto	u5707
  4441  0216  0BD9               	decfsz	??_main^(0+128),f
  4442  0217  2A14               	goto	u5707
  4443  0218  0BDA               	decfsz	(??_main^(0+128)+1),f
  4444  0219  2A14               	goto	u5707
  4445  021A  0000               	nop
  4446                           
  4447                           ;main.c: 117:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4448  021B  3015               	movlw	21
  4449  021C  0021               	movlb	1	; select bank1
  4450  021D  00DA               	movwf	(??_main^(0+128)+1)
  4451  021E  304B               	movlw	75
  4452  021F  00D9               	movwf	??_main^(0+128)
  4453  0220  30BE               	movlw	190
  4454  0221                     u5717:	
  4455  0221  0B89               	decfsz	9,f
  4456  0222  2A21               	goto	u5717
  4457  0223  0BD9               	decfsz	??_main^(0+128),f
  4458  0224  2A21               	goto	u5717
  4459  0225  0BDA               	decfsz	(??_main^(0+128)+1),f
  4460  0226  2A21               	goto	u5717
  4461  0227  0000               	nop
  4462                           
  4463                           ;main.c: 118:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4464  0228  3015               	movlw	21
  4465  0229  0021               	movlb	1	; select bank1
  4466  022A  00DA               	movwf	(??_main^(0+128)+1)
  4467  022B  304B               	movlw	75
  4468  022C  00D9               	movwf	??_main^(0+128)
  4469  022D  30BE               	movlw	190
  4470  022E                     u5727:	
  4471  022E  0B89               	decfsz	9,f
  4472  022F  2A2E               	goto	u5727
  4473  0230  0BD9               	decfsz	??_main^(0+128),f
  4474  0231  2A2E               	goto	u5727
  4475  0232  0BDA               	decfsz	(??_main^(0+128)+1),f
  4476  0233  2A2E               	goto	u5727
  4477  0234  0000               	nop
  4478                           
  4479                           ;main.c: 119:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4480  0235  3015               	movlw	21
  4481  0236  0021               	movlb	1	; select bank1
  4482  0237  00DA               	movwf	(??_main^(0+128)+1)
  4483  0238  304B               	movlw	75
  4484  0239  00D9               	movwf	??_main^(0+128)
  4485  023A  30BE               	movlw	190
  4486  023B                     u5737:	
  4487  023B  0B89               	decfsz	9,f
  4488  023C  2A3B               	goto	u5737
  4489  023D  0BD9               	decfsz	??_main^(0+128),f
  4490  023E  2A3B               	goto	u5737
  4491  023F  0BDA               	decfsz	(??_main^(0+128)+1),f
  4492  0240  2A3B               	goto	u5737
  4493  0241  0000               	nop
  4494                           
  4495                           ;main.c: 120:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4496  0242  3015               	movlw	21
  4497  0243  0021               	movlb	1	; select bank1
  4498  0244  00DA               	movwf	(??_main^(0+128)+1)
  4499  0245  304B               	movlw	75
  4500  0246  00D9               	movwf	??_main^(0+128)
  4501  0247  30BE               	movlw	190
  4502  0248                     u5747:	
  4503  0248  0B89               	decfsz	9,f
  4504  0249  2A48               	goto	u5747
  4505  024A  0BD9               	decfsz	??_main^(0+128),f
  4506  024B  2A48               	goto	u5747
  4507  024C  0BDA               	decfsz	(??_main^(0+128)+1),f
  4508  024D  2A48               	goto	u5747
  4509  024E  0000               	nop
  4510                           
  4511                           ;main.c: 121:                         _delay((unsigned long)((500)*(32000000/4000.0)));
  4512  024F  3015               	movlw	21
  4513  0250  0021               	movlb	1	; select bank1
  4514  0251  00DA               	movwf	(??_main^(0+128)+1)
  4515  0252  304B               	movlw	75
  4516  0253  00D9               	movwf	??_main^(0+128)
  4517  0254  30BE               	movlw	190
  4518  0255                     u5757:	
  4519  0255  0B89               	decfsz	9,f
  4520  0256  2A55               	goto	u5757
  4521  0257  0BD9               	decfsz	??_main^(0+128),f
  4522  0258  2A55               	goto	u5757
  4523  0259  0BDA               	decfsz	(??_main^(0+128)+1),f
  4524  025A  2A55               	goto	u5757
  4525  025B  0000               	nop
  4526                           
  4527                           ;main.c: 122:                         printf("RUN\r\n");
  4528  025C  3009               	movlw	low (STR_2| (0+32768))
  4529  025D  0020               	movlb	0	; select bank0
  4530  025E  00C8               	movwf	printf@fmt
  4531  025F  3098               	movlw	high (STR_2| (0+32768))
  4532  0260  00C9               	movwf	printf@fmt+1
  4533  0261  3195  25D8  3180   	fcall	_printf
  4534                           
  4535                           ;main.c: 123:                         config_status = 1;
  4536  0264  0020               	movlb	0	; select bank0
  4537  0265  01E1               	clrf	_config_status
  4538  0266  0AE1               	incf	_config_status,f
  4539                           
  4540                           ;main.c: 124:                         check_request = 1;
  4541  0267  01E0               	clrf	_check_request
  4542  0268  0AE0               	incf	_check_request,f
  4543                           
  4544                           ;main.c: 125:                         timeout_count = 0;
  4545  0269  3000               	movlw	0
  4546  026A  0021               	movlb	1	; select bank1
  4547  026B  00BB               	movwf	(_timeout_count+3)^(0+128)
  4548  026C  3000               	movlw	0
  4549  026D  00BA               	movwf	(_timeout_count+2)^(0+128)
  4550  026E  3000               	movlw	0
  4551  026F  00B9               	movwf	(_timeout_count+1)^(0+128)
  4552  0270  3000               	movlw	0
  4553  0271  00B8               	movwf	_timeout_count^(0+128)
  4554                           
  4555                           ;main.c: 126:                         LED_PROCESS(0);
  4556  0272  3000               	movlw	0
  4557  0273  318D  2575  3180   	fcall	_LED_PROCESS
  4558                           
  4559                           ;main.c: 127:                         blink = 0;
  4560  0276  0020               	movlb	0	; select bank0
  4561  0277  2AD3               	goto	L1
  4562  0278                     l6573:	
  4563                           
  4564                           ;main.c: 131:                 {;main.c: 132:                     count_conf = 0;
  4565  0278  0021               	movlb	1	; select bank1
  4566  0279  01C2               	clrf	_count_conf^(0+128)
  4567  027A  01C3               	clrf	(_count_conf+1)^(0+128)
  4568                           
  4569                           ;main.c: 134:             }
  4570                           
  4571                           ;main.c: 133:                 }
  4572  027B  2896               	goto	l6441
  4573  027C                     l6575:	
  4574                           
  4575                           ;main.c: 136:             {;main.c: 137:                 if(check_request == 1)
  4576  027C  0360               	decf	_check_request,w
  4577  027D  1D03               	btfss	3,2
  4578  027E  2896               	goto	l6441
  4579                           
  4580                           ;main.c: 138:                 {;main.c: 139:                     timeout_count++;
  4581  027F  3001               	movlw	1
  4582  0280  0021               	movlb	1	; select bank1
  4583  0281  07B8               	addwf	_timeout_count^(0+128),f
  4584  0282  3000               	movlw	0
  4585  0283  3DB9               	addwfc	(_timeout_count+1)^(0+128),f
  4586  0284  3000               	movlw	0
  4587  0285  3DBA               	addwfc	(_timeout_count+2)^(0+128),f
  4588  0286  3000               	movlw	0
  4589  0287  3DBB               	addwfc	(_timeout_count+3)^(0+128),f
  4590                           
  4591                           ;main.c: 140:                     if(timeout_count >= 30000)
  4592  0288  083B               	movf	(_timeout_count+3)^(0+128),w
  4593  0289  1D03               	btfss	3,2
  4594  028A  2A94               	goto	l6581
  4595  028B  083A               	movf	(_timeout_count+2)^(0+128),w
  4596  028C  1D03               	btfss	3,2
  4597  028D  2A94               	goto	l6581
  4598  028E  3030               	movlw	48
  4599  028F  0238               	subwf	_timeout_count^(0+128),w
  4600  0290  3075               	movlw	117
  4601  0291  3B39               	subwfb	(_timeout_count+1)^(0+128),w
  4602  0292  1C03               	btfss	3,0
  4603  0293  2AB4               	goto	l6593
  4604  0294                     l6581:	
  4605                           
  4606                           ;main.c: 141:                     {;main.c: 143:                         LED_PROCESS(0);
  4607  0294  3000               	movlw	0
  4608  0295  318D  2575  3180   	fcall	_LED_PROCESS
  4609                           
  4610                           ;main.c: 145:                         if(timeout_count >= 32000)
  4611  0298  0021               	movlb	1	; select bank1
  4612  0299  083B               	movf	(_timeout_count+3)^(0+128),w
  4613  029A  1D03               	btfss	3,2
  4614  029B  2AA3               	goto	l6585
  4615  029C  083A               	movf	(_timeout_count+2)^(0+128),w
  4616  029D  1D03               	btfss	3,2
  4617  029E  2AA3               	goto	l6585
  4618  029F  307D               	movlw	125
  4619  02A0  0239               	subwf	(_timeout_count+1)^(0+128),w
  4620  02A1  1C03               	btfss	3,0
  4621  02A2  2896               	goto	l6441
  4622  02A3                     l6585:	
  4623                           
  4624                           ;main.c: 146:                         {;main.c: 147:                             timeout
      +                          _count = 0;
  4625  02A3  3000               	movlw	0
  4626  02A4  00BB               	movwf	(_timeout_count+3)^(0+128)
  4627  02A5  3000               	movlw	0
  4628  02A6  00BA               	movwf	(_timeout_count+2)^(0+128)
  4629  02A7  3000               	movlw	0
  4630  02A8  00B9               	movwf	(_timeout_count+1)^(0+128)
  4631  02A9  3000               	movlw	0
  4632  02AA  00B8               	movwf	_timeout_count^(0+128)
  4633                           
  4634                           ;main.c: 148:                             LED_PROCESS(last_touch_status.full_status);
  4635  02AB  0020               	movlb	0	; select bank0
  4636  02AC  0859               	movf	_last_touch_status,w
  4637  02AD  318D  2575  3180   	fcall	_LED_PROCESS
  4638                           
  4639                           ;main.c: 149:                             check_request = 0;
  4640  02B0  0020               	movlb	0	; select bank0
  4641  02B1  01E0               	clrf	_check_request
  4642                           
  4643                           ;main.c: 150:                             config_status = 0;
  4644  02B2  01E1               	clrf	_config_status
  4645  02B3  2896               	goto	l6441
  4646  02B4                     l6593:	
  4647                           
  4648                           ;main.c: 154:                     {;main.c: 155:                         blink_count++;
  4649  02B4  3001               	movlw	1
  4650  02B5  00D9               	movwf	??_main^(0+128)
  4651  02B6  0859               	movf	??_main^(0+128),w
  4652  02B7  0020               	movlb	0	; select bank0
  4653  02B8  07DE               	addwf	_blink_count,f
  4654                           
  4655                           ;main.c: 156:                         if(blink == 0)
  4656  02B9  085F               	movf	_blink,w
  4657  02BA  1D03               	btfss	3,2
  4658  02BB  2AC9               	goto	l6603
  4659                           
  4660                           ;main.c: 157:                         {;main.c: 158:                             LED_PRO
      +                          CESS(0);
  4661  02BC  3000               	movlw	0
  4662  02BD  318D  2575  3180   	fcall	_LED_PROCESS
  4663                           
  4664                           ;main.c: 159:                             if(blink_count == 200)
  4665  02C0  30C8               	movlw	200
  4666  02C1  0020               	movlb	0	; select bank0
  4667  02C2  065E               	xorwf	_blink_count,w
  4668  02C3  1D03               	btfss	3,2
  4669  02C4  2896               	goto	l6441
  4670                           
  4671                           ;main.c: 160:                             {;main.c: 161:                                
      +                           blink_count = 0;
  4672  02C5  01DE               	clrf	_blink_count
  4673                           
  4674                           ;main.c: 162:                                 blink = 1;
  4675  02C6  01DF               	clrf	_blink
  4676  02C7  0ADF               	incf	_blink,f
  4677  02C8  2896               	goto	l6441
  4678  02C9                     l6603:	
  4679                           
  4680                           ;main.c: 166:                         {;main.c: 167:                             LED_PRO
      +                          CESS(7);
  4681  02C9  3007               	movlw	7
  4682  02CA  318D  2575  3180   	fcall	_LED_PROCESS
  4683                           
  4684                           ;main.c: 168:                             if(blink_count == 200)
  4685  02CD  30C8               	movlw	200
  4686  02CE  0020               	movlb	0	; select bank0
  4687  02CF  065E               	xorwf	_blink_count,w
  4688  02D0  1D03               	btfss	3,2
  4689  02D1  2896               	goto	l6441
  4690                           
  4691                           ;main.c: 169:                             {;main.c: 170:                                
      +                           blink_count = 0;
  4692  02D2  01DE               	clrf	_blink_count
  4693  02D3                     L1:	
  4694                           
  4695                           ;main.c: 171:                                 blink = 0;
  4696  02D3  01DF               	clrf	_blink
  4697  02D4  2896               	goto	l6441
  4698  02D5                     __end_of_main:	
  4699                           
  4700                           	psect	text1
  4701  0BF7                     __ptext1:	
  4702 ;; *************** function _update_state *****************
  4703 ;; Defined at:
  4704 ;;		line 208 in file "main.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;		None
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;		None
  4709 ;; Return value:  Size  Location     Type
  4710 ;;                  1    wreg      void 
  4711 ;; Registers used:
  4712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4713 ;; Tracked objects:
  4714 ;;		On entry : 0/0
  4715 ;;		On exit  : 0/0
  4716 ;;		Unchanged: 0/0
  4717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4718 ;;      Params:         0       0       0       0       0       0       0       0
  4719 ;;      Locals:         0       0       0       0       0       0       0       0
  4720 ;;      Temps:          0       0       0       0       0       0       0       0
  4721 ;;      Totals:         0       0       0       0       0       0       0       0
  4722 ;;Total ram usage:        0 bytes
  4723 ;; Hardware stack levels used:    1
  4724 ;; Hardware stack levels required when called:   13
  4725 ;; This function calls:
  4726 ;;		_printf
  4727 ;; This function is called by:
  4728 ;;		_main
  4729 ;; This function uses a non-reentrant model
  4730 ;;
  4731                           
  4732                           
  4733                           ;psect for function _update_state
  4734  0BF7                     _update_state:	
  4735                           
  4736                           ;main.c: 210:     switch(last_touch_status.full_status)
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _update_state: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4740  0BF7  2C30               	goto	l6321
  4741  0BF8                     l6303:	
  4742  0BF8  3014               	movlw	low (STR_3| (0+32768))
  4743  0BF9  00C8               	movwf	printf@fmt
  4744  0BFA  3098               	movlw	high (STR_3| (0+32768))
  4745  0BFB  00C9               	movwf	printf@fmt+1
  4746  0BFC  3195  25D8         	fcall	_printf
  4747  0BFE  0008               	return
  4748  0BFF                     l6305:	
  4749  0BFF  3019               	movlw	low (STR_4| (0+32768))
  4750  0C00  00C8               	movwf	printf@fmt
  4751  0C01  3098               	movlw	high (STR_4| (0+32768))
  4752  0C02  00C9               	movwf	printf@fmt+1
  4753  0C03  3195  25D8         	fcall	_printf
  4754  0C05  0008               	return
  4755  0C06                     l6307:	
  4756  0C06  301E               	movlw	low (STR_5| (0+32768))
  4757  0C07  00C8               	movwf	printf@fmt
  4758  0C08  3098               	movlw	high (STR_5| (0+32768))
  4759  0C09  00C9               	movwf	printf@fmt+1
  4760  0C0A  3195  25D8         	fcall	_printf
  4761  0C0C  0008               	return
  4762  0C0D                     l6309:	
  4763  0C0D  3023               	movlw	low (STR_6| (0+32768))
  4764  0C0E  00C8               	movwf	printf@fmt
  4765  0C0F  3098               	movlw	high (STR_6| (0+32768))
  4766  0C10  00C9               	movwf	printf@fmt+1
  4767  0C11  3195  25D8         	fcall	_printf
  4768  0C13  0008               	return
  4769  0C14                     l6311:	
  4770  0C14  3028               	movlw	low (STR_7| (0+32768))
  4771  0C15  00C8               	movwf	printf@fmt
  4772  0C16  3098               	movlw	high (STR_7| (0+32768))
  4773  0C17  00C9               	movwf	printf@fmt+1
  4774  0C18  3195  25D8         	fcall	_printf
  4775  0C1A  0008               	return
  4776  0C1B                     l6313:	
  4777  0C1B  302D               	movlw	low (STR_8| (0+32768))
  4778  0C1C  00C8               	movwf	printf@fmt
  4779  0C1D  3098               	movlw	high (STR_8| (0+32768))
  4780  0C1E  00C9               	movwf	printf@fmt+1
  4781  0C1F  3195  25D8         	fcall	_printf
  4782  0C21  0008               	return
  4783  0C22                     l6315:	
  4784  0C22  3032               	movlw	low (STR_9| (0+32768))
  4785  0C23  00C8               	movwf	printf@fmt
  4786  0C24  3098               	movlw	high (STR_9| (0+32768))
  4787  0C25  00C9               	movwf	printf@fmt+1
  4788  0C26  3195  25D8         	fcall	_printf
  4789  0C28  0008               	return
  4790  0C29                     l6317:	
  4791  0C29  3037               	movlw	low (STR_10| (0+32768))
  4792  0C2A  00C8               	movwf	printf@fmt
  4793  0C2B  3098               	movlw	high (STR_10| (0+32768))
  4794  0C2C  00C9               	movwf	printf@fmt+1
  4795  0C2D  3195  25D8         	fcall	_printf
  4796  0C2F  0008               	return
  4797  0C30                     l6321:	
  4798                           
  4799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4800                           ; Switch size 1, requested type "simple"
  4801                           ; Number of cases is 1, Range of values is 0 to 0
  4802                           ; switch strategies available:
  4803                           ; Name         Instructions Cycles
  4804                           ; simple_byte            4     3 (average)
  4805                           ; direct_byte            8     6 (fixed)
  4806                           ; jumptable            260     6 (fixed)
  4807                           ;	Chosen strategy is simple_byte
  4808  0C30  0020               	movlb	0	; select bank0
  4809  0C31  085A               	movf	_last_touch_status+1,w
  4810  0C32  3A00               	xorlw	0	; case 0
  4811  0C33  1903               	skipnz
  4812  0C34  2C36               	goto	l6789
  4813  0C35  2C50               	goto	l1028
  4814  0C36                     l6789:	
  4815                           
  4816                           ; Switch size 1, requested type "simple"
  4817                           ; Number of cases is 8, Range of values is 0 to 7
  4818                           ; switch strategies available:
  4819                           ; Name         Instructions Cycles
  4820                           ; direct_byte           22     6 (fixed)
  4821                           ; simple_byte           25    13 (average)
  4822                           ; jumptable            260     6 (fixed)
  4823                           ;	Chosen strategy is simple_byte
  4824  0C36  0859               	movf	_last_touch_status,w
  4825  0C37  3A00               	xorlw	0	; case 0
  4826  0C38  1903               	skipnz
  4827  0C39  2BF8               	goto	l6303
  4828  0C3A  3A01               	xorlw	1	; case 1
  4829  0C3B  1903               	skipnz
  4830  0C3C  2BFF               	goto	l6305
  4831  0C3D  3A03               	xorlw	3	; case 2
  4832  0C3E  1903               	skipnz
  4833  0C3F  2C06               	goto	l6307
  4834  0C40  3A01               	xorlw	1	; case 3
  4835  0C41  1903               	skipnz
  4836  0C42  2C0D               	goto	l6309
  4837  0C43  3A07               	xorlw	7	; case 4
  4838  0C44  1903               	skipnz
  4839  0C45  2C14               	goto	l6311
  4840  0C46  3A01               	xorlw	1	; case 5
  4841  0C47  1903               	skipnz
  4842  0C48  2C1B               	goto	l6313
  4843  0C49  3A03               	xorlw	3	; case 6
  4844  0C4A  1903               	skipnz
  4845  0C4B  2C22               	goto	l6315
  4846  0C4C  3A01               	xorlw	1	; case 7
  4847  0C4D  1903               	skipnz
  4848  0C4E  2C29               	goto	l6317
  4849  0C4F  2C50               	goto	l1028
  4850  0C50                     l1028:	
  4851  0C50  0008               	return
  4852  0C51                     __end_of_update_state:	
  4853                           
  4854                           	psect	text2
  4855  086C                     __ptext2:	
  4856 ;; *************** function _check_message *****************
  4857 ;; Defined at:
  4858 ;;		line 304 in file "main.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  x               1    wreg     unsigned char 
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;  x               1   50[BANK0 ] unsigned char 
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      void 
  4865 ;; Registers used:
  4866 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4872 ;;      Params:         0       0       0       0       0       0       0       0
  4873 ;;      Locals:         0       1       0       0       0       0       0       0
  4874 ;;      Temps:          0       2       0       0       0       0       0       0
  4875 ;;      Totals:         0       3       0       0       0       0       0       0
  4876 ;;Total ram usage:        3 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:   13
  4879 ;; This function calls:
  4880 ;;		_printf
  4881 ;; This function is called by:
  4882 ;;		_main
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           
  4887                           ;psect for function _check_message
  4888  086C                     _check_message:	
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _check_message: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4892                           ;check_message@x stored from wreg
  4893  086C  0020               	movlb	0	; select bank0
  4894  086D  00D2               	movwf	check_message@x
  4895                           
  4896                           ;main.c: 304: void check_message(uint8_t x);main.c: 305: {;main.c: 306:     switch (x)
  4897  086E  2882               	goto	l6339
  4898  086F                     l6329:	
  4899                           
  4900                           ;main.c: 309:         {;main.c: 310:             check_request = 0;
  4901  086F  01E0               	clrf	_check_request
  4902                           
  4903                           ;main.c: 311:             break;
  4904  0870  0008               	return
  4905  0871                     l6333:	
  4906                           
  4907                           ;main.c: 319:         {;main.c: 320:             printf("%c",x);
  4908  0871  3040               	movlw	low (STR_11| (0+32768))
  4909  0872  00C8               	movwf	printf@fmt
  4910  0873  3098               	movlw	high (STR_11| (0+32768))
  4911  0874  00C9               	movwf	printf@fmt+1
  4912  0875  0852               	movf	check_message@x,w
  4913  0876  00D0               	movwf	??_check_message
  4914  0877  01D1               	clrf	??_check_message+1
  4915  0878  0850               	movf	??_check_message,w
  4916  0879  00CA               	movwf	?_printf+2
  4917  087A  0851               	movf	??_check_message+1,w
  4918  087B  00CB               	movwf	?_printf+3
  4919  087C  3195  25D8         	fcall	_printf
  4920                           
  4921                           ;main.c: 321:             check_request = 1;
  4922  087E  0020               	movlb	0	; select bank0
  4923  087F  01E0               	clrf	_check_request
  4924  0880  0AE0               	incf	_check_request,f
  4925                           
  4926                           ;main.c: 322:             break;
  4927  0881  0008               	return
  4928  0882                     l6339:	
  4929  0882  0852               	movf	check_message@x,w
  4930  0883  00D0               	movwf	??_check_message
  4931  0884  01D1               	clrf	??_check_message+1
  4932                           
  4933                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4934                           ; Switch size 1, requested type "simple"
  4935                           ; Number of cases is 1, Range of values is 0 to 0
  4936                           ; switch strategies available:
  4937                           ; Name         Instructions Cycles
  4938                           ; simple_byte            4     3 (average)
  4939                           ; direct_byte            8     6 (fixed)
  4940                           ; jumptable            260     6 (fixed)
  4941                           ;	Chosen strategy is simple_byte
  4942  0885  0851               	movf	??_check_message+1,w
  4943  0886  3A00               	xorlw	0	; case 0
  4944  0887  1903               	skipnz
  4945  0888  288A               	goto	l6791
  4946  0889  2871               	goto	l6333
  4947  088A                     l6791:	
  4948                           
  4949                           ; Switch size 1, requested type "simple"
  4950                           ; Number of cases is 2, Range of values is 70 to 84
  4951                           ; switch strategies available:
  4952                           ; Name         Instructions Cycles
  4953                           ; simple_byte            7     4 (average)
  4954                           ; direct_byte           39     9 (fixed)
  4955                           ; jumptable            263     9 (fixed)
  4956                           ;	Chosen strategy is simple_byte
  4957  088A  0850               	movf	??_check_message,w
  4958  088B  3A46               	xorlw	70	; case 70
  4959  088C  1903               	skipnz
  4960  088D  286F               	goto	l6329
  4961  088E  3A12               	xorlw	18	; case 84
  4962  088F  1903               	skipnz
  4963  0890  286F               	goto	l6329
  4964  0891  2871               	goto	l6333
  4965  0892  0008               	return
  4966  0893                     __end_of_check_message:	
  4967                           
  4968                           	psect	text3
  4969  15D8                     __ptext3:	
  4970 ;; *************** function _printf *****************
  4971 ;; Defined at:
  4972 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\printf.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  fmt             2   40[BANK0 ] PTR const unsigned char 
  4975 ;;		 -> STR_11(3), STR_10(5), STR_9(5), STR_8(5), 
  4976 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  4977 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  ret             2    0        int 
  4980 ;;  ap              1   47[BANK0 ] PTR void [1]
  4981 ;;		 -> ?_printf(2), 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  2   40[BANK0 ] int 
  4984 ;; Registers used:
  4985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4991 ;;      Params:         0       4       0       0       0       0       0       0
  4992 ;;      Locals:         0       3       0       0       0       0       0       0
  4993 ;;      Temps:          0       1       0       0       0       0       0       0
  4994 ;;      Totals:         0       8       0       0       0       0       0       0
  4995 ;;Total ram usage:        8 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:   12
  4998 ;; This function calls:
  4999 ;;		_vfprintf
  5000 ;; This function is called by:
  5001 ;;		_main
  5002 ;;		_update_state
  5003 ;;		_check_message
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007                           
  5008                           ;psect for function _printf
  5009  15D8                     _printf:	
  5010                           
  5011                           ;incstack = 0
  5012                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5013  15D8  304A               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5014  15D9  0020               	movlb	0	; select bank0
  5015  15DA  00CC               	movwf	??_printf
  5016  15DB  084C               	movf	??_printf,w
  5017  15DC  00CF               	movwf	printf@ap
  5018  15DD  0849               	movf	printf@fmt+1,w
  5019  15DE  00C1               	movwf	vfprintf@fmt+1
  5020  15DF  0848               	movf	printf@fmt,w
  5021  15E0  00C0               	movwf	vfprintf@fmt
  5022  15E1  304F               	movlw	(low (printf@ap| 0))& (0+255)
  5023  15E2  00CC               	movwf	??_printf
  5024  15E3  084C               	movf	??_printf,w
  5025  15E4  00C2               	movwf	vfprintf@ap
  5026  15E5  3000               	movlw	0
  5027  15E6  3189  2141         	fcall	_vfprintf
  5028  15E8  0008               	return
  5029  15E9                     __end_of_printf:	
  5030                           
  5031                           	psect	text4
  5032  0941                     __ptext4:	
  5033 ;; *************** function _vfprintf *****************
  5034 ;; Defined at:
  5035 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  fp              1    wreg     PTR struct _IO_FILE
  5038 ;;		 -> NULL(0), 
  5039 ;;  fmt             2   32[BANK0 ] PTR const unsigned char 
  5040 ;;		 -> STR_11(3), STR_10(5), STR_9(5), STR_8(5), 
  5041 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5042 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5043 ;;  ap              1   34[BANK0 ] PTR PTR void 
  5044 ;;		 -> printf@ap(1), 
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  fp              1   37[BANK0 ] PTR struct _IO_FILE
  5047 ;;		 -> NULL(0), 
  5048 ;;  cfmt            2   38[BANK0 ] PTR unsigned char 
  5049 ;;		 -> STR_11(3), STR_10(5), STR_9(5), STR_8(5), 
  5050 ;;		 -> STR_7(5), STR_6(5), STR_5(5), STR_4(5), 
  5051 ;;		 -> STR_3(5), STR_2(6), STR_1(9), 
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  2   32[BANK0 ] int 
  5054 ;; Registers used:
  5055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5061 ;;      Params:         0       3       0       0       0       0       0       0
  5062 ;;      Locals:         0       3       0       0       0       0       0       0
  5063 ;;      Temps:          0       2       0       0       0       0       0       0
  5064 ;;      Totals:         0       8       0       0       0       0       0       0
  5065 ;;Total ram usage:        8 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:   11
  5068 ;; This function calls:
  5069 ;;		_vfpfcnvrt
  5070 ;; This function is called by:
  5071 ;;		_printf
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           
  5076                           ;psect for function _vfprintf
  5077  0941                     _vfprintf:	
  5078                           
  5079                           ;incstack = 0
  5080                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5081                           ;vfprintf@fp stored from wreg
  5082  0941  0020               	movlb	0	; select bank0
  5083  0942  00C5               	movwf	vfprintf@fp
  5084                           
  5085                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  5086  0943  0841               	movf	vfprintf@fmt+1,w
  5087  0944  00C7               	movwf	vfprintf@cfmt+1
  5088  0945  0840               	movf	vfprintf@fmt,w
  5089  0946  00C6               	movwf	vfprintf@cfmt
  5090                           
  5091                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  5092  0947  0021               	movlb	1	; select bank1
  5093  0948  01BC               	clrf	_nout^(0+128)
  5094  0949  01BD               	clrf	(_nout+1)^(0+128)
  5095  094A                     l6201:	
  5096                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5097                           
  5098                           
  5099                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  5100  094A  0020               	movlb	0	; select bank0
  5101  094B  0846               	movf	vfprintf@cfmt,w
  5102  094C  0084               	movwf	4
  5103  094D  0847               	movf	vfprintf@cfmt+1,w
  5104  094E  0085               	movwf	5
  5105  094F  0012               	moviw fsr0++
  5106  0950  1903               	btfsc	3,2
  5107  0951  2967               	goto	l6203
  5108                           
  5109                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  5110  0952  3046               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  5111  0953  00C3               	movwf	??_vfprintf
  5112  0954  0843               	movf	??_vfprintf,w
  5113  0955  00B7               	movwf	vfpfcnvrt@fmt
  5114  0956  0842               	movf	vfprintf@ap,w
  5115  0957  00C4               	movwf	??_vfprintf+1
  5116  0958  0844               	movf	??_vfprintf+1,w
  5117  0959  00B8               	movwf	vfpfcnvrt@ap
  5118  095A  0845               	movf	vfprintf@fp,w
  5119  095B  3185  254F  3189   	fcall	_vfpfcnvrt
  5120  095E  0020               	movlb	0	; select bank0
  5121  095F  0837               	movf	?_vfpfcnvrt,w
  5122  0960  0021               	movlb	1	; select bank1
  5123  0961  07BC               	addwf	_nout^(0+128),f
  5124  0962  0020               	movlb	0	; select bank0
  5125  0963  0838               	movf	?_vfpfcnvrt+1,w
  5126  0964  0021               	movlb	1	; select bank1
  5127  0965  3DBD               	addwfc	(_nout+1)^(0+128),f
  5128  0966  294A               	goto	l6201
  5129  0967                     l6203:	
  5130                           
  5131                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  5132  0967  0021               	movlb	1	; select bank1
  5133  0968  083D               	movf	(_nout+1)^(0+128),w
  5134  0969  0020               	movlb	0	; select bank0
  5135  096A  00C1               	movwf	?_vfprintf+1
  5136  096B  0021               	movlb	1	; select bank1
  5137  096C  083C               	movf	_nout^(0+128),w
  5138  096D  0020               	movlb	0	; select bank0
  5139  096E  00C0               	movwf	?_vfprintf
  5140  096F  0008               	return
  5141  0970                     __end_of_vfprintf:	
  5142                           
  5143                           	psect	text5
  5144  054F                     __ptext5:	
  5145 ;; *************** function _vfpfcnvrt *****************
  5146 ;; Defined at:
  5147 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;  fp              1    wreg     PTR struct _IO_FILE
  5150 ;;		 -> NULL(0), 
  5151 ;;  fmt             1   23[BANK0 ] PTR PTR unsigned char 
  5152 ;;		 -> vfprintf@cfmt(2), 
  5153 ;;  ap              1   24[BANK0 ] PTR PTR void 
  5154 ;;		 -> printf@ap(1), 
  5155 ;; Auto vars:     Size  Location     Type
  5156 ;;  fp              1   31[BANK0 ] PTR struct _IO_FILE
  5157 ;;		 -> NULL(0), 
  5158 ;;  llu             8    0        unsigned long long 
  5159 ;;  ll              8    0        long long 
  5160 ;;  f               4    0        long long 
  5161 ;;  ct              3    0        unsigned char [3]
  5162 ;;  vp              2    0        PTR void 
  5163 ;;  i               2    0        int 
  5164 ;;  done            2    0        int 
  5165 ;;  cp              2    0        PTR unsigned char 
  5166 ;;  c               1   30[BANK0 ] unsigned char 
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  2   23[BANK0 ] int 
  5169 ;; Registers used:
  5170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5176 ;;      Params:         0       2       0       0       0       0       0       0
  5177 ;;      Locals:         0       2       0       0       0       0       0       0
  5178 ;;      Temps:          0       5       0       0       0       0       0       0
  5179 ;;      Totals:         0       9       0       0       0       0       0       0
  5180 ;;Total ram usage:        9 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:   10
  5183 ;; This function calls:
  5184 ;;		_ctoa
  5185 ;;		_fputc
  5186 ;; This function is called by:
  5187 ;;		_vfprintf
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           
  5192                           ;psect for function _vfpfcnvrt
  5193  054F                     _vfpfcnvrt:	
  5194                           
  5195                           ;incstack = 0
  5196                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5197                           ;vfpfcnvrt@fp stored from wreg
  5198  054F  0020               	movlb	0	; select bank0
  5199  0550  00BF               	movwf	vfpfcnvrt@fp
  5200                           
  5201                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  5202  0551  0837               	movf	vfpfcnvrt@fmt,w
  5203  0552  0086               	movwf	6
  5204  0553  0187               	clrf	7
  5205  0554  3F40               	moviw [0]fsr1
  5206  0555  00B9               	movwf	??_vfpfcnvrt
  5207  0556  3F41               	moviw [1]fsr1
  5208  0557  00BA               	movwf	??_vfpfcnvrt+1
  5209  0558  0839               	movf	??_vfpfcnvrt,w
  5210  0559  0084               	movwf	4
  5211  055A  083A               	movf	??_vfpfcnvrt+1,w
  5212  055B  0085               	movwf	5
  5213  055C  0012               	moviw fsr0++
  5214  055D  3A25               	xorlw	37
  5215  055E  1D03               	btfss	3,2
  5216  055F  2DD4               	goto	l6107
  5217                           
  5218                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  5219  0560  0837               	movf	vfpfcnvrt@fmt,w
  5220  0561  0086               	movwf	6
  5221  0562  0187               	clrf	7
  5222  0563  3001               	movlw	1
  5223  0564  0781               	addwf	1,f
  5224  0565  3141               	addfsr 1,1
  5225  0566  1803               	skipnc
  5226  0567  0A81               	incf	1,f
  5227                           
  5228                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  5229  0568  01D7               	clrf	_width
  5230  0569  01D8               	clrf	_width+1
  5231  056A  0021               	movlb	1	; select bank1
  5232  056B  01C0               	clrf	_flags^(0+128)
  5233  056C  01C1               	clrf	(_flags+1)^(0+128)
  5234                           
  5235                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  5236  056D  30FF               	movlw	255
  5237  056E  00BE               	movwf	_prec^(0+128)
  5238  056F  30FF               	movlw	255
  5239  0570  00BF               	movwf	(_prec^(0+128)+1)
  5240                           
  5241                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 792:       
      +                            if (*fmt[0] == 'c') {
  5242  0571  0020               	movlb	0	; select bank0
  5243  0572  0837               	movf	vfpfcnvrt@fmt,w
  5244  0573  0086               	movwf	6
  5245  0574  0187               	clrf	7
  5246  0575  3F40               	moviw [0]fsr1
  5247  0576  00B9               	movwf	??_vfpfcnvrt
  5248  0577  3F41               	moviw [1]fsr1
  5249  0578  00BA               	movwf	??_vfpfcnvrt+1
  5250  0579  0839               	movf	??_vfpfcnvrt,w
  5251  057A  0084               	movwf	4
  5252  057B  083A               	movf	??_vfpfcnvrt+1,w
  5253  057C  0085               	movwf	5
  5254  057D  0012               	moviw fsr0++
  5255  057E  3A63               	xorlw	99
  5256  057F  1D03               	btfss	3,2
  5257  0580  2DA2               	goto	l6091
  5258                           
  5259                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 793:       
      +                                ++*fmt;
  5260  0581  0837               	movf	vfpfcnvrt@fmt,w
  5261  0582  0086               	movwf	6
  5262  0583  0187               	clrf	7
  5263  0584  3001               	movlw	1
  5264  0585  0781               	addwf	1,f
  5265  0586  3141               	addfsr 1,1
  5266  0587  1803               	skipnc
  5267  0588  0A81               	incf	1,f
  5268                           
  5269                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 794:       
      +                                c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5270  0589  0838               	movf	vfpfcnvrt@ap,w
  5271  058A  0086               	movwf	6
  5272  058B  0187               	clrf	7
  5273  058C  0801               	movf	1,w
  5274  058D  0084               	movwf	4
  5275  058E  0185               	clrf	5
  5276  058F  3002               	movlw	2
  5277  0590  0781               	addwf	1,f
  5278  0591  0800               	movf	0,w
  5279  0592  00B9               	movwf	??_vfpfcnvrt
  5280  0593  0839               	movf	??_vfpfcnvrt,w
  5281  0594  00BE               	movwf	vfpfcnvrt@c
  5282                           
  5283                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 795:       
      +                                return ctoa(fp, c);
  5284  0595  083E               	movf	vfpfcnvrt@c,w
  5285  0596  00B9               	movwf	??_vfpfcnvrt
  5286  0597  0839               	movf	??_vfpfcnvrt,w
  5287  0598  00B1               	movwf	ctoa@c
  5288  0599  083F               	movf	vfpfcnvrt@fp,w
  5289  059A  3187  27D7         	fcall	_ctoa
  5290  059C  0020               	movlb	0	; select bank0
  5291  059D  0832               	movf	?_ctoa+1,w
  5292  059E  00B8               	movwf	?_vfpfcnvrt+1
  5293  059F  0831               	movf	?_ctoa,w
  5294  05A0  00B7               	movwf	?_vfpfcnvrt
  5295  05A1  0008               	return
  5296  05A2                     l6091:	
  5297                           
  5298                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
  5299  05A2  0837               	movf	vfpfcnvrt@fmt,w
  5300  05A3  0086               	movwf	6
  5301  05A4  0187               	clrf	7
  5302  05A5  3F40               	moviw [0]fsr1
  5303  05A6  00B9               	movwf	??_vfpfcnvrt
  5304  05A7  3F41               	moviw [1]fsr1
  5305  05A8  00BA               	movwf	??_vfpfcnvrt+1
  5306  05A9  0839               	movf	??_vfpfcnvrt,w
  5307  05AA  0084               	movwf	4
  5308  05AB  083A               	movf	??_vfpfcnvrt+1,w
  5309  05AC  0085               	movwf	5
  5310  05AD  0012               	moviw fsr0++
  5311  05AE  3A25               	xorlw	37
  5312  05AF  1D03               	btfss	3,2
  5313  05B0  2DC9               	goto	l6101
  5314                           
  5315                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
  5316  05B1  0837               	movf	vfpfcnvrt@fmt,w
  5317  05B2  0086               	movwf	6
  5318  05B3  0187               	clrf	7
  5319  05B4  3001               	movlw	1
  5320  05B5  0781               	addwf	1,f
  5321  05B6  3141               	addfsr 1,1
  5322  05B7  1803               	skipnc
  5323  05B8  0A81               	incf	1,f
  5324                           
  5325                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
  5326  05B9  3025               	movlw	37
  5327  05BA  00F4               	movwf	fputc@c
  5328  05BB  3000               	movlw	0
  5329  05BC  00F5               	movwf	fputc@c+1
  5330  05BD  083F               	movf	vfpfcnvrt@fp,w
  5331  05BE  00B9               	movwf	??_vfpfcnvrt
  5332  05BF  0839               	movf	??_vfpfcnvrt,w
  5333  05C0  00F6               	movwf	fputc@fp
  5334  05C1  3189  21D4         	fcall	_fputc
  5335  05C3                     l6097:	
  5336                           
  5337                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
  5338  05C3  3001               	movlw	1
  5339  05C4  0020               	movlb	0	; select bank0
  5340  05C5  00B7               	movwf	?_vfpfcnvrt
  5341  05C6  3000               	movlw	0
  5342  05C7  00B8               	movwf	?_vfpfcnvrt+1
  5343  05C8  0008               	return
  5344  05C9                     l6101:	
  5345                           
  5346                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
  5347  05C9  0837               	movf	vfpfcnvrt@fmt,w
  5348  05CA  0086               	movwf	6
  5349  05CB  0187               	clrf	7
  5350  05CC  3001               	movlw	1
  5351  05CD  0781               	addwf	1,f
  5352  05CE  3141               	addfsr 1,1
  5353  05CF  1803               	skipnc
  5354  05D0  0A81               	incf	1,f
  5355                           
  5356                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
  5357  05D1  01B7               	clrf	?_vfpfcnvrt
  5358  05D2  01B8               	clrf	?_vfpfcnvrt+1
  5359  05D3  0008               	return
  5360  05D4                     l6107:	
  5361                           
  5362                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
  5363  05D4  0837               	movf	vfpfcnvrt@fmt,w
  5364  05D5  0086               	movwf	6
  5365  05D6  0187               	clrf	7
  5366  05D7  3F40               	moviw [0]fsr1
  5367  05D8  00B9               	movwf	??_vfpfcnvrt
  5368  05D9  3F41               	moviw [1]fsr1
  5369  05DA  00BA               	movwf	??_vfpfcnvrt+1
  5370  05DB  0839               	movf	??_vfpfcnvrt,w
  5371  05DC  0084               	movwf	4
  5372  05DD  083A               	movf	??_vfpfcnvrt+1,w
  5373  05DE  0085               	movwf	5
  5374  05DF  0800               	movf	0,w	;code access
  5375  05E0  00BB               	movwf	??_vfpfcnvrt+2
  5376  05E1  01BC               	clrf	??_vfpfcnvrt+3
  5377  05E2  083B               	movf	??_vfpfcnvrt+2,w
  5378  05E3  00F4               	movwf	fputc@c
  5379  05E4  083C               	movf	??_vfpfcnvrt+3,w
  5380  05E5  00F5               	movwf	fputc@c+1
  5381  05E6  083F               	movf	vfpfcnvrt@fp,w
  5382  05E7  00BD               	movwf	??_vfpfcnvrt+4
  5383  05E8  083D               	movf	??_vfpfcnvrt+4,w
  5384  05E9  00F6               	movwf	fputc@fp
  5385  05EA  3189  21D4  3185   	fcall	_fputc
  5386                           
  5387                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
  5388  05ED  0020               	movlb	0	; select bank0
  5389  05EE  0837               	movf	vfpfcnvrt@fmt,w
  5390  05EF  0086               	movwf	6
  5391  05F0  0187               	clrf	7
  5392  05F1  3001               	movlw	1
  5393  05F2  0781               	addwf	1,f
  5394  05F3  3141               	addfsr 1,1
  5395  05F4  1803               	skipnc
  5396  05F5  0A81               	incf	1,f
  5397  05F6  2DC3               	goto	l6097
  5398  05F7                     __end_of_vfpfcnvrt:	
  5399                           
  5400                           	psect	text6
  5401  07D7                     __ptext6:	
  5402 ;; *************** function _ctoa *****************
  5403 ;; Defined at:
  5404 ;;		line 259 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  fp              1    wreg     PTR struct _IO_FILE
  5407 ;;		 -> NULL(0), 
  5408 ;;  c               1   17[BANK0 ] unsigned char 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
  5411 ;;		 -> NULL(0), 
  5412 ;;  w               2   20[BANK0 ] int 
  5413 ;;  l               2    0        int 
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  2   17[BANK0 ] int 
  5416 ;; Registers used:
  5417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5423 ;;      Params:         0       2       0       0       0       0       0       0
  5424 ;;      Locals:         0       3       0       0       0       0       0       0
  5425 ;;      Temps:          0       1       0       0       0       0       0       0
  5426 ;;      Totals:         0       6       0       0       0       0       0       0
  5427 ;;Total ram usage:        6 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:    9
  5430 ;; This function calls:
  5431 ;;		_pad
  5432 ;; This function is called by:
  5433 ;;		_vfpfcnvrt
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           
  5438                           ;psect for function _ctoa
  5439  07D7                     _ctoa:	
  5440                           
  5441                           ;incstack = 0
  5442                           ; Regs used in _ctoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5443                           ;ctoa@fp stored from wreg
  5444  07D7  0020               	movlb	0	; select bank0
  5445  07D8  00B6               	movwf	ctoa@fp
  5446                           
  5447                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 259: static
      +                           int ctoa(FILE *fp, char c);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 260: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common
      +                          \doprnt.c: 261:     int l, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 264:     w = width ? width - 1 : width;
  5448  07D9  0857               	movf	_width,w
  5449  07DA  0458               	iorwf	_width+1,w
  5450  07DB  1D03               	btfss	3,2
  5451  07DC  2FE2               	goto	l5937
  5452  07DD  0858               	movf	_width+1,w
  5453  07DE  00B5               	movwf	ctoa@w+1
  5454  07DF  0857               	movf	_width,w
  5455  07E0  00B4               	movwf	ctoa@w
  5456  07E1  2FE8               	goto	l5939
  5457  07E2                     l5937:	
  5458  07E2  0857               	movf	_width,w
  5459  07E3  3EFF               	addlw	255
  5460  07E4  00B4               	movwf	ctoa@w
  5461  07E5  30FF               	movlw	255
  5462  07E6  3D58               	addwfc	_width+1,w
  5463  07E7  00B5               	movwf	ctoa@w+1
  5464  07E8                     l5939:	
  5465                           
  5466                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 267:     db
      +                          uf[0] = c;
  5467  07E8  0831               	movf	ctoa@c,w
  5468  07E9  00B3               	movwf	??_ctoa
  5469  07EA  0833               	movf	??_ctoa,w
  5470  07EB  0023               	movlb	3	; select bank3
  5471  07EC  00A0               	movwf	_dbuf^(0+384)
  5472                           
  5473                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 268:     db
      +                          uf[1] = '\0';
  5474  07ED  01A1               	clrf	(_dbuf^(0+384)+1)
  5475                           
  5476                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 269:     re
      +                          turn pad(fp, &dbuf[0], w);
  5477  07EE  30A0               	movlw	(low (_dbuf| (0+256)))& (0+255)
  5478  07EF  0020               	movlb	0	; select bank0
  5479  07F0  00B3               	movwf	??_ctoa
  5480  07F1  0833               	movf	??_ctoa,w
  5481  07F2  00A8               	movwf	pad@buf
  5482  07F3  0835               	movf	ctoa@w+1,w
  5483  07F4  00AA               	movwf	pad@p+1
  5484  07F5  0834               	movf	ctoa@w,w
  5485  07F6  00A9               	movwf	pad@p
  5486  07F7  0836               	movf	ctoa@fp,w
  5487  07F8  318B  2352         	fcall	_pad
  5488  07FA  0020               	movlb	0	; select bank0
  5489  07FB  0829               	movf	?_pad+1,w
  5490  07FC  00B2               	movwf	?_ctoa+1
  5491  07FD  0828               	movf	?_pad,w
  5492  07FE  00B1               	movwf	?_ctoa
  5493  07FF  0008               	return
  5494  0800                     __end_of_ctoa:	
  5495                           
  5496                           	psect	text7
  5497  0B52                     __ptext7:	
  5498 ;; *************** function _pad *****************
  5499 ;; Defined at:
  5500 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
  5501 ;; Parameters:    Size  Location     Type
  5502 ;;  fp              1    wreg     PTR struct _IO_FILE
  5503 ;;		 -> NULL(0), 
  5504 ;;  buf             1    8[BANK0 ] PTR unsigned char 
  5505 ;;		 -> dbuf(32), 
  5506 ;;  p               2    9[BANK0 ] int 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
  5509 ;;		 -> NULL(0), 
  5510 ;;  w               2   14[BANK0 ] int 
  5511 ;;  i               2   12[BANK0 ] int 
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  2    8[BANK0 ] int 
  5514 ;; Registers used:
  5515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5521 ;;      Params:         0       3       0       0       0       0       0       0
  5522 ;;      Locals:         0       5       0       0       0       0       0       0
  5523 ;;      Temps:          0       1       0       0       0       0       0       0
  5524 ;;      Totals:         0       9       0       0       0       0       0       0
  5525 ;;Total ram usage:        9 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    8
  5528 ;; This function calls:
  5529 ;;		_fputc
  5530 ;;		_fputs
  5531 ;;		_strlen
  5532 ;; This function is called by:
  5533 ;;		_ctoa
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           
  5538                           ;psect for function _pad
  5539  0B52                     _pad:	
  5540                           
  5541                           ;incstack = 0
  5542                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5543                           ;pad@fp stored from wreg
  5544  0B52  0020               	movlb	0	; select bank0
  5545  0B53  00B0               	movwf	pad@fp
  5546                           
  5547                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  5548  0B54  0021               	movlb	1	; select bank1
  5549  0B55  1C40               	btfss	_flags^(0+128),0
  5550  0B56  2B60               	goto	l5845
  5551                           
  5552                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  5553  0B57  0020               	movlb	0	; select bank0
  5554  0B58  0830               	movf	pad@fp,w
  5555  0B59  00AB               	movwf	??_pad
  5556  0B5A  082B               	movf	??_pad,w
  5557  0B5B  00A0               	movwf	fputs@fp
  5558  0B5C  0828               	movf	pad@buf,w
  5559  0B5D  3188  201F  318B   	fcall	_fputs
  5560  0B60                     l5845:	
  5561                           
  5562                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  5563  0B60  0020               	movlb	0	; select bank0
  5564  0B61  1BAA               	btfsc	pad@p+1,7
  5565  0B62  2B68               	goto	l5849
  5566  0B63  082A               	movf	pad@p+1,w
  5567  0B64  00AF               	movwf	pad@w+1
  5568  0B65  0829               	movf	pad@p,w
  5569  0B66  00AE               	movwf	pad@w
  5570  0B67  2B6A               	goto	l1299
  5571  0B68                     l5849:	
  5572  0B68  01AE               	clrf	pad@w
  5573  0B69  01AF               	clrf	pad@w+1
  5574  0B6A                     l1299:	
  5575                           
  5576                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  5577  0B6A  01AC               	clrf	pad@i
  5578  0B6B  01AD               	clrf	pad@i+1
  5579  0B6C                     l5855:	
  5580                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5581                           
  5582                           
  5583                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  5584  0B6C  082D               	movf	pad@i+1,w
  5585  0B6D  3A80               	xorlw	128
  5586  0B6E  00AB               	movwf	??_pad
  5587  0B6F  082F               	movf	pad@w+1,w
  5588  0B70  3A80               	xorlw	128
  5589  0B71  022B               	subwf	??_pad,w
  5590  0B72  1D03               	skipz
  5591  0B73  2B76               	goto	u4665
  5592  0B74  082E               	movf	pad@w,w
  5593  0B75  022C               	subwf	pad@i,w
  5594  0B76                     u4665:	
  5595  0B76  1803               	btfsc	3,0
  5596  0B77  2B8A               	goto	l1302
  5597                           
  5598                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  5599  0B78  3020               	movlw	32
  5600  0B79  00F4               	movwf	fputc@c
  5601  0B7A  3000               	movlw	0
  5602  0B7B  00F5               	movwf	fputc@c+1
  5603  0B7C  0020               	movlb	0	; select bank0
  5604  0B7D  0830               	movf	pad@fp,w
  5605  0B7E  00AB               	movwf	??_pad
  5606  0B7F  082B               	movf	??_pad,w
  5607  0B80  00F6               	movwf	fputc@fp
  5608  0B81  3189  21D4  318B   	fcall	_fputc
  5609                           
  5610                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  5611  0B84  3001               	movlw	1
  5612  0B85  0020               	movlb	0	; select bank0
  5613  0B86  07AC               	addwf	pad@i,f
  5614  0B87  3000               	movlw	0
  5615  0B88  3DAD               	addwfc	pad@i+1,f
  5616  0B89  2B6C               	goto	l5855
  5617  0B8A                     l1302:	
  5618                           
  5619                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  5620  0B8A  0021               	movlb	1	; select bank1
  5621  0B8B  1840               	btfsc	_flags^(0+128),0
  5622  0B8C  2B96               	goto	l1303
  5623                           
  5624                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  5625  0B8D  0020               	movlb	0	; select bank0
  5626  0B8E  0830               	movf	pad@fp,w
  5627  0B8F  00AB               	movwf	??_pad
  5628  0B90  082B               	movf	??_pad,w
  5629  0B91  00A0               	movwf	fputs@fp
  5630  0B92  0828               	movf	pad@buf,w
  5631  0B93  3188  201F  318B   	fcall	_fputs
  5632  0B96                     l1303:	
  5633                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 92:     }
  5634                           
  5635                           
  5636                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  5637  0B96  0020               	movlb	0	; select bank0
  5638  0B97  0828               	movf	pad@buf,w
  5639  0B98  3196  26CF         	fcall	_strlen
  5640  0B9A  0020               	movlb	0	; select bank0
  5641  0B9B  082E               	movf	pad@w,w
  5642  0B9C  0771               	addwf	?_strlen,w
  5643  0B9D  00A8               	movwf	?_pad
  5644  0B9E  082F               	movf	pad@w+1,w
  5645  0B9F  3D72               	addwfc	?_strlen+1,w
  5646  0BA0  00A9               	movwf	?_pad+1
  5647  0BA1  0008               	return
  5648  0BA2                     __end_of_pad:	
  5649                           
  5650                           	psect	text8
  5651  16CF                     __ptext8:	
  5652 ;; *************** function _strlen *****************
  5653 ;; Defined at:
  5654 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  5655 ;; Parameters:    Size  Location     Type
  5656 ;;  s               1    wreg     PTR const unsigned char 
  5657 ;;		 -> dbuf(32), 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  s               1    5[COMMON] PTR const unsigned char 
  5660 ;;		 -> dbuf(32), 
  5661 ;;  a               1    4[COMMON] PTR const unsigned char 
  5662 ;;		 -> dbuf(32), 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  2    1[COMMON] unsigned int 
  5665 ;; Registers used:
  5666 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5667 ;; Tracked objects:
  5668 ;;		On entry : 0/0
  5669 ;;		On exit  : 0/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5672 ;;      Params:         2       0       0       0       0       0       0       0
  5673 ;;      Locals:         2       0       0       0       0       0       0       0
  5674 ;;      Temps:          1       0       0       0       0       0       0       0
  5675 ;;      Totals:         5       0       0       0       0       0       0       0
  5676 ;;Total ram usage:        5 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    4
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_pad
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           
  5687                           ;psect for function _strlen
  5688  16CF                     _strlen:	
  5689                           
  5690                           ;incstack = 0
  5691                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5692                           ;strlen@s stored from wreg
  5693  16CF  00F5               	movwf	strlen@s
  5694  16D0  0875               	movf	strlen@s,w
  5695  16D1  00F3               	movwf	??_strlen
  5696  16D2  0873               	movf	??_strlen,w
  5697  16D3  00F4               	movwf	strlen@a
  5698  16D4                     l3915:	
  5699  16D4  0875               	movf	strlen@s,w
  5700  16D5  0086               	movwf	6
  5701  16D6  3001               	movlw	1	; select bank2/3
  5702  16D7  0087               	movwf	7
  5703  16D8  0801               	movf	1,w
  5704  16D9  1903               	btfsc	3,2
  5705  16DA  2EE0               	goto	l3917
  5706  16DB  3001               	movlw	1
  5707  16DC  00F3               	movwf	??_strlen
  5708  16DD  0873               	movf	??_strlen,w
  5709  16DE  07F5               	addwf	strlen@s,f
  5710  16DF  2ED4               	goto	l3915
  5711  16E0                     l3917:	
  5712  16E0  0874               	movf	strlen@a,w
  5713  16E1  0275               	subwf	strlen@s,w
  5714  16E2  00F1               	movwf	?_strlen
  5715  16E3  01F2               	clrf	?_strlen+1
  5716  16E4  1BF1               	btfsc	?_strlen,7
  5717  16E5  03F2               	decf	?_strlen+1,f
  5718  16E6  0008               	return
  5719  16E7                     __end_of_strlen:	
  5720                           
  5721                           	psect	text9
  5722  081F                     __ptext9:	
  5723 ;; *************** function _fputs *****************
  5724 ;; Defined at:
  5725 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;  s               1    wreg     PTR const unsigned char 
  5728 ;;		 -> dbuf(32), 
  5729 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
  5730 ;;		 -> NULL(0), 
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  5733 ;;		 -> dbuf(32), 
  5734 ;;  i               2    5[BANK0 ] int 
  5735 ;;  c               1    4[BANK0 ] unsigned char 
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  2    0[BANK0 ] int 
  5738 ;; Registers used:
  5739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5745 ;;      Params:         0       1       0       0       0       0       0       0
  5746 ;;      Locals:         0       4       0       0       0       0       0       0
  5747 ;;      Temps:          0       3       0       0       0       0       0       0
  5748 ;;      Totals:         0       8       0       0       0       0       0       0
  5749 ;;Total ram usage:        8 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    7
  5752 ;; This function calls:
  5753 ;;		_fputc
  5754 ;; This function is called by:
  5755 ;;		_pad
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function _fputs
  5761  081F                     _fputs:	
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5765                           ;fputs@s stored from wreg
  5766  081F  0020               	movlb	0	; select bank0
  5767  0820  00A7               	movwf	fputs@s
  5768  0821  01A5               	clrf	fputs@i
  5769  0822  01A6               	clrf	fputs@i+1
  5770  0823                     l5607:	
  5771  0823  0825               	movf	fputs@i,w
  5772  0824  0727               	addwf	fputs@s,w
  5773  0825  00A1               	movwf	??_fputs
  5774  0826  0821               	movf	??_fputs,w
  5775  0827  0086               	movwf	6
  5776  0828  3001               	movlw	1	; select bank2/3
  5777  0829  0087               	movwf	7
  5778  082A  0801               	movf	1,w
  5779  082B  00A2               	movwf	??_fputs+1
  5780  082C  0822               	movf	??_fputs+1,w
  5781  082D  00A4               	movwf	fputs@c
  5782  082E  0824               	movf	fputs@c,w
  5783  082F  1903               	btfsc	3,2
  5784  0830  0008               	return
  5785  0831  0824               	movf	fputs@c,w
  5786  0832  00A1               	movwf	??_fputs
  5787  0833  01A2               	clrf	??_fputs+1
  5788  0834  0821               	movf	??_fputs,w
  5789  0835  00F4               	movwf	fputc@c
  5790  0836  0822               	movf	??_fputs+1,w
  5791  0837  00F5               	movwf	fputc@c+1
  5792  0838  0820               	movf	fputs@fp,w
  5793  0839  00A3               	movwf	??_fputs+2
  5794  083A  0823               	movf	??_fputs+2,w
  5795  083B  00F6               	movwf	fputc@fp
  5796  083C  3189  21D4  3188   	fcall	_fputc
  5797  083F  3001               	movlw	1
  5798  0840  0020               	movlb	0	; select bank0
  5799  0841  07A5               	addwf	fputs@i,f
  5800  0842  3000               	movlw	0
  5801  0843  3DA6               	addwfc	fputs@i+1,f
  5802  0844  2823               	goto	l5607
  5803  0845                     __end_of_fputs:	
  5804                           
  5805                           	psect	text10
  5806  09D4                     __ptext10:	
  5807 ;; *************** function _fputc *****************
  5808 ;; Defined at:
  5809 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  c               2    4[COMMON] int 
  5812 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
  5813 ;;		 -> NULL(0), 
  5814 ;; Auto vars:     Size  Location     Type
  5815 ;;		None
  5816 ;; Return value:  Size  Location     Type
  5817 ;;                  2    4[COMMON] int 
  5818 ;; Registers used:
  5819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5820 ;; Tracked objects:
  5821 ;;		On entry : 0/0
  5822 ;;		On exit  : 0/0
  5823 ;;		Unchanged: 0/0
  5824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5825 ;;      Params:         3       0       0       0       0       0       0       0
  5826 ;;      Locals:         0       0       0       0       0       0       0       0
  5827 ;;      Temps:          5       0       0       0       0       0       0       0
  5828 ;;      Totals:         8       0       0       0       0       0       0       0
  5829 ;;Total ram usage:        8 bytes
  5830 ;; Hardware stack levels used:    1
  5831 ;; Hardware stack levels required when called:    6
  5832 ;; This function calls:
  5833 ;;		_putch
  5834 ;; This function is called by:
  5835 ;;		_pad
  5836 ;;		_vfpfcnvrt
  5837 ;;		_fputs
  5838 ;; This function uses a non-reentrant model
  5839 ;;
  5840                           
  5841                           
  5842                           ;psect for function _fputc
  5843  09D4                     _fputc:	
  5844                           
  5845                           ;incstack = 0
  5846                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5847  09D4  0876               	movf	fputc@fp,w
  5848  09D5  1D03               	btfss	3,2
  5849  09D6  0876               	movf	fputc@fp,w
  5850  09D7  1D03               	btfss	3,2
  5851  09D8  29DD               	goto	l3801
  5852  09D9  0874               	movf	fputc@c,w
  5853  09DA  3194  24AE         	fcall	_putch
  5854  09DC  0008               	return
  5855  09DD                     l3801:	
  5856  09DD  0876               	movf	fputc@fp,w
  5857  09DE  3E03               	addlw	3
  5858  09DF  0086               	movwf	6
  5859  09E0  0187               	clrf	7
  5860  09E1  0016               	moviw fsr1++
  5861  09E2  0401               	iorwf	1,w
  5862  09E3  1903               	btfsc	3,2
  5863  09E4  2A00               	goto	l3805
  5864  09E5  0876               	movf	fputc@fp,w
  5865  09E6  3E03               	addlw	3
  5866  09E7  0086               	movwf	6
  5867  09E8  0187               	clrf	7
  5868  09E9  3F40               	moviw [0]fsr1
  5869  09EA  00F7               	movwf	??_fputc
  5870  09EB  3F41               	moviw [1]fsr1
  5871  09EC  00F8               	movwf	??_fputc+1
  5872  09ED  0A76               	incf	fputc@fp,w
  5873  09EE  0086               	movwf	6
  5874  09EF  0187               	clrf	7
  5875  09F0  3F40               	moviw [0]fsr1
  5876  09F1  00F9               	movwf	??_fputc+2
  5877  09F2  3F41               	moviw [1]fsr1
  5878  09F3  00FA               	movwf	??_fputc+3
  5879  09F4  087A               	movf	??_fputc+3,w
  5880  09F5  3A80               	xorlw	128
  5881  09F6  00FB               	movwf	??_fputc+4
  5882  09F7  0878               	movf	??_fputc+1,w
  5883  09F8  3A80               	xorlw	128
  5884  09F9  027B               	subwf	??_fputc+4,w
  5885  09FA  1D03               	skipz
  5886  09FB  29FE               	goto	u2235
  5887  09FC  0877               	movf	??_fputc,w
  5888  09FD  0279               	subwf	??_fputc+2,w
  5889  09FE                     u2235:	
  5890  09FE  1803               	skipnc
  5891  09FF  0008               	return
  5892  0A00                     l3805:	
  5893  0A00  0A76               	incf	fputc@fp,w
  5894  0A01  0086               	movwf	6
  5895  0A02  0187               	clrf	7
  5896  0A03  3001               	movlw	1
  5897  0A04  0781               	addwf	1,f
  5898  0A05  3141               	addfsr 1,1
  5899  0A06  1803               	skipnc
  5900  0A07  0A81               	incf	1,f
  5901  0A08  0008               	return
  5902  0A09                     __end_of_fputc:	
  5903                           
  5904                           	psect	text11
  5905  14AE                     __ptext11:	
  5906 ;; *************** function _putch *****************
  5907 ;; Defined at:
  5908 ;;		line 198 in file "mcc_generated_files/eusart.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  txData          1    wreg     unsigned char 
  5911 ;; Auto vars:     Size  Location     Type
  5912 ;;  txData          1    3[COMMON] unsigned char 
  5913 ;; Return value:  Size  Location     Type
  5914 ;;                  1    wreg      void 
  5915 ;; Registers used:
  5916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5917 ;; Tracked objects:
  5918 ;;		On entry : 0/0
  5919 ;;		On exit  : 0/0
  5920 ;;		Unchanged: 0/0
  5921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5922 ;;      Params:         0       0       0       0       0       0       0       0
  5923 ;;      Locals:         1       0       0       0       0       0       0       0
  5924 ;;      Temps:          0       0       0       0       0       0       0       0
  5925 ;;      Totals:         1       0       0       0       0       0       0       0
  5926 ;;Total ram usage:        1 bytes
  5927 ;; Hardware stack levels used:    1
  5928 ;; Hardware stack levels required when called:    5
  5929 ;; This function calls:
  5930 ;;		_EUSART_Write
  5931 ;; This function is called by:
  5932 ;;		_fputc
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           
  5937                           ;psect for function _putch
  5938  14AE                     _putch:	
  5939                           
  5940                           ;incstack = 0
  5941                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5942                           ;putch@txData stored from wreg
  5943  14AE  00F3               	movwf	putch@txData
  5944                           
  5945                           ;mcc_generated_files/eusart.c: 198: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 199: {;mcc_generated_files/eusart.c: 200:     EUSART_Write(txData);
  5946  14AF  0873               	movf	putch@txData,w
  5947  14B0  3197  2792         	fcall	_EUSART_Write
  5948  14B2  0008               	return
  5949  14B3                     __end_of_putch:	
  5950                           
  5951                           	psect	text12
  5952  1792                     __ptext12:	
  5953 ;; *************** function _EUSART_Write *****************
  5954 ;; Defined at:
  5955 ;;		line 170 in file "mcc_generated_files/eusart.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  txData          1    wreg     unsigned char 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  txData          1    2[COMMON] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  1    wreg      void 
  5962 ;; Registers used:
  5963 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5969 ;;      Params:         0       0       0       0       0       0       0       0
  5970 ;;      Locals:         1       0       0       0       0       0       0       0
  5971 ;;      Temps:          1       0       0       0       0       0       0       0
  5972 ;;      Totals:         2       0       0       0       0       0       0       0
  5973 ;;Total ram usage:        2 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    4
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		_putch
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           
  5984                           ;psect for function _EUSART_Write
  5985  1792                     _EUSART_Write:	
  5986                           
  5987                           ;incstack = 0
  5988                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5989                           ;EUSART_Write@txData stored from wreg
  5990  1792  00F2               	movwf	EUSART_Write@txData
  5991  1793                     l3735:	
  5992                           ;mcc_generated_files/eusart.c: 170: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 171: {;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemai
      +                          ning)
  5993                           
  5994                           
  5995                           ;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemaining)
  5996  1793  0021               	movlb	1	; select bank1
  5997  1794  084E               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  5998  1795  1903               	btfsc	3,2
  5999  1796  2F93               	goto	l3735
  6000                           
  6001                           ;mcc_generated_files/eusart.c: 176:     if(0 == PIE1bits.TXIE)
  6002  1797  1A11               	btfsc	17,4	;volatile
  6003  1798  2F9D               	goto	l742
  6004                           
  6005                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = txData;
  6006  1799  0872               	movf	EUSART_Write@txData,w
  6007  179A  0023               	movlb	3	; select bank3
  6008  179B  009A               	movwf	26	;volatile
  6009                           
  6010                           ;mcc_generated_files/eusart.c: 179:     }
  6011  179C  2FB2               	goto	l3749
  6012  179D                     l742:	
  6013                           ;mcc_generated_files/eusart.c: 180:     else
  6014                           
  6015                           
  6016                           ;mcc_generated_files/eusart.c: 181:     {;mcc_generated_files/eusart.c: 182:         PIE
      +                          1bits.TXIE = 0;
  6017  179D  1211               	bcf	17,4	;volatile
  6018                           
  6019                           ;mcc_generated_files/eusart.c: 183:         eusartTxBuffer[eusartTxHead++] = txData;
  6020  179E  0872               	movf	EUSART_Write@txData,w
  6021  179F  00F1               	movwf	??_EUSART_Write
  6022  17A0  0020               	movlb	0	; select bank0
  6023  17A1  0868               	movf	_eusartTxHead,w
  6024  17A2  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6025  17A3  0086               	movwf	6
  6026  17A4  0187               	clrf	7
  6027  17A5  0871               	movf	??_EUSART_Write,w
  6028  17A6  0081               	movwf	1
  6029  17A7  3001               	movlw	1
  6030  17A8  00F1               	movwf	??_EUSART_Write
  6031  17A9  0871               	movf	??_EUSART_Write,w
  6032  17AA  07E8               	addwf	_eusartTxHead,f	;volatile
  6033                           
  6034                           ;mcc_generated_files/eusart.c: 184:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6035  17AB  3008               	movlw	8
  6036  17AC  0268               	subwf	_eusartTxHead,w	;volatile
  6037  17AD  1803               	btfsc	3,0
  6038                           
  6039                           ;mcc_generated_files/eusart.c: 185:         {;mcc_generated_files/eusart.c: 186:        
      +                               eusartTxHead = 0;
  6040  17AE  01E8               	clrf	_eusartTxHead	;volatile
  6041                           
  6042                           ;mcc_generated_files/eusart.c: 188:         eusartTxBufferRemaining--;
  6043  17AF  3001               	movlw	1
  6044  17B0  0021               	movlb	1	; select bank1
  6045  17B1  02CE               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  6046  17B2                     l3749:	
  6047                           
  6048                           ;mcc_generated_files/eusart.c: 190:     PIE1bits.TXIE = 1;
  6049  17B2  0021               	movlb	1	; select bank1
  6050  17B3  1611               	bsf	17,4	;volatile
  6051  17B4  0008               	return
  6052  17B5                     __end_of_EUSART_Write:	
  6053                           
  6054                           	psect	text13
  6055  09A2                     __ptext13:	
  6056 ;; *************** function _check_data *****************
  6057 ;; Defined at:
  6058 ;;		line 326 in file "main.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;  x               1    wreg     unsigned char 
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  x               1    3[COMMON] unsigned char 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  1    wreg      _Bool 
  6065 ;; Registers used:
  6066 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6072 ;;      Params:         0       0       0       0       0       0       0       0
  6073 ;;      Locals:         1       0       0       0       0       0       0       0
  6074 ;;      Temps:          2       0       0       0       0       0       0       0
  6075 ;;      Totals:         3       0       0       0       0       0       0       0
  6076 ;;Total ram usage:        3 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:    4
  6079 ;; This function calls:
  6080 ;;		Nothing
  6081 ;; This function is called by:
  6082 ;;		_main
  6083 ;; This function uses a non-reentrant model
  6084 ;;
  6085                           
  6086                           
  6087                           ;psect for function _check_data
  6088  09A2                     _check_data:	
  6089                           
  6090                           ;incstack = 0
  6091                           ; Regs used in _check_data: [wreg-fsr0h+status,2+status,0]
  6092                           ;check_data@x stored from wreg
  6093  09A2  00F3               	movwf	check_data@x
  6094                           
  6095                           ;main.c: 326: _Bool check_data(uint8_t x);main.c: 327: {;main.c: 328:     switch(x)
  6096  09A3  29A8               	goto	l5005
  6097  09A4                     l4955:	
  6098  09A4  3001               	movlw	1
  6099  09A5  0008               	return
  6100  09A6                     l4999:	
  6101  09A6  3000               	movlw	0
  6102  09A7  0008               	return
  6103  09A8                     l5005:	
  6104  09A8  0873               	movf	check_data@x,w
  6105  09A9  00F1               	movwf	??_check_data
  6106  09AA  01F2               	clrf	??_check_data+1
  6107                           
  6108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6109                           ; Switch size 1, requested type "simple"
  6110                           ; Number of cases is 1, Range of values is 0 to 0
  6111                           ; switch strategies available:
  6112                           ; Name         Instructions Cycles
  6113                           ; simple_byte            4     3 (average)
  6114                           ; direct_byte            8     6 (fixed)
  6115                           ; jumptable            260     6 (fixed)
  6116                           ;	Chosen strategy is simple_byte
  6117  09AB  0872               	movf	??_check_data+1,w
  6118  09AC  3A00               	xorlw	0	; case 0
  6119  09AD  1903               	skipnz
  6120  09AE  29B0               	goto	l6793
  6121  09AF  29A6               	goto	l4999
  6122  09B0                     l6793:	
  6123                           
  6124                           ; Switch size 1, requested type "simple"
  6125                           ; Number of cases is 11, Range of values is 48 to 85
  6126                           ; switch strategies available:
  6127                           ; Name         Instructions Cycles
  6128                           ; simple_byte           34    18 (average)
  6129                           ; direct_byte           85     9 (fixed)
  6130                           ; jumptable            263     9 (fixed)
  6131                           ;	Chosen strategy is simple_byte
  6132  09B0  0871               	movf	??_check_data,w
  6133  09B1  3A30               	xorlw	48	; case 48
  6134  09B2  1903               	skipnz
  6135  09B3  29A4               	goto	l4955
  6136  09B4  3A01               	xorlw	1	; case 49
  6137  09B5  1903               	skipnz
  6138  09B6  29A4               	goto	l4955
  6139  09B7  3A03               	xorlw	3	; case 50
  6140  09B8  1903               	skipnz
  6141  09B9  29A4               	goto	l4955
  6142  09BA  3A01               	xorlw	1	; case 51
  6143  09BB  1903               	skipnz
  6144  09BC  29A4               	goto	l4955
  6145  09BD  3A07               	xorlw	7	; case 52
  6146  09BE  1903               	skipnz
  6147  09BF  29A4               	goto	l4955
  6148  09C0  3A01               	xorlw	1	; case 53
  6149  09C1  1903               	skipnz
  6150  09C2  29A4               	goto	l4955
  6151  09C3  3A03               	xorlw	3	; case 54
  6152  09C4  1903               	skipnz
  6153  09C5  29A4               	goto	l4955
  6154  09C6  3A01               	xorlw	1	; case 55
  6155  09C7  1903               	skipnz
  6156  09C8  29A4               	goto	l4955
  6157  09C9  3A71               	xorlw	113	; case 70
  6158  09CA  1903               	skipnz
  6159  09CB  29A4               	goto	l4955
  6160  09CC  3A12               	xorlw	18	; case 84
  6161  09CD  1903               	skipnz
  6162  09CE  29A4               	goto	l4955
  6163  09CF  3A01               	xorlw	1	; case 85
  6164  09D0  1903               	skipnz
  6165  09D1  29A4               	goto	l4955
  6166  09D2  29A6               	goto	l4999
  6167  09D3  0008               	return
  6168  09D4                     __end_of_check_data:	
  6169                           
  6170                           	psect	text14
  6171  160D                     __ptext14:	
  6172 ;; *************** function _SYSTEM_Initialize *****************
  6173 ;; Defined at:
  6174 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;		None
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6188 ;;      Params:         0       0       0       0       0       0       0       0
  6189 ;;      Locals:         0       0       0       0       0       0       0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0
  6191 ;;      Totals:         0       0       0       0       0       0       0       0
  6192 ;;Total ram usage:        0 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    9
  6195 ;; This function calls:
  6196 ;;		_EUSART_Initialize
  6197 ;;		_MTOUCH_Initialize
  6198 ;;		_OSCILLATOR_Initialize
  6199 ;;		_PIN_MANAGER_Initialize
  6200 ;;		_TMR2_Initialize
  6201 ;;		_WDT_Initialize
  6202 ;; This function is called by:
  6203 ;;		_main
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           
  6208                           ;psect for function _SYSTEM_Initialize
  6209  160D                     _SYSTEM_Initialize:	
  6210                           
  6211                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  6212                           
  6213                           ;incstack = 0
  6214                           ; Regs used in _SYSTEM_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6215  160D  3197  2755  3196   	fcall	_PIN_MANAGER_Initialize
  6216                           
  6217                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  6218  1610  3194  24DD  3196   	fcall	_OSCILLATOR_Initialize
  6219                           
  6220                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  6221  1613  3194  24A5  3196   	fcall	_WDT_Initialize
  6222                           
  6223                           ;mcc_generated_files/mcc.c: 56:     TMR2_Initialize();
  6224  1616  3195  250F  3196   	fcall	_TMR2_Initialize
  6225                           
  6226                           ;mcc_generated_files/mcc.c: 57:     EUSART_Initialize();
  6227  1619  318A  2277  3196   	fcall	_EUSART_Initialize
  6228                           
  6229                           ;mcc_generated_files/mcc.c: 58:     MTOUCH_Initialize();
  6230  161C  3195  2534         	fcall	_MTOUCH_Initialize
  6231  161E  0008               	return
  6232  161F                     __end_of_SYSTEM_Initialize:	
  6233                           
  6234                           	psect	text15
  6235  14A5                     __ptext15:	
  6236 ;; *************** function _WDT_Initialize *****************
  6237 ;; Defined at:
  6238 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;		None
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;		None
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  1    wreg      void 
  6245 ;; Registers used:
  6246 ;;		wreg
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6252 ;;      Params:         0       0       0       0       0       0       0       0
  6253 ;;      Locals:         0       0       0       0       0       0       0       0
  6254 ;;      Temps:          0       0       0       0       0       0       0       0
  6255 ;;      Totals:         0       0       0       0       0       0       0       0
  6256 ;;Total ram usage:        0 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    4
  6259 ;; This function calls:
  6260 ;;		Nothing
  6261 ;; This function is called by:
  6262 ;;		_SYSTEM_Initialize
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           
  6267                           ;psect for function _WDT_Initialize
  6268  14A5                     _WDT_Initialize:	
  6269                           
  6270                           ;mcc_generated_files/mcc.c: 72:     WDTCON = 0x16;
  6271                           
  6272                           ;incstack = 0
  6273                           ; Regs used in _WDT_Initialize: [wreg]
  6274  14A5  3016               	movlw	22
  6275  14A6  0021               	movlb	1	; select bank1
  6276  14A7  0097               	movwf	23	;volatile
  6277  14A8  0008               	return
  6278  14A9                     __end_of_WDT_Initialize:	
  6279                           
  6280                           	psect	text16
  6281  150F                     __ptext16:	
  6282 ;; *************** function _TMR2_Initialize *****************
  6283 ;; Defined at:
  6284 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;		None
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;		None
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  1    wreg      void 
  6291 ;; Registers used:
  6292 ;;		wreg, status,2
  6293 ;; Tracked objects:
  6294 ;;		On entry : 0/0
  6295 ;;		On exit  : 0/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6298 ;;      Params:         0       0       0       0       0       0       0       0
  6299 ;;      Locals:         0       0       0       0       0       0       0       0
  6300 ;;      Temps:          0       0       0       0       0       0       0       0
  6301 ;;      Totals:         0       0       0       0       0       0       0       0
  6302 ;;Total ram usage:        0 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    4
  6305 ;; This function calls:
  6306 ;;		Nothing
  6307 ;; This function is called by:
  6308 ;;		_SYSTEM_Initialize
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           
  6313                           ;psect for function _TMR2_Initialize
  6314  150F                     _TMR2_Initialize:	
  6315                           
  6316                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
  6317                           
  6318                           ;incstack = 0
  6319                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  6320  150F  30FF               	movlw	255
  6321  1510  0020               	movlb	0	; select bank0
  6322  1511  009B               	movwf	27	;volatile
  6323                           
  6324                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
  6325  1512  019A               	clrf	26	;volatile
  6326                           
  6327                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
  6328  1513  1091               	bcf	17,1	;volatile
  6329                           
  6330                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
  6331  1514  3004               	movlw	4
  6332  1515  009C               	movwf	28	;volatile
  6333  1516  0008               	return
  6334  1517                     __end_of_TMR2_Initialize:	
  6335                           
  6336                           	psect	text17
  6337  1755                     __ptext17:	
  6338 ;; *************** function _PIN_MANAGER_Initialize *****************
  6339 ;; Defined at:
  6340 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;		None
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;		None
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6354 ;;      Params:         0       0       0       0       0       0       0       0
  6355 ;;      Locals:         0       0       0       0       0       0       0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0
  6357 ;;      Totals:         0       0       0       0       0       0       0       0
  6358 ;;Total ram usage:        0 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    4
  6361 ;; This function calls:
  6362 ;;		Nothing
  6363 ;; This function is called by:
  6364 ;;		_SYSTEM_Initialize
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _PIN_MANAGER_Initialize
  6370  1755                     _PIN_MANAGER_Initialize:	
  6371                           
  6372                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x37;
  6373                           
  6374                           ;incstack = 0
  6375                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6376  1755  3037               	movlw	55
  6377  1756  0022               	movlb	2	; select bank2
  6378  1757  008C               	movwf	12	;volatile
  6379                           
  6380                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x70;
  6381  1758  3070               	movlw	112
  6382  1759  008D               	movwf	13	;volatile
  6383                           
  6384                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0xFD;
  6385  175A  30FD               	movlw	253
  6386  175B  008E               	movwf	14	;volatile
  6387                           
  6388                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x08;
  6389  175C  3008               	movlw	8
  6390  175D  0021               	movlb	1	; select bank1
  6391  175E  008C               	movwf	12	;volatile
  6392                           
  6393                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x60;
  6394  175F  3060               	movlw	96
  6395  1760  008D               	movwf	13	;volatile
  6396                           
  6397                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x02;
  6398  1761  3002               	movlw	2
  6399  1762  008E               	movwf	14	;volatile
  6400                           
  6401                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xFF;
  6402  1763  30FF               	movlw	255
  6403  1764  0023               	movlb	3	; select bank3
  6404  1765  008E               	movwf	14	;volatile
  6405                           
  6406                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  6407  1766  3050               	movlw	80
  6408  1767  008D               	movwf	13	;volatile
  6409                           
  6410                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  6411  1768  3037               	movlw	55
  6412  1769  008C               	movwf	12	;volatile
  6413                           
  6414                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  6415  176A  0024               	movlb	4	; select bank4
  6416  176B  018D               	clrf	13	;volatile
  6417                           
  6418                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  6419  176C  018C               	clrf	12	;volatile
  6420                           
  6421                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  6422  176D  0021               	movlb	1	; select bank1
  6423  176E  1795               	bsf	21,7	;volatile
  6424                           
  6425                           ;mcc_generated_files/pin_manager.c: 90:     APFCON = 0x00;
  6426  176F  0022               	movlb	2	; select bank2
  6427  1770  019D               	clrf	29	;volatile
  6428  1771  0008               	return
  6429  1772                     __end_of_PIN_MANAGER_Initialize:	
  6430                           
  6431                           	psect	text18
  6432  14DD                     __ptext18:	
  6433 ;; *************** function _OSCILLATOR_Initialize *****************
  6434 ;; Defined at:
  6435 ;;		line 61 in file "mcc_generated_files/mcc.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;		None
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;		None
  6440 ;; Return value:  Size  Location     Type
  6441 ;;                  1    wreg      void 
  6442 ;; Registers used:
  6443 ;;		wreg, status,2
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6449 ;;      Params:         0       0       0       0       0       0       0       0
  6450 ;;      Locals:         0       0       0       0       0       0       0       0
  6451 ;;      Temps:          0       0       0       0       0       0       0       0
  6452 ;;      Totals:         0       0       0       0       0       0       0       0
  6453 ;;Total ram usage:        0 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    4
  6456 ;; This function calls:
  6457 ;;		Nothing
  6458 ;; This function is called by:
  6459 ;;		_SYSTEM_Initialize
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           
  6464                           ;psect for function _OSCILLATOR_Initialize
  6465  14DD                     _OSCILLATOR_Initialize:	
  6466                           
  6467                           ;mcc_generated_files/mcc.c: 64:     OSCCON = 0xF0;
  6468                           
  6469                           ;incstack = 0
  6470                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6471  14DD  30F0               	movlw	240
  6472  14DE  0021               	movlb	1	; select bank1
  6473  14DF  0099               	movwf	25	;volatile
  6474                           
  6475                           ;mcc_generated_files/mcc.c: 66:     BORCON = 0x00;
  6476  14E0  0022               	movlb	2	; select bank2
  6477  14E1  0196               	clrf	22	;volatile
  6478  14E2  0008               	return
  6479  14E3                     __end_of_OSCILLATOR_Initialize:	
  6480                           
  6481                           	psect	text19
  6482  1534                     __ptext19:	
  6483 ;; *************** function _MTOUCH_Initialize *****************
  6484 ;; Defined at:
  6485 ;;		line 80 in file "mcc_generated_files/mtouch/mtouch.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;		None
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      void 
  6492 ;; Registers used:
  6493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6499 ;;      Params:         0       0       0       0       0       0       0       0
  6500 ;;      Locals:         0       0       0       0       0       0       0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0       0
  6502 ;;      Totals:         0       0       0       0       0       0       0       0
  6503 ;;Total ram usage:        0 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    8
  6506 ;; This function calls:
  6507 ;;		_MTOUCH_Button_InitializeAll
  6508 ;;		_MTOUCH_Sensor_InitializeAll
  6509 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6510 ;;		_MTOUCH_Sensor_Scan_Initialize
  6511 ;; This function is called by:
  6512 ;;		_SYSTEM_Initialize
  6513 ;; This function uses a non-reentrant model
  6514 ;;
  6515                           
  6516                           
  6517                           ;psect for function _MTOUCH_Initialize
  6518  1534                     _MTOUCH_Initialize:	
  6519                           
  6520                           ;mcc_generated_files/mtouch/mtouch.c: 82:     MTOUCH_Sensor_InitializeAll();
  6521                           
  6522                           ;incstack = 0
  6523                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6524  1534  3195  256A  3195   	fcall	_MTOUCH_Sensor_InitializeAll
  6525                           
  6526                           ;mcc_generated_files/mtouch/mtouch.c: 83:     MTOUCH_Button_InitializeAll();
  6527  1537  3197  2739  3195   	fcall	_MTOUCH_Button_InitializeAll
  6528                           
  6529                           ;mcc_generated_files/mtouch/mtouch.c: 84:     MTOUCH_Sensor_Sampled_ResetAll();
  6530  153A  3196  261F  3195   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6531                           
  6532                           ;mcc_generated_files/mtouch/mtouch.c: 85:     MTOUCH_Sensor_Scan_Initialize();
  6533  153D  3195  25A6         	fcall	_MTOUCH_Sensor_Scan_Initialize
  6534  153F  0008               	return
  6535  1540                     __end_of_MTOUCH_Initialize:	
  6536                           
  6537                           	psect	text20
  6538  156A                     __ptext20:	
  6539 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6540 ;; Defined at:
  6541 ;;		line 223 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;		None
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  sensor          1   10[COMMON] enum E2854
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      void 
  6548 ;; Registers used:
  6549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6555 ;;      Params:         0       0       0       0       0       0       0       0
  6556 ;;      Locals:         1       0       0       0       0       0       0       0
  6557 ;;      Temps:          1       0       0       0       0       0       0       0
  6558 ;;      Totals:         2       0       0       0       0       0       0       0
  6559 ;;Total ram usage:        2 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    7
  6562 ;; This function calls:
  6563 ;;		_MTOUCH_Sensor_Initialize
  6564 ;; This function is called by:
  6565 ;;		_MTOUCH_Initialize
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           
  6570                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6571  156A                     _MTOUCH_Sensor_InitializeAll:	
  6572                           
  6573                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 225:     enum mtouch_sensor_names sensor;;m
      +                          cc_generated_files/mtouch/mtouch_sensor.c: 227:     for (sensor = 0; sensor < 3u; sensor
      +                          ++)
  6574                           
  6575                           ;incstack = 0
  6576                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6577  156A  01FA               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  6578  156B                     l6121:	
  6579                           
  6580                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 228:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 229:         MTOUCH_Sensor_Initialize(sensor);
  6581  156B  087A               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  6582  156C  3196  2632  3195   	fcall	_MTOUCH_Sensor_Initialize
  6583                           
  6584                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 230:     }
  6585  156F  3001               	movlw	1
  6586  1570  00F9               	movwf	??_MTOUCH_Sensor_InitializeAll
  6587  1571  0879               	movf	??_MTOUCH_Sensor_InitializeAll,w
  6588  1572  07FA               	addwf	MTOUCH_Sensor_InitializeAll@sensor,f
  6589  1573  3003               	movlw	3
  6590  1574  027A               	subwf	MTOUCH_Sensor_InitializeAll@sensor,w
  6591  1575  1803               	btfsc	3,0
  6592  1576  0008               	return
  6593  1577  2D6B               	goto	l6121
  6594  1578                     __end_of_MTOUCH_Sensor_InitializeAll:	
  6595                           
  6596                           	psect	text21
  6597  1632                     __ptext21:	
  6598 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  6599 ;; Defined at:
  6600 ;;		line 208 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6601 ;; Parameters:    Size  Location     Type
  6602 ;;  sensor          1    wreg     enum E2854
  6603 ;; Auto vars:     Size  Location     Type
  6604 ;;  sensor          1    8[COMMON] enum E2854
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  1    wreg      enum E2858
  6607 ;; Registers used:
  6608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6614 ;;      Params:         0       0       0       0       0       0       0       0
  6615 ;;      Locals:         1       0       0       0       0       0       0       0
  6616 ;;      Temps:          1       0       0       0       0       0       0       0
  6617 ;;      Totals:         2       0       0       0       0       0       0       0
  6618 ;;Total ram usage:        2 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    6
  6621 ;; This function calls:
  6622 ;;		_MTOUCH_Sensor_Calibrate
  6623 ;;		_MTOUCH_Sensor_Enable
  6624 ;;		_Sensor_Sampled_Reset
  6625 ;;		___bmul
  6626 ;; This function is called by:
  6627 ;;		_MTOUCH_Sensor_InitializeAll
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           
  6632                           ;psect for function _MTOUCH_Sensor_Initialize
  6633  1632                     _MTOUCH_Sensor_Initialize:	
  6634                           
  6635                           ;incstack = 0
  6636                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6637                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  6638  1632  00F8               	movwf	MTOUCH_Sensor_Initialize@sensor
  6639                           
  6640                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 208: enum mtouch_sensor_error MTOUCH_Sensor
      +                          _Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c:
      +                           209: {;mcc_generated_files/mtouch/mtouch_sensor.c: 211:     MTOUCH_Sensor_Enable(sensor
      +                          );
  6641  1633  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6642  1634  3195  25FB  3196   	fcall	_MTOUCH_Sensor_Enable
  6643                           
  6644                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 212:     MTOUCH_Sensor_Calibrate(sensor);
  6645  1637  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6646  1638  3195  25E9  3196   	fcall	_MTOUCH_Sensor_Calibrate
  6647                           
  6648                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 213:     Sensor_Sampled_Reset(&mtouch_senso
      +                          r[sensor]);
  6649  163B  3009               	movlw	9
  6650  163C  00F7               	movwf	??_MTOUCH_Sensor_Initialize
  6651  163D  0877               	movf	??_MTOUCH_Sensor_Initialize,w
  6652  163E  00F1               	movwf	___bmul@multiplicand
  6653  163F  0878               	movf	MTOUCH_Sensor_Initialize@sensor,w
  6654  1640  3195  25B6  3196   	fcall	___bmul
  6655  1643  3E50               	addlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  6656  1644  3195  2507         	fcall	_Sensor_Sampled_Reset
  6657  1646  0008               	return
  6658  1647                     __end_of_MTOUCH_Sensor_Initialize:	
  6659                           
  6660                           	psect	text22
  6661  15FB                     __ptext22:	
  6662 ;; *************** function _MTOUCH_Sensor_Enable *****************
  6663 ;; Defined at:
  6664 ;;		line 841 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  6665 ;; Parameters:    Size  Location     Type
  6666 ;;  sensor          1    wreg     enum E2854
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  sensor          1    6[COMMON] enum E2854
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      void 
  6671 ;; Registers used:
  6672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6678 ;;      Params:         0       0       0       0       0       0       0       0
  6679 ;;      Locals:         1       0       0       0       0       0       0       0
  6680 ;;      Temps:          1       0       0       0       0       0       0       0
  6681 ;;      Totals:         2       0       0       0       0       0       0       0
  6682 ;;Total ram usage:        2 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    5
  6685 ;; This function calls:
  6686 ;;		___bmul
  6687 ;; This function is called by:
  6688 ;;		_MTOUCH_Sensor_Initialize
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           
  6693                           ;psect for function _MTOUCH_Sensor_Enable
  6694  15FB                     _MTOUCH_Sensor_Enable:	
  6695                           
  6696                           ;incstack = 0
  6697                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6698                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  6699  15FB  00F6               	movwf	MTOUCH_Sensor_Enable@sensor
  6700                           
  6701                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 841: void MTOUCH_Sensor_Enable(enum mtouch_
      +                          sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 842: {;mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 843:     if(sensor < 3u)
  6702  15FC  3003               	movlw	3
  6703  15FD  0276               	subwf	MTOUCH_Sensor_Enable@sensor,w
  6704  15FE  1803               	skipnc
  6705  15FF  0008               	return
  6706                           
  6707                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 844:         mtouch_sensor[sensor].enabled 
      +                          = 1;
  6708  1600  3009               	movlw	9
  6709  1601  00F5               	movwf	??_MTOUCH_Sensor_Enable
  6710  1602  0875               	movf	??_MTOUCH_Sensor_Enable,w
  6711  1603  00F1               	movwf	___bmul@multiplicand
  6712  1604  0876               	movf	MTOUCH_Sensor_Enable@sensor,w
  6713  1605  3195  25B6         	fcall	___bmul
  6714  1607  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
  6715  1608  0086               	movwf	6
  6716  1609  3001               	movlw	1	; select bank2/3
  6717  160A  0087               	movwf	7
  6718  160B  1581               	bsf	1,3
  6719  160C  0008               	return
  6720  160D                     __end_of_MTOUCH_Sensor_Enable:	
  6721                           
  6722                           	psect	text23
  6723  1739                     __ptext23:	
  6724 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  6725 ;; Defined at:
  6726 ;;		line 171 in file "mcc_generated_files/mtouch/mtouch_button.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  button          1    0[BANK0 ] enum E3069
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      void 
  6733 ;; Registers used:
  6734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6740 ;;      Params:         0       0       0       0       0       0       0       0
  6741 ;;      Locals:         0       1       0       0       0       0       0       0
  6742 ;;      Temps:          1       0       0       0       0       0       0       0
  6743 ;;      Totals:         1       1       0       0       0       0       0       0
  6744 ;;Total ram usage:        2 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    7
  6747 ;; This function calls:
  6748 ;;		_MTOUCH_Button_Initialize
  6749 ;;		_memcpy
  6750 ;; This function is called by:
  6751 ;;		_MTOUCH_Initialize
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _MTOUCH_Button_InitializeAll
  6757  1739                     _MTOUCH_Button_InitializeAll:	
  6758                           
  6759                           ;mcc_generated_files/mtouch/mtouch_button.c: 173:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 175:     memcpy(mtouch_button,mtouch_button_i
      +                          nit,sizeof(mtouch_button_init));
  6760                           
  6761                           ;incstack = 0
  6762                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6763  1739  3000               	movlw	low (_mtouch_button_init| (0+32768))
  6764  173A  00F1               	movwf	memcpy@s1
  6765  173B  3090               	movlw	high (_mtouch_button_init| (0+32768))
  6766  173C  00F2               	movwf	memcpy@s1+1
  6767  173D  3030               	movlw	48
  6768  173E  00F3               	movwf	memcpy@n
  6769  173F  3000               	movlw	0
  6770  1740  00F4               	movwf	memcpy@n+1
  6771  1741  3020               	movlw	(low (_mtouch_button| (0+256)))& (0+255)
  6772  1742  3188  20BB  3197   	fcall	_memcpy
  6773                           
  6774                           ;mcc_generated_files/mtouch/mtouch_button.c: 177:     for (button = 0; button < 3u; butt
      +                          on++)
  6775  1745  0020               	movlb	0	; select bank0
  6776  1746  01A0               	clrf	MTOUCH_Button_InitializeAll@button
  6777  1747                     l6135:	
  6778                           
  6779                           ;mcc_generated_files/mtouch/mtouch_button.c: 178:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 179:         MTOUCH_Button_Initialize(button);
  6780  1747  0820               	movf	MTOUCH_Button_InitializeAll@button,w
  6781  1748  318A  2209  3197   	fcall	_MTOUCH_Button_Initialize
  6782                           
  6783                           ;mcc_generated_files/mtouch/mtouch_button.c: 180:     }
  6784  174B  3001               	movlw	1
  6785  174C  00FB               	movwf	??_MTOUCH_Button_InitializeAll
  6786  174D  087B               	movf	??_MTOUCH_Button_InitializeAll,w
  6787  174E  0020               	movlb	0	; select bank0
  6788  174F  07A0               	addwf	MTOUCH_Button_InitializeAll@button,f
  6789  1750  3003               	movlw	3
  6790  1751  0220               	subwf	MTOUCH_Button_InitializeAll@button,w
  6791  1752  1803               	btfsc	3,0
  6792  1753  0008               	return
  6793  1754  2F47               	goto	l6135
  6794  1755                     __end_of_MTOUCH_Button_InitializeAll:	
  6795                           
  6796                           	psect	text24
  6797  08BB                     __ptext24:	
  6798 ;; *************** function _memcpy *****************
  6799 ;; Defined at:
  6800 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memcpy.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;  d1              1    wreg     PTR void 
  6803 ;;		 -> mtouch_button(48), 
  6804 ;;  s1              2    1[COMMON] PTR const void 
  6805 ;;		 -> mtouch_button_init(48), 
  6806 ;;  n               2    3[COMMON] unsigned int 
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  d1              1    9[COMMON] PTR void 
  6809 ;;		 -> mtouch_button(48), 
  6810 ;;  s               2    7[COMMON] PTR const unsigned char 
  6811 ;;		 -> mtouch_button_init(48), 
  6812 ;;  d               1   10[COMMON] PTR unsigned char 
  6813 ;;		 -> mtouch_button(48), 
  6814 ;;  tmp             1    6[COMMON] unsigned char 
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  1    wreg      PTR void 
  6817 ;; Registers used:
  6818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6824 ;;      Params:         4       0       0       0       0       0       0       0
  6825 ;;      Locals:         5       0       0       0       0       0       0       0
  6826 ;;      Temps:          1       0       0       0       0       0       0       0
  6827 ;;      Totals:        10       0       0       0       0       0       0       0
  6828 ;;Total ram usage:       10 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    4
  6831 ;; This function calls:
  6832 ;;		Nothing
  6833 ;; This function is called by:
  6834 ;;		_MTOUCH_Button_InitializeAll
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           
  6839                           ;psect for function _memcpy
  6840  08BB                     _memcpy:	
  6841                           
  6842                           ;incstack = 0
  6843                           ; Regs used in _memcpy: [wreg-fsr1h+status,2+status,0+pclath]
  6844                           ;memcpy@d1 stored from wreg
  6845  08BB  00F9               	movwf	memcpy@d1
  6846  08BC  0872               	movf	memcpy@s1+1,w
  6847  08BD  00F8               	movwf	memcpy@s+1
  6848  08BE  0871               	movf	memcpy@s1,w
  6849  08BF  00F7               	movwf	memcpy@s
  6850  08C0  0879               	movf	memcpy@d1,w
  6851  08C1  00F5               	movwf	??_memcpy
  6852  08C2  0875               	movf	??_memcpy,w
  6853  08C3  00FA               	movwf	memcpy@d
  6854  08C4                     l6019:	
  6855  08C4  3001               	movlw	1
  6856  08C5  02F3               	subwf	memcpy@n,f
  6857  08C6  3000               	movlw	0
  6858  08C7  3BF4               	subwfb	memcpy@n+1,f
  6859  08C8  0A73               	incf	memcpy@n,w
  6860  08C9  1903               	btfsc	3,2
  6861  08CA  0A74               	incf	memcpy@n+1,w
  6862  08CB  1903               	btfsc	3,2
  6863  08CC  0008               	return
  6864  08CD  0877               	movf	memcpy@s,w
  6865  08CE  0084               	movwf	4
  6866  08CF  0878               	movf	memcpy@s+1,w
  6867  08D0  0085               	movwf	5
  6868  08D1  0800               	movf	0,w	;code access
  6869  08D2  00F5               	movwf	??_memcpy
  6870  08D3  0875               	movf	??_memcpy,w
  6871  08D4  00F6               	movwf	memcpy@tmp
  6872  08D5  3001               	movlw	1
  6873  08D6  07F7               	addwf	memcpy@s,f
  6874  08D7  3000               	movlw	0
  6875  08D8  3DF8               	addwfc	memcpy@s+1,f
  6876  08D9  0876               	movf	memcpy@tmp,w
  6877  08DA  00F5               	movwf	??_memcpy
  6878  08DB  087A               	movf	memcpy@d,w
  6879  08DC  0086               	movwf	6
  6880  08DD  3001               	movlw	1	; select bank2/3
  6881  08DE  0087               	movwf	7
  6882  08DF  0875               	movf	??_memcpy,w
  6883  08E0  0081               	movwf	1
  6884  08E1  3001               	movlw	1
  6885  08E2  00F5               	movwf	??_memcpy
  6886  08E3  0875               	movf	??_memcpy,w
  6887  08E4  07FA               	addwf	memcpy@d,f
  6888  08E5  28C4               	goto	l6019
  6889  08E6                     __end_of_memcpy:	
  6890                           
  6891                           	psect	text25
  6892  0A77                     __ptext25:	
  6893 ;; *************** function _EUSART_Initialize *****************
  6894 ;; Defined at:
  6895 ;;		line 85 in file "mcc_generated_files/eusart.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;		None
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;		None
  6900 ;; Return value:  Size  Location     Type
  6901 ;;                  1    wreg      void 
  6902 ;; Registers used:
  6903 ;;		wreg, status,2, status,0, pclath, cstack
  6904 ;; Tracked objects:
  6905 ;;		On entry : 0/0
  6906 ;;		On exit  : 0/0
  6907 ;;		Unchanged: 0/0
  6908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6909 ;;      Params:         0       0       0       0       0       0       0       0
  6910 ;;      Locals:         0       0       0       0       0       0       0       0
  6911 ;;      Temps:          1       0       0       0       0       0       0       0
  6912 ;;      Totals:         1       0       0       0       0       0       0       0
  6913 ;;Total ram usage:        1 bytes
  6914 ;; Hardware stack levels used:    1
  6915 ;; Hardware stack levels required when called:    5
  6916 ;; This function calls:
  6917 ;;		_EUSART_SetErrorHandler
  6918 ;;		_EUSART_SetFramingErrorHandler
  6919 ;;		_EUSART_SetOverrunErrorHandler
  6920 ;;		_EUSART_SetRxInterruptHandler
  6921 ;;		_EUSART_SetTxInterruptHandler
  6922 ;; This function is called by:
  6923 ;;		_SYSTEM_Initialize
  6924 ;; This function uses a non-reentrant model
  6925 ;;
  6926                           
  6927                           
  6928                           ;psect for function _EUSART_Initialize
  6929  0A77                     _EUSART_Initialize:	
  6930                           
  6931                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  6932                           
  6933                           ;incstack = 0
  6934                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6935  0A77  0021               	movlb	1	; select bank1
  6936  0A78  1291               	bcf	17,5	;volatile
  6937                           
  6938                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  6939  0A79  3070               	movlw	low _EUSART_Receive_ISR
  6940  0A7A  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6941  0A7B  3009               	movlw	high _EUSART_Receive_ISR
  6942  0A7C  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6943  0A7D  3194  24D1  318A   	fcall	_EUSART_SetRxInterruptHandler
  6944                           
  6945                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  6946  0A80  0021               	movlb	1	; select bank1
  6947  0A81  1211               	bcf	17,4	;volatile
  6948                           
  6949                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  6950  0A82  3001               	movlw	low _EUSART_Transmit_ISR
  6951  0A83  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  6952  0A84  3008               	movlw	high _EUSART_Transmit_ISR
  6953  0A85  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  6954  0A86  3194  24D7  318A   	fcall	_EUSART_SetTxInterruptHandler
  6955                           
  6956                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x0A;
  6957  0A89  300A               	movlw	10
  6958  0A8A  0023               	movlb	3	; select bank3
  6959  0A8B  009F               	movwf	31	;volatile
  6960                           
  6961                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x90;
  6962  0A8C  3090               	movlw	144
  6963  0A8D  009D               	movwf	29	;volatile
  6964                           
  6965                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  6966  0A8E  3024               	movlw	36
  6967  0A8F  009E               	movwf	30	;volatile
  6968                           
  6969                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0x40;
  6970  0A90  3040               	movlw	64
  6971  0A91  009B               	movwf	27	;volatile
  6972                           
  6973                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x03;
  6974  0A92  3003               	movlw	3
  6975  0A93  009C               	movwf	28	;volatile
  6976                           
  6977                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6978  0A94  3075               	movlw	low _EUSART_DefaultFramingErrorHandler
  6979  0A95  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6980  0A96  3014               	movlw	high _EUSART_DefaultFramingErrorHandler
  6981  0A97  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6982  0A98  3194  24C5  318A   	fcall	_EUSART_SetFramingErrorHandler
  6983                           
  6984                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6985  0A9B  3089               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6986  0A9C  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6987  0A9D  3014               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6988  0A9E  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6989  0A9F  3194  24CB  318A   	fcall	_EUSART_SetOverrunErrorHandler
  6990                           
  6991                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6992  0AA2  3077               	movlw	low _EUSART_DefaultErrorHandler
  6993  0AA3  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  6994  0AA4  3014               	movlw	high _EUSART_DefaultErrorHandler
  6995  0AA5  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6996  0AA6  3194  24BF         	fcall	_EUSART_SetErrorHandler
  6997                           
  6998                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  6999  0AA8  0020               	movlb	0	; select bank0
  7000  0AA9  01E4               	clrf	_eusartRxLastError	;volatile
  7001                           
  7002                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  7003  0AAA  01E8               	clrf	_eusartTxHead	;volatile
  7004                           
  7005                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  7006  0AAB  01E7               	clrf	_eusartTxTail	;volatile
  7007                           
  7008                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  7009  0AAC  3008               	movlw	8
  7010  0AAD  00F3               	movwf	??_EUSART_Initialize
  7011  0AAE  0873               	movf	??_EUSART_Initialize,w
  7012  0AAF  0021               	movlb	1	; select bank1
  7013  0AB0  00CE               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  7014                           
  7015                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  7016  0AB1  01FC               	clrf	_eusartRxHead	;volatile
  7017                           
  7018                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  7019  0AB2  0020               	movlb	0	; select bank0
  7020  0AB3  01E6               	clrf	_eusartRxTail	;volatile
  7021                           
  7022                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  7023  0AB4  01E5               	clrf	_eusartRxCount	;volatile
  7024                           
  7025                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  7026  0AB5  0021               	movlb	1	; select bank1
  7027  0AB6  1691               	bsf	17,5	;volatile
  7028  0AB7  0008               	return
  7029  0AB8                     __end_of_EUSART_Initialize:	
  7030                           
  7031                           	psect	text26
  7032  14D7                     __ptext26:	
  7033 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  7034 ;; Defined at:
  7035 ;;		line 282 in file "mcc_generated_files/eusart.c"
  7036 ;; Parameters:    Size  Location     Type
  7037 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7038 ;;		 -> EUSART_Transmit_ISR(1), 
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;		None
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  1    wreg      void 
  7043 ;; Registers used:
  7044 ;;		wreg
  7045 ;; Tracked objects:
  7046 ;;		On entry : 0/0
  7047 ;;		On exit  : 0/0
  7048 ;;		Unchanged: 0/0
  7049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7050 ;;      Params:         2       0       0       0       0       0       0       0
  7051 ;;      Locals:         0       0       0       0       0       0       0       0
  7052 ;;      Temps:          0       0       0       0       0       0       0       0
  7053 ;;      Totals:         2       0       0       0       0       0       0       0
  7054 ;;Total ram usage:        2 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:    4
  7057 ;; This function calls:
  7058 ;;		Nothing
  7059 ;; This function is called by:
  7060 ;;		_EUSART_Initialize
  7061 ;; This function uses a non-reentrant model
  7062 ;;
  7063                           
  7064                           
  7065                           ;psect for function _EUSART_SetTxInterruptHandler
  7066  14D7                     _EUSART_SetTxInterruptHandler:	
  7067                           
  7068                           ;mcc_generated_files/eusart.c: 283:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  7069                           
  7070                           ;incstack = 0
  7071                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  7072  14D7  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  7073  14D8  0021               	movlb	1	; select bank1
  7074  14D9  00CD               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  7075  14DA  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  7076  14DB  00CC               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  7077  14DC  0008               	return
  7078  14DD                     __end_of_EUSART_SetTxInterruptHandler:	
  7079                           
  7080                           	psect	text27
  7081  14D1                     __ptext27:	
  7082 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7083 ;; Defined at:
  7084 ;;		line 286 in file "mcc_generated_files/eusart.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7087 ;;		 -> EUSART_Receive_ISR(1), 
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;		None
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  1    wreg      void 
  7092 ;; Registers used:
  7093 ;;		wreg
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7099 ;;      Params:         2       0       0       0       0       0       0       0
  7100 ;;      Locals:         0       0       0       0       0       0       0       0
  7101 ;;      Temps:          0       0       0       0       0       0       0       0
  7102 ;;      Totals:         2       0       0       0       0       0       0       0
  7103 ;;Total ram usage:        2 bytes
  7104 ;; Hardware stack levels used:    1
  7105 ;; Hardware stack levels required when called:    4
  7106 ;; This function calls:
  7107 ;;		Nothing
  7108 ;; This function is called by:
  7109 ;;		_EUSART_Initialize
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           
  7114                           ;psect for function _EUSART_SetRxInterruptHandler
  7115  14D1                     _EUSART_SetRxInterruptHandler:	
  7116                           
  7117                           ;mcc_generated_files/eusart.c: 287:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7118                           
  7119                           ;incstack = 0
  7120                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7121  14D1  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  7122  14D2  0021               	movlb	1	; select bank1
  7123  14D3  00CB               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  7124  14D4  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  7125  14D5  00CA               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  7126  14D6  0008               	return
  7127  14D7                     __end_of_EUSART_SetRxInterruptHandler:	
  7128                           
  7129                           	psect	text28
  7130  14CB                     __ptext28:	
  7131 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7132 ;; Defined at:
  7133 ;;		line 274 in file "mcc_generated_files/eusart.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7136 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;		None
  7139 ;; Return value:  Size  Location     Type
  7140 ;;                  1    wreg      void 
  7141 ;; Registers used:
  7142 ;;		wreg
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7148 ;;      Params:         2       0       0       0       0       0       0       0
  7149 ;;      Locals:         0       0       0       0       0       0       0       0
  7150 ;;      Temps:          0       0       0       0       0       0       0       0
  7151 ;;      Totals:         2       0       0       0       0       0       0       0
  7152 ;;Total ram usage:        2 bytes
  7153 ;; Hardware stack levels used:    1
  7154 ;; Hardware stack levels required when called:    4
  7155 ;; This function calls:
  7156 ;;		Nothing
  7157 ;; This function is called by:
  7158 ;;		_EUSART_Initialize
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           
  7163                           ;psect for function _EUSART_SetOverrunErrorHandler
  7164  14CB                     _EUSART_SetOverrunErrorHandler:	
  7165                           
  7166                           ;mcc_generated_files/eusart.c: 275:     EUSART_OverrunErrorHandler = interruptHandler;
  7167                           
  7168                           ;incstack = 0
  7169                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7170  14CB  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  7171  14CC  0021               	movlb	1	; select bank1
  7172  14CD  00C7               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  7173  14CE  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  7174  14CF  00C6               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  7175  14D0  0008               	return
  7176  14D1                     __end_of_EUSART_SetOverrunErrorHandler:	
  7177                           
  7178                           	psect	text29
  7179  14C5                     __ptext29:	
  7180 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7181 ;; Defined at:
  7182 ;;		line 270 in file "mcc_generated_files/eusart.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7185 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;		None
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  1    wreg      void 
  7190 ;; Registers used:
  7191 ;;		wreg
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7197 ;;      Params:         2       0       0       0       0       0       0       0
  7198 ;;      Locals:         0       0       0       0       0       0       0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0       0
  7200 ;;      Totals:         2       0       0       0       0       0       0       0
  7201 ;;Total ram usage:        2 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:    4
  7204 ;; This function calls:
  7205 ;;		Nothing
  7206 ;; This function is called by:
  7207 ;;		_EUSART_Initialize
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           
  7212                           ;psect for function _EUSART_SetFramingErrorHandler
  7213  14C5                     _EUSART_SetFramingErrorHandler:	
  7214                           
  7215                           ;mcc_generated_files/eusart.c: 271:     EUSART_FramingErrorHandler = interruptHandler;
  7216                           
  7217                           ;incstack = 0
  7218                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7219  14C5  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  7220  14C6  0021               	movlb	1	; select bank1
  7221  14C7  00C9               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  7222  14C8  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  7223  14C9  00C8               	movwf	_EUSART_FramingErrorHandler^(0+128)
  7224  14CA  0008               	return
  7225  14CB                     __end_of_EUSART_SetFramingErrorHandler:	
  7226                           
  7227                           	psect	text30
  7228  14BF                     __ptext30:	
  7229 ;; *************** function _EUSART_SetErrorHandler *****************
  7230 ;; Defined at:
  7231 ;;		line 278 in file "mcc_generated_files/eusart.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  7234 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      void 
  7239 ;; Registers used:
  7240 ;;		wreg
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7246 ;;      Params:         2       0       0       0       0       0       0       0
  7247 ;;      Locals:         0       0       0       0       0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0       0
  7249 ;;      Totals:         2       0       0       0       0       0       0       0
  7250 ;;Total ram usage:        2 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    4
  7253 ;; This function calls:
  7254 ;;		Nothing
  7255 ;; This function is called by:
  7256 ;;		_EUSART_Initialize
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           
  7261                           ;psect for function _EUSART_SetErrorHandler
  7262  14BF                     _EUSART_SetErrorHandler:	
  7263                           
  7264                           ;mcc_generated_files/eusart.c: 279:     EUSART_ErrorHandler = interruptHandler;
  7265                           
  7266                           ;incstack = 0
  7267                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7268  14BF  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  7269  14C0  0021               	movlb	1	; select bank1
  7270  14C1  00C5               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  7271  14C2  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  7272  14C3  00C4               	movwf	_EUSART_ErrorHandler^(0+128)
  7273  14C4  0008               	return
  7274  14C5                     __end_of_EUSART_SetErrorHandler:	
  7275                           
  7276                           	psect	text31
  7277  171D                     __ptext31:	
  7278 ;; *************** function _MTOUCH_Service_Mainloop *****************
  7279 ;; Defined at:
  7280 ;;		line 95 in file "mcc_generated_files/mtouch/mtouch.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;		None
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;		None
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  1    wreg      _Bool 
  7287 ;; Registers used:
  7288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7294 ;;      Params:         0       0       0       0       0       0       0       0
  7295 ;;      Locals:         0       0       0       0       0       0       0       0
  7296 ;;      Temps:          0       1       0       0       0       0       0       0
  7297 ;;      Totals:         0       1       0       0       0       0       0       0
  7298 ;;Total ram usage:        1 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:   11
  7301 ;; This function calls:
  7302 ;;		_MTOUCH_Button_ServiceAll
  7303 ;;		_MTOUCH_Sensor_SampleAll
  7304 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7305 ;;		_MTOUCH_Tick
  7306 ;;		_MTOUCH_needReburst
  7307 ;; This function is called by:
  7308 ;;		_main
  7309 ;;		_touch_example
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           
  7314                           ;psect for function _MTOUCH_Service_Mainloop
  7315  171D                     _MTOUCH_Service_Mainloop:	
  7316                           
  7317                           ;mcc_generated_files/mtouch/mtouch.c: 99:     mtouch_time_toScan = 1;
  7318                           
  7319                           ;incstack = 0
  7320                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7321  171D  0020               	movlb	0	; select bank0
  7322  171E  01EB               	clrf	_mtouch_time_toScan
  7323  171F  0AEB               	incf	_mtouch_time_toScan,f
  7324                           
  7325                           ;mcc_generated_files/mtouch/mtouch.c: 102:     {;mcc_generated_files/mtouch/mtouch.c: 10
      +                          3:         if(MTOUCH_Sensor_SampleAll() == 0)
  7326                           
  7327                           ;mcc_generated_files/mtouch/mtouch.c: 101:     if(mtouch_time_toScan)
  7328  1720  3196  265D  3197   	fcall	_MTOUCH_Sensor_SampleAll
  7329  1723  3A00               	xorlw	0
  7330  1724  1D03               	skipz
  7331  1725  2F28               	goto	l6263
  7332                           
  7333                           ;mcc_generated_files/mtouch/mtouch.c: 104:         return 0;
  7334  1726  3000               	movlw	0
  7335  1727  0008               	return
  7336  1728                     l6263:	
  7337                           
  7338                           ;mcc_generated_files/mtouch/mtouch.c: 107:             MTOUCH_Button_ServiceAll();
  7339  1728  3195  2596  3197   	fcall	_MTOUCH_Button_ServiceAll
  7340                           
  7341                           ;mcc_generated_files/mtouch/mtouch.c: 108:             mtouch_time_toScan = MTOUCH_needR
      +                          eburst();
  7342  172B  3180  2002  3197   	fcall	_MTOUCH_needReburst
  7343  172E  0020               	movlb	0	; select bank0
  7344  172F  00C8               	movwf	??_MTOUCH_Service_Mainloop
  7345  1730  0848               	movf	??_MTOUCH_Service_Mainloop,w
  7346  1731  00EB               	movwf	_mtouch_time_toScan
  7347                           
  7348                           ;mcc_generated_files/mtouch/mtouch.c: 109:             MTOUCH_Sensor_Sampled_ResetAll();
  7349  1732  3196  261F  3197   	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  7350                           
  7351                           ;mcc_generated_files/mtouch/mtouch.c: 110:             MTOUCH_Tick();
  7352  1735  3194  2483         	fcall	_MTOUCH_Tick
  7353                           
  7354                           ;mcc_generated_files/mtouch/mtouch.c: 111:             return 1;
  7355  1737  3001               	movlw	1
  7356  1738  0008               	return
  7357  1739                     __end_of_MTOUCH_Service_Mainloop:	
  7358                           
  7359                           	psect	text32
  7360  0002                     __ptext32:	
  7361 ;; *************** function _MTOUCH_needReburst *****************
  7362 ;; Defined at:
  7363 ;;		line 134 in file "mcc_generated_files/mtouch/mtouch.c"
  7364 ;; Parameters:    Size  Location     Type
  7365 ;;		None
  7366 ;; Auto vars:     Size  Location     Type
  7367 ;;  needReburst     1    0        _Bool 
  7368 ;; Return value:  Size  Location     Type
  7369 ;;                  1    wreg      _Bool 
  7370 ;; Registers used:
  7371 ;;		wreg, status,2
  7372 ;; Tracked objects:
  7373 ;;		On entry : 0/0
  7374 ;;		On exit  : 0/0
  7375 ;;		Unchanged: 0/0
  7376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7377 ;;      Params:         0       0       0       0       0       0       0       0
  7378 ;;      Locals:         1       0       0       0       0       0       0       0
  7379 ;;      Temps:          0       0       0       0       0       0       0       0
  7380 ;;      Totals:         1       0       0       0       0       0       0       0
  7381 ;;Total ram usage:        1 bytes
  7382 ;; Hardware stack levels used:    1
  7383 ;; Hardware stack levels required when called:    4
  7384 ;; This function calls:
  7385 ;;		Nothing
  7386 ;; This function is called by:
  7387 ;;		_MTOUCH_Service_Mainloop
  7388 ;; This function uses a non-reentrant model
  7389 ;;
  7390                           
  7391                           
  7392                           ;psect for function _MTOUCH_needReburst
  7393  0002                     _MTOUCH_needReburst:	
  7394                           
  7395                           ;mcc_generated_files/mtouch/mtouch.c: 138:     return needReburst;
  7396                           
  7397                           ;incstack = 0
  7398                           ; Regs used in _MTOUCH_needReburst: [wreg+status,2]
  7399  0002  3000               	movlw	0
  7400  0003  0008               	return
  7401  0004                     __end_of_MTOUCH_needReburst:	
  7402                           
  7403                           	psect	text33
  7404  1483                     __ptext33:	
  7405 ;; *************** function _MTOUCH_Tick *****************
  7406 ;; Defined at:
  7407 ;;		line 124 in file "mcc_generated_files/mtouch/mtouch.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;		None
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  1    wreg      void 
  7414 ;; Registers used:
  7415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7421 ;;      Params:         0       0       0       0       0       0       0       0
  7422 ;;      Locals:         0       0       0       0       0       0       0       0
  7423 ;;      Temps:          0       0       0       0       0       0       0       0
  7424 ;;      Totals:         0       0       0       0       0       0       0       0
  7425 ;;Total ram usage:        0 bytes
  7426 ;; Hardware stack levels used:    1
  7427 ;; Hardware stack levels required when called:    6
  7428 ;; This function calls:
  7429 ;;		_MTOUCH_Button_Tick
  7430 ;; This function is called by:
  7431 ;;		_MTOUCH_Service_Mainloop
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           
  7436                           ;psect for function _MTOUCH_Tick
  7437  1483                     _MTOUCH_Tick:	
  7438                           
  7439                           ;mcc_generated_files/mtouch/mtouch.c: 126:     MTOUCH_Button_Tick();
  7440                           
  7441                           ;incstack = 0
  7442                           ; Regs used in _MTOUCH_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7443  1483  3196  2673         	fcall	_MTOUCH_Button_Tick
  7444  1485  0008               	return
  7445  1486                     __end_of_MTOUCH_Tick:	
  7446                           
  7447                           	psect	text34
  7448  1673                     __ptext34:	
  7449 ;; *************** function _MTOUCH_Button_Tick *****************
  7450 ;; Defined at:
  7451 ;;		line 297 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;		None
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  i               1    5[COMMON] unsigned char 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7465 ;;      Params:         0       0       0       0       0       0       0       0
  7466 ;;      Locals:         1       0       0       0       0       0       0       0
  7467 ;;      Temps:          1       0       0       0       0       0       0       0
  7468 ;;      Totals:         2       0       0       0       0       0       0       0
  7469 ;;Total ram usage:        2 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    5
  7472 ;; This function calls:
  7473 ;;		_Button_Tick_helper
  7474 ;; This function is called by:
  7475 ;;		_MTOUCH_Tick
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           
  7480                           ;psect for function _MTOUCH_Button_Tick
  7481  1673                     _MTOUCH_Button_Tick:	
  7482                           
  7483                           ;mcc_generated_files/mtouch/mtouch_button.c: 299:     uint8_t i;;mcc_generated_files/mto
      +                          uch/mtouch_button.c: 300:     for (i = 0; i < 3u; i++)
  7484                           
  7485                           ;incstack = 0
  7486                           ; Regs used in _MTOUCH_Button_Tick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7487  1673  01F5               	clrf	MTOUCH_Button_Tick@i
  7488  1674                     l4611:	
  7489                           
  7490                           ;mcc_generated_files/mtouch/mtouch_button.c: 301:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 302:         Button_Tick_helper(&mtouch_button[i]);
  7491  1674  0875               	movf	MTOUCH_Button_Tick@i,w
  7492  1675  00F4               	movwf	??_MTOUCH_Button_Tick
  7493  1676  3003               	movlw	3
  7494  1677                     u3455:	
  7495  1677  35F4               	lslf	??_MTOUCH_Button_Tick,f
  7496  1678  3EFF               	addlw	-1
  7497  1679  1D03               	skipz
  7498  167A  2E77               	goto	u3455
  7499  167B  3574               	lslf	??_MTOUCH_Button_Tick,w
  7500  167C  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
  7501  167D  3188  2045  3196   	fcall	_Button_Tick_helper
  7502                           
  7503                           ;mcc_generated_files/mtouch/mtouch_button.c: 303:     }
  7504  1680  3001               	movlw	1
  7505  1681  00F4               	movwf	??_MTOUCH_Button_Tick
  7506  1682  0874               	movf	??_MTOUCH_Button_Tick,w
  7507  1683  07F5               	addwf	MTOUCH_Button_Tick@i,f
  7508  1684  3003               	movlw	3
  7509  1685  0275               	subwf	MTOUCH_Button_Tick@i,w
  7510  1686  1803               	btfsc	3,0
  7511  1687  0008               	return
  7512  1688  2E74               	goto	l4611
  7513  1689                     __end_of_MTOUCH_Button_Tick:	
  7514                           
  7515                           	psect	text35
  7516  0845                     __ptext35:	
  7517 ;; *************** function _Button_Tick_helper *****************
  7518 ;; Defined at:
  7519 ;;		line 305 in file "mcc_generated_files/mtouch/mtouch_button.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;  button          1    wreg     PTR struct .
  7522 ;;		 -> mtouch_button(48), 
  7523 ;; Auto vars:     Size  Location     Type
  7524 ;;  button          1    3[COMMON] PTR struct .
  7525 ;;		 -> mtouch_button(48), 
  7526 ;; Return value:  Size  Location     Type
  7527 ;;                  1    wreg      void 
  7528 ;; Registers used:
  7529 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7530 ;; Tracked objects:
  7531 ;;		On entry : 0/0
  7532 ;;		On exit  : 0/0
  7533 ;;		Unchanged: 0/0
  7534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7535 ;;      Params:         0       0       0       0       0       0       0       0
  7536 ;;      Locals:         1       0       0       0       0       0       0       0
  7537 ;;      Temps:          2       0       0       0       0       0       0       0
  7538 ;;      Totals:         3       0       0       0       0       0       0       0
  7539 ;;Total ram usage:        3 bytes
  7540 ;; Hardware stack levels used:    1
  7541 ;; Hardware stack levels required when called:    4
  7542 ;; This function calls:
  7543 ;;		Nothing
  7544 ;; This function is called by:
  7545 ;;		_MTOUCH_Button_Tick
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           
  7550                           ;psect for function _Button_Tick_helper
  7551  0845                     _Button_Tick_helper:	
  7552                           
  7553                           ;incstack = 0
  7554                           ; Regs used in _Button_Tick_helper: [wreg+fsr1l+fsr1h+status,2+status,0]
  7555                           ;Button_Tick_helper@button stored from wreg
  7556  0845  00F3               	movwf	Button_Tick_helper@button
  7557                           
  7558                           ;mcc_generated_files/mtouch/mtouch_button.c: 305: static void Button_Tick_helper(mtouch_
      +                          button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 306: {;mcc_generated_files
      +                          /mtouch/mtouch_button.c: 308:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  7559  0846  0873               	movf	Button_Tick_helper@button,w
  7560  0847  3E02               	addlw	2
  7561  0848  0086               	movwf	6
  7562  0849  3001               	movlw	1	; select bank2/3
  7563  084A  0087               	movwf	7
  7564  084B  3002               	movlw	2
  7565  084C  0601               	xorwf	1,w
  7566  084D  1D03               	btfss	3,2
  7567  084E  0008               	return
  7568                           
  7569                           ;mcc_generated_files/mtouch/mtouch_button.c: 309:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 310:         (button->counter)++;
  7570  084F  0873               	movf	Button_Tick_helper@button,w
  7571  0850  3E0A               	addlw	10
  7572  0851  0086               	movwf	6
  7573  0852  3001               	movlw	1	; select bank2/3
  7574  0853  0087               	movwf	7
  7575  0854  3001               	movlw	1
  7576  0855  0781               	addwf	1,f
  7577  0856  3141               	addfsr 1,1
  7578  0857  1803               	skipnc
  7579  0858  0A81               	incf	1,f
  7580                           
  7581                           ;mcc_generated_files/mtouch/mtouch_button.c: 311:         if (button->counter == (mtouch
      +                          _button_statecounter_t)0)
  7582  0859  0873               	movf	Button_Tick_helper@button,w
  7583  085A  3E0A               	addlw	10
  7584  085B  0086               	movwf	6
  7585  085C  3001               	movlw	1	; select bank2/3
  7586  085D  0087               	movwf	7
  7587  085E  0016               	moviw fsr1++
  7588  085F  0401               	iorwf	1,w
  7589  0860  1D03               	btfss	3,2
  7590  0861  0008               	return
  7591                           
  7592                           ;mcc_generated_files/mtouch/mtouch_button.c: 312:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 313:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  7593  0862  0873               	movf	Button_Tick_helper@button,w
  7594  0863  3E0A               	addlw	10
  7595  0864  0086               	movwf	6
  7596  0865  3001               	movlw	1	; select bank2/3
  7597  0866  0087               	movwf	7
  7598  0867  30FF               	movlw	255
  7599  0868  3FC0               	movwi [0]fsr1
  7600  0869  30FF               	movlw	255
  7601  086A  3FC1               	movwi [1]fsr1
  7602  086B  0008               	return
  7603  086C                     __end_of_Button_Tick_helper:	
  7604                           
  7605                           	psect	text36
  7606  161F                     __ptext36:	
  7607 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  7608 ;; Defined at:
  7609 ;;		line 950 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;		None
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  sensor          1    3[COMMON] PTR struct .
  7614 ;;		 -> mtouch_sensor(27), 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  1    wreg      void 
  7617 ;; Registers used:
  7618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7624 ;;      Params:         0       0       0       0       0       0       0       0
  7625 ;;      Locals:         1       0       0       0       0       0       0       0
  7626 ;;      Temps:          1       0       0       0       0       0       0       0
  7627 ;;      Totals:         2       0       0       0       0       0       0       0
  7628 ;;Total ram usage:        2 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; Hardware stack levels required when called:    5
  7631 ;; This function calls:
  7632 ;;		_Sensor_Sampled_Reset
  7633 ;; This function is called by:
  7634 ;;		_MTOUCH_Initialize
  7635 ;;		_MTOUCH_Service_Mainloop
  7636 ;; This function uses a non-reentrant model
  7637 ;;
  7638                           
  7639                           
  7640                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  7641  161F                     _MTOUCH_Sensor_Sampled_ResetAll:	
  7642                           
  7643                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 952:     mtouch_sensor_t* sensor;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 953:     for(sensor = &mtouch_sensor[0];sensor<= &mto
      +                          uch_sensor[3u -1];sensor++)
  7644                           
  7645                           ;incstack = 0
  7646                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  7647  161F  3050               	movlw	(low (_mtouch_sensor| (0+256)))& (0+255)
  7648  1620  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7649  1621  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7650  1622  00F3               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  7651  1623                     L2:	
  7652  1623  3062               	movlw	(low ((_mtouch_sensor| (0+256)+18)))& (0+255)
  7653  1624  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7654  1625  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7655  1626  0272               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7656  1627  1C03               	btfss	3,0
  7657  1628  0008               	return
  7658                           
  7659                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 954:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 955:         Sensor_Sampled_Reset(sensor);
  7660  1629  0873               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  7661  162A  3195  2507  3196   	fcall	_Sensor_Sampled_Reset
  7662                           
  7663                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 956:     }
  7664  162D  3009               	movlw	9
  7665  162E  00F2               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  7666  162F  0872               	movf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  7667  1630  07F3               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  7668  1631  2E23               	goto	L2
  7669  1632                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  7670                           
  7671                           	psect	text37
  7672  1507                     __ptext37:	
  7673 ;; *************** function _Sensor_Sampled_Reset *****************
  7674 ;; Defined at:
  7675 ;;		line 964 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;  sensor          1    wreg     PTR struct .
  7678 ;;		 -> mtouch_sensor(27), 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  sensor          1    1[COMMON] PTR struct .
  7681 ;;		 -> mtouch_sensor(27), 
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      void 
  7684 ;; Registers used:
  7685 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7691 ;;      Params:         0       0       0       0       0       0       0       0
  7692 ;;      Locals:         1       0       0       0       0       0       0       0
  7693 ;;      Temps:          0       0       0       0       0       0       0       0
  7694 ;;      Totals:         1       0       0       0       0       0       0       0
  7695 ;;Total ram usage:        1 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    4
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_MTOUCH_Sensor_Initialize
  7702 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           
  7707                           ;psect for function _Sensor_Sampled_Reset
  7708  1507                     _Sensor_Sampled_Reset:	
  7709                           
  7710                           ;incstack = 0
  7711                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7712                           ;Sensor_Sampled_Reset@sensor stored from wreg
  7713  1507  00F1               	movwf	Sensor_Sampled_Reset@sensor
  7714                           
  7715                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 964: static __attribute__((inline)) void Se
      +                          nsor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          965: {;mcc_generated_files/mtouch/mtouch_sensor.c: 966:     sensor->sampled = 0;
  7716  1508  0871               	movf	Sensor_Sampled_Reset@sensor,w
  7717  1509  3E08               	addlw	8
  7718  150A  0086               	movwf	6
  7719  150B  3001               	movlw	1	; select bank2/3
  7720  150C  0087               	movwf	7
  7721  150D  1001               	bcf	1,0
  7722  150E  0008               	return
  7723  150F                     __end_of_Sensor_Sampled_Reset:	
  7724                           
  7725                           	psect	text38
  7726  165D                     __ptext38:	
  7727 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  7728 ;; Defined at:
  7729 ;;		line 258 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;		None
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  group           1   39[BANK0 ] unsigned char 
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  1    wreg      _Bool 
  7736 ;; Registers used:
  7737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7743 ;;      Params:         0       0       0       0       0       0       0       0
  7744 ;;      Locals:         0       1       0       0       0       0       0       0
  7745 ;;      Temps:          0       1       0       0       0       0       0       0
  7746 ;;      Totals:         0       2       0       0       0       0       0       0
  7747 ;;Total ram usage:        2 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:   10
  7750 ;; This function calls:
  7751 ;;		_Sensor_Service
  7752 ;; This function is called by:
  7753 ;;		_MTOUCH_Service_Mainloop
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           
  7758                           ;psect for function _MTOUCH_Sensor_SampleAll
  7759  165D                     _MTOUCH_Sensor_SampleAll:	
  7760                           
  7761                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 260:     uint8_t group;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 261:     for (group = 0; group < 2u; group++)
  7762                           
  7763                           ;incstack = 0
  7764                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7765  165D  0020               	movlb	0	; select bank0
  7766  165E  01C7               	clrf	MTOUCH_Sensor_SampleAll@group
  7767  165F                     l6221:	
  7768                           
  7769                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 262:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 263:         if(Sensor_Service(group)!= MTOUCH_SENSOR_ERROR_none)
  7770  165F  0847               	movf	MTOUCH_Sensor_SampleAll@group,w
  7771  1660  3187  2742  3196   	fcall	_Sensor_Service
  7772  1663  3A00               	xorlw	0
  7773  1664  1903               	skipnz
  7774  1665  2E68               	goto	l6227
  7775                           
  7776                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 264:             return 0;
  7777  1666  3000               	movlw	0
  7778  1667  0008               	return
  7779  1668                     l6227:	
  7780                           
  7781                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 265:     }
  7782  1668  3001               	movlw	1
  7783  1669  0020               	movlb	0	; select bank0
  7784  166A  00C6               	movwf	??_MTOUCH_Sensor_SampleAll
  7785  166B  0846               	movf	??_MTOUCH_Sensor_SampleAll,w
  7786  166C  07C7               	addwf	MTOUCH_Sensor_SampleAll@group,f
  7787  166D  3002               	movlw	2
  7788  166E  0247               	subwf	MTOUCH_Sensor_SampleAll@group,w
  7789  166F  1C03               	skipc
  7790  1670  2E5F               	goto	l6221
  7791                           
  7792                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 266:     return 1;
  7793  1671  3001               	movlw	1
  7794  1672  0008               	return
  7795  1673                     __end_of_MTOUCH_Sensor_SampleAll:	
  7796                           
  7797                           	psect	text39
  7798  0742                     __ptext39:	
  7799 ;; *************** function _Sensor_Service *****************
  7800 ;; Defined at:
  7801 ;;		line 303 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  scanGroup       1    wreg     unsigned char 
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;  scanGroup       1   34[BANK0 ] unsigned char 
  7806 ;;  sensor_adc2     1   37[BANK0 ] PTR struct .
  7807 ;;		 -> mtouch_sensor(27), 
  7808 ;;  sensor_adc1     1   36[BANK0 ] PTR struct .
  7809 ;;		 -> NULL(0), mtouch_sensor(27), 
  7810 ;;  error           1   35[BANK0 ] enum E2858
  7811 ;; Return value:  Size  Location     Type
  7812 ;;                  1    wreg      enum E2858
  7813 ;; Registers used:
  7814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7815 ;; Tracked objects:
  7816 ;;		On entry : 0/0
  7817 ;;		On exit  : 0/0
  7818 ;;		Unchanged: 0/0
  7819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7820 ;;      Params:         0       0       0       0       0       0       0       0
  7821 ;;      Locals:         0       4       0       0       0       0       0       0
  7822 ;;      Temps:          0       3       0       0       0       0       0       0
  7823 ;;      Totals:         0       7       0       0       0       0       0       0
  7824 ;;Total ram usage:        7 bytes
  7825 ;; Hardware stack levels used:    1
  7826 ;; Hardware stack levels required when called:    9
  7827 ;; This function calls:
  7828 ;;		_Sensor_Acquisition
  7829 ;;		_Sensor_DefaultCallback
  7830 ;;		_Sensor_RawSample_Update
  7831 ;;		_Sensor_isEnabled
  7832 ;;		_Sensor_setSampled
  7833 ;; This function is called by:
  7834 ;;		_MTOUCH_Sensor_SampleAll
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           
  7839                           ;psect for function _Sensor_Service
  7840  0742                     _Sensor_Service:	
  7841                           
  7842                           ;incstack = 0
  7843                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7844                           ;Sensor_Service@scanGroup stored from wreg
  7845  0742  0020               	movlb	0	; select bank0
  7846  0743  00C2               	movwf	Sensor_Service@scanGroup
  7847                           
  7848                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 303: static enum mtouch_sensor_error Sensor
      +                          _Service(uint8_t scanGroup);mcc_generated_files/mtouch/mtouch_sensor.c: 304: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 305:     mtouch_sensor_t* sensor_adc1;;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 306:     mtouch_sensor_t* sensor_adc2;;mcc_generated_files
      +                          /mtouch/mtouch_sensor.c: 308:     sensor_adc1 = (mtouch_sensor_t*)sensor_scan_group[scan
      +                          Group].sensor_adc1;
  7849  0744  0842               	movf	Sensor_Service@scanGroup,w
  7850  0745  00BF               	movwf	??_Sensor_Service
  7851  0746  01C0               	clrf	??_Sensor_Service+1
  7852  0747  35BF               	lslf	??_Sensor_Service,f
  7853  0748  0DC0               	rlf	??_Sensor_Service+1,f
  7854  0749  303C               	movlw	low (_sensor_scan_group| (0+32768))
  7855  074A  073F               	addwf	??_Sensor_Service,w
  7856  074B  0084               	movwf	4
  7857  074C  3098               	movlw	high (_sensor_scan_group| (0+32768))
  7858  074D  3D40               	addwfc	??_Sensor_Service+1,w
  7859  074E  0085               	movwf	5
  7860  074F  0800               	movf	0,w	;code access
  7861  0750  00C1               	movwf	??_Sensor_Service+2
  7862  0751  0841               	movf	??_Sensor_Service+2,w
  7863  0752  00C4               	movwf	Sensor_Service@sensor_adc1
  7864                           
  7865                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 309:     sensor_adc2 = (mtouch_sensor_t*)se
      +                          nsor_scan_group[scanGroup].sensor_adc2;
  7866  0753  0842               	movf	Sensor_Service@scanGroup,w
  7867  0754  00BF               	movwf	??_Sensor_Service
  7868  0755  01C0               	clrf	??_Sensor_Service+1
  7869  0756  35BF               	lslf	??_Sensor_Service,f
  7870  0757  0DC0               	rlf	??_Sensor_Service+1,f
  7871  0758  303D               	movlw	low ((_sensor_scan_group+1)| (0+32768))
  7872  0759  073F               	addwf	??_Sensor_Service,w
  7873  075A  0084               	movwf	4
  7874  075B  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
  7875  075C  3D40               	addwfc	??_Sensor_Service+1,w
  7876  075D  0085               	movwf	5
  7877  075E  0800               	movf	0,w	;code access
  7878  075F  00C1               	movwf	??_Sensor_Service+2
  7879  0760  0841               	movf	??_Sensor_Service+2,w
  7880  0761  00C5               	movwf	Sensor_Service@sensor_adc2
  7881                           
  7882                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 311:     enum mtouch_sensor_error error = S
      +                          ensor_Acquisition(sensor_adc1,sensor_adc2);
  7883  0762  0845               	movf	Sensor_Service@sensor_adc2,w
  7884  0763  00BF               	movwf	??_Sensor_Service
  7885  0764  083F               	movf	??_Sensor_Service,w
  7886  0765  00BB               	movwf	Sensor_Acquisition@sensor_adc2
  7887  0766  0844               	movf	Sensor_Service@sensor_adc1,w
  7888  0767  318C  2451  3187   	fcall	_Sensor_Acquisition
  7889  076A  0020               	movlb	0	; select bank0
  7890  076B  00C0               	movwf	??_Sensor_Service+1
  7891  076C  0840               	movf	??_Sensor_Service+1,w
  7892  076D  00C3               	movwf	Sensor_Service@error
  7893                           
  7894                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 314:     switch(error)
  7895  076E  2FB1               	goto	l6167
  7896  076F                     l6145:	
  7897                           
  7898                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 317:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 318:             if(Sensor_isEnabled(sensor_adc1))
  7899  076F  0844               	movf	Sensor_Service@sensor_adc1,w
  7900  0770  3195  25C7  3187   	fcall	_Sensor_isEnabled
  7901  0773  3A00               	xorlw	0
  7902  0774  1903               	skipnz
  7903  0775  2F8F               	goto	l6155
  7904                           
  7905                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 319:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 324:                 if(!lowpowerActivated)
  7906  0776  0020               	movlb	0	; select bank0
  7907  0777  086A               	movf	_lowpowerActivated,w
  7908  0778  1D03               	btfss	3,2
  7909  0779  2F7E               	goto	l6151
  7910                           
  7911                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 325:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 326:                     Sensor_RawSample_Update(sensor_adc1);
  7912  077A  0844               	movf	Sensor_Service@sensor_adc1,w
  7913  077B  3188  2093  3187   	fcall	_Sensor_RawSample_Update
  7914  077E                     l6151:	
  7915                           
  7916                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 328:                 Sensor_setSampled(sens
      +                          or_adc1);
  7917  077E  0020               	movlb	0	; select bank0
  7918  077F  0844               	movf	Sensor_Service@sensor_adc1,w
  7919  0780  3194  24FF  3187   	fcall	_Sensor_setSampled
  7920                           
  7921                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 329:                 callback_sampled(senso
      +                          r_adc1->sensor);
  7922  0783  0020               	movlb	0	; select bank0
  7923  0784  0844               	movf	Sensor_Service@sensor_adc1,w
  7924  0785  0086               	movwf	6
  7925  0786  3001               	movlw	1	; select bank2/3
  7926  0787  0087               	movwf	7
  7927  0788  0801               	movf	1,w
  7928  0789  00BF               	movwf	??_Sensor_Service
  7929  078A  083F               	movf	??_Sensor_Service,w
  7930  078B  00F1               	movwf	Sensor_DefaultCallback@sensor
  7931  078C  3188  2000  3187   	fcall	_Sensor_DefaultCallback
  7932  078F                     l6155:	
  7933                           
  7934                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 331:             if(Sensor_isEnabled(sensor
      +                          _adc2))
  7935  078F  0020               	movlb	0	; select bank0
  7936  0790  0845               	movf	Sensor_Service@sensor_adc2,w
  7937  0791  3195  25C7  3187   	fcall	_Sensor_isEnabled
  7938  0794  3A00               	xorlw	0
  7939  0795  1903               	skipnz
  7940  0796  2FD4               	goto	l6169
  7941                           
  7942                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 332:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 333:                 if(!lowpowerActivated)
  7943  0797  0020               	movlb	0	; select bank0
  7944  0798  086A               	movf	_lowpowerActivated,w
  7945  0799  1D03               	btfss	3,2
  7946  079A  2F9F               	goto	l6161
  7947                           
  7948                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 334:                 {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 335:                     Sensor_RawSample_Update(sensor_adc2);
  7949  079B  0845               	movf	Sensor_Service@sensor_adc2,w
  7950  079C  3188  2093  3187   	fcall	_Sensor_RawSample_Update
  7951  079F                     l6161:	
  7952                           
  7953                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 337:                 Sensor_setSampled(sens
      +                          or_adc2);
  7954  079F  0020               	movlb	0	; select bank0
  7955  07A0  0845               	movf	Sensor_Service@sensor_adc2,w
  7956  07A1  3194  24FF  3187   	fcall	_Sensor_setSampled
  7957                           
  7958                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 338:                 callback_sampled(senso
      +                          r_adc2->sensor);
  7959  07A4  0020               	movlb	0	; select bank0
  7960  07A5  0845               	movf	Sensor_Service@sensor_adc2,w
  7961  07A6  0086               	movwf	6
  7962  07A7  3001               	movlw	1	; select bank2/3
  7963  07A8  0087               	movwf	7
  7964  07A9  0801               	movf	1,w
  7965  07AA  00BF               	movwf	??_Sensor_Service
  7966  07AB  083F               	movf	??_Sensor_Service,w
  7967  07AC  00F1               	movwf	Sensor_DefaultCallback@sensor
  7968  07AD  3188  2000  3187   	fcall	_Sensor_DefaultCallback
  7969  07B0  2FD4               	goto	l6169
  7970  07B1                     l6167:	
  7971  07B1  0843               	movf	Sensor_Service@error,w
  7972  07B2  00BF               	movwf	??_Sensor_Service
  7973  07B3  01C0               	clrf	??_Sensor_Service+1
  7974  07B4  1BBF               	btfsc	??_Sensor_Service,7
  7975  07B5  03C0               	decf	??_Sensor_Service+1,f
  7976                           
  7977                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7978                           ; Switch size 1, requested type "simple"
  7979                           ; Number of cases is 2, Range of values is 0 to 255
  7980                           ; switch strategies available:
  7981                           ; Name         Instructions Cycles
  7982                           ; simple_byte            7     4 (average)
  7983                           ; jumptable            260     6 (fixed)
  7984                           ;	Chosen strategy is simple_byte
  7985  07B6  0840               	movf	??_Sensor_Service+1,w
  7986  07B7  3A00               	xorlw	0	; case 0
  7987  07B8  1903               	skipnz
  7988  07B9  2FBE               	goto	l6795
  7989  07BA  3AFF               	xorlw	255	; case 255
  7990  07BB  1903               	skipnz
  7991  07BC  2FC3               	goto	l6797
  7992  07BD  2FD4               	goto	l6169
  7993  07BE                     l6795:	
  7994                           
  7995                           ; Switch size 1, requested type "simple"
  7996                           ; Number of cases is 1, Range of values is 0 to 0
  7997                           ; switch strategies available:
  7998                           ; Name         Instructions Cycles
  7999                           ; simple_byte            4     3 (average)
  8000                           ; direct_byte            8     6 (fixed)
  8001                           ; jumptable            260     6 (fixed)
  8002                           ;	Chosen strategy is simple_byte
  8003  07BE  083F               	movf	??_Sensor_Service,w
  8004  07BF  3A00               	xorlw	0	; case 0
  8005  07C0  1903               	skipnz
  8006  07C1  2F6F               	goto	l6145
  8007  07C2  2FD4               	goto	l6169
  8008  07C3                     l6797:	
  8009                           
  8010                           ; Switch size 1, requested type "simple"
  8011                           ; Number of cases is 5, Range of values is 251 to 255
  8012                           ; switch strategies available:
  8013                           ; Name         Instructions Cycles
  8014                           ; direct_byte           15     5 (fixed)
  8015                           ; simple_byte           16     9 (average)
  8016                           ; jumptable            263     9 (fixed)
  8017                           ;	Chosen strategy is simple_byte
  8018  07C3  083F               	movf	??_Sensor_Service,w
  8019  07C4  3AFB               	xorlw	251	; case 251
  8020  07C5  1903               	skipnz
  8021  07C6  2FD4               	goto	l6169
  8022  07C7  3A07               	xorlw	7	; case 252
  8023  07C8  1903               	skipnz
  8024  07C9  2FD4               	goto	l6169
  8025  07CA  3A01               	xorlw	1	; case 253
  8026  07CB  1903               	skipnz
  8027  07CC  2FD4               	goto	l6169
  8028  07CD  3A03               	xorlw	3	; case 254
  8029  07CE  1903               	skipnz
  8030  07CF  2FD4               	goto	l6169
  8031  07D0  3A01               	xorlw	1	; case 255
  8032  07D1  1903               	skipnz
  8033  07D2  2FD4               	goto	l6169
  8034  07D3  2FD4               	goto	l6169
  8035  07D4                     l6169:	
  8036                           
  8037                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 351:     return error;
  8038  07D4  0020               	movlb	0	; select bank0
  8039  07D5  0843               	movf	Sensor_Service@error,w
  8040  07D6  0008               	return
  8041  07D7                     __end_of_Sensor_Service:	
  8042                           
  8043                           	psect	text40
  8044  14FF                     __ptext40:	
  8045 ;; *************** function _Sensor_setSampled *****************
  8046 ;; Defined at:
  8047 ;;		line 969 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;  sensor          1    wreg     PTR struct .
  8050 ;;		 -> NULL(0), mtouch_sensor(27), 
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;  sensor          1    1[COMMON] PTR struct .
  8053 ;;		 -> NULL(0), mtouch_sensor(27), 
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  1    wreg      void 
  8056 ;; Registers used:
  8057 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8063 ;;      Params:         0       0       0       0       0       0       0       0
  8064 ;;      Locals:         1       0       0       0       0       0       0       0
  8065 ;;      Temps:          0       0       0       0       0       0       0       0
  8066 ;;      Totals:         1       0       0       0       0       0       0       0
  8067 ;;Total ram usage:        1 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; Hardware stack levels required when called:    4
  8070 ;; This function calls:
  8071 ;;		Nothing
  8072 ;; This function is called by:
  8073 ;;		_Sensor_Service
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           
  8078                           ;psect for function _Sensor_setSampled
  8079  14FF                     _Sensor_setSampled:	
  8080                           
  8081                           ;incstack = 0
  8082                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  8083                           ;Sensor_setSampled@sensor stored from wreg
  8084  14FF  00F1               	movwf	Sensor_setSampled@sensor
  8085                           
  8086                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 969: static __attribute__((inline)) void Se
      +                          nsor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 970
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 971:     sensor->sampled = 1;
  8087  1500  0871               	movf	Sensor_setSampled@sensor,w
  8088  1501  3E08               	addlw	8
  8089  1502  0086               	movwf	6
  8090  1503  3001               	movlw	1	; select bank2/3
  8091  1504  0087               	movwf	7
  8092  1505  1401               	bsf	1,0
  8093  1506  0008               	return
  8094  1507                     __end_of_Sensor_setSampled:	
  8095                           
  8096                           	psect	text41
  8097  0893                     __ptext41:	
  8098 ;; *************** function _Sensor_RawSample_Update *****************
  8099 ;; Defined at:
  8100 ;;		line 802 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8101 ;; Parameters:    Size  Location     Type
  8102 ;;  sensor          1    wreg     PTR struct .
  8103 ;;		 -> NULL(0), mtouch_sensor(27), 
  8104 ;; Auto vars:     Size  Location     Type
  8105 ;;  sensor          1    7[COMMON] PTR struct .
  8106 ;;		 -> NULL(0), mtouch_sensor(27), 
  8107 ;;  adcIndex        1    6[COMMON] unsigned char 
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      void 
  8110 ;; Registers used:
  8111 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8117 ;;      Params:         0       0       0       0       0       0       0       0
  8118 ;;      Locals:         2       0       0       0       0       0       0       0
  8119 ;;      Temps:          1       0       0       0       0       0       0       0
  8120 ;;      Totals:         3       0       0       0       0       0       0       0
  8121 ;;Total ram usage:        3 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    5
  8124 ;; This function calls:
  8125 ;;		_Sensor_getScanGroupIndex
  8126 ;; This function is called by:
  8127 ;;		_Sensor_Service
  8128 ;; This function uses a non-reentrant model
  8129 ;;
  8130                           
  8131                           
  8132                           ;psect for function _Sensor_RawSample_Update
  8133  0893                     _Sensor_RawSample_Update:	
  8134                           
  8135                           ;incstack = 0
  8136                           ; Regs used in _Sensor_RawSample_Update: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8137                           ;Sensor_RawSample_Update@sensor stored from wreg
  8138  0893  00F7               	movwf	Sensor_RawSample_Update@sensor
  8139                           
  8140                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 802: static void Sensor_RawSample_Update(mt
      +                          ouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 803: {;mcc_generated_
      +                          files/mtouch/mtouch_sensor.c: 804:     uint8_t adcIndex = Sensor_getScanGroupIndex(senso
      +                          r);
  8141  0894  0877               	movf	Sensor_RawSample_Update@sensor,w
  8142  0895  3188  20E6  3188   	fcall	_Sensor_getScanGroupIndex
  8143  0898  00F5               	movwf	??_Sensor_RawSample_Update
  8144  0899  0875               	movf	??_Sensor_RawSample_Update,w
  8145  089A  00F6               	movwf	Sensor_RawSample_Update@adcIndex
  8146                           
  8147                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 806:     if (INTCONbits.GIE == (uint8_t)1)
  8148  089B  1F8B               	btfss	11,7	;volatile
  8149  089C  28AD               	goto	l4425
  8150                           
  8151                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 807:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 808:         INTCONbits.GIE = (uint8_t)0;
  8152  089D  138B               	bcf	11,7	;volatile
  8153                           
  8154                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 809:         sensor->rawSample = packet_sam
      +                          ple[adcIndex];
  8155  089E  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  8156  089F  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8157  08A0  0086               	movwf	6
  8158  08A1  0187               	clrf	7
  8159  08A2  0877               	movf	Sensor_RawSample_Update@sensor,w
  8160  08A3  3E06               	addlw	6
  8161  08A4  0084               	movwf	4
  8162  08A5  3001               	movlw	1	; select bank2/3
  8163  08A6  0085               	movwf	5
  8164  08A7  3F40               	moviw [0]fsr1
  8165  08A8  3F80               	movwi [0]fsr0
  8166  08A9  3F41               	moviw [1]fsr1
  8167  08AA  3F81               	movwi [1]fsr0
  8168                           
  8169                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 810:         INTCONbits.GIE = (uint8_t)1;
  8170  08AB  178B               	bsf	11,7	;volatile
  8171                           
  8172                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 811:     }
  8173  08AC  0008               	return
  8174  08AD                     l4425:	
  8175                           
  8176                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 813:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 814:         sensor->rawSample = packet_sample[adcIndex];
  8177  08AD  3576               	lslf	Sensor_RawSample_Update@adcIndex,w
  8178  08AE  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8179  08AF  0086               	movwf	6
  8180  08B0  0187               	clrf	7
  8181  08B1  0877               	movf	Sensor_RawSample_Update@sensor,w
  8182  08B2  3E06               	addlw	6
  8183  08B3  0084               	movwf	4
  8184  08B4  3001               	movlw	1	; select bank2/3
  8185  08B5  0085               	movwf	5
  8186  08B6  3F40               	moviw [0]fsr1
  8187  08B7  3F80               	movwi [0]fsr0
  8188  08B8  3F41               	moviw [1]fsr1
  8189  08B9  3F81               	movwi [1]fsr0
  8190  08BA  0008               	return
  8191  08BB                     __end_of_Sensor_RawSample_Update:	
  8192                           
  8193                           	psect	text42
  8194  0800                     __ptext42:	
  8195 ;; *************** function _Sensor_DefaultCallback *****************
  8196 ;; Defined at:
  8197 ;;		line 823 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;  sensor          1    1[COMMON] enum E2854
  8200 ;; Auto vars:     Size  Location     Type
  8201 ;;		None
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  1    wreg      void 
  8204 ;; Registers used:
  8205 ;;		None
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8211 ;;      Params:         1       0       0       0       0       0       0       0
  8212 ;;      Locals:         0       0       0       0       0       0       0       0
  8213 ;;      Temps:          0       0       0       0       0       0       0       0
  8214 ;;      Totals:         1       0       0       0       0       0       0       0
  8215 ;;Total ram usage:        1 bytes
  8216 ;; Hardware stack levels used:    1
  8217 ;; Hardware stack levels required when called:    4
  8218 ;; This function calls:
  8219 ;;		Nothing
  8220 ;; This function is called by:
  8221 ;;		_Sensor_Service
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           
  8226                           ;psect for function _Sensor_DefaultCallback
  8227  0800                     _Sensor_DefaultCallback:	
  8228                           
  8229                           ;incstack = 0
  8230                           ; Regs used in _Sensor_DefaultCallback: []
  8231  0800  0008               	return
  8232  0801                     __end_of_Sensor_DefaultCallback:	
  8233                           
  8234                           	psect	text43
  8235  0C51                     __ptext43:	
  8236 ;; *************** function _Sensor_Acquisition *****************
  8237 ;; Defined at:
  8238 ;;		line 372 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;  sensor_adc1     1    wreg     PTR struct .
  8241 ;;		 -> NULL(0), mtouch_sensor(27), 
  8242 ;;  sensor_adc2     1   27[BANK0 ] PTR struct .
  8243 ;;		 -> mtouch_sensor(27), 
  8244 ;; Auto vars:     Size  Location     Type
  8245 ;;  sensor_adc1     1   30[BANK0 ] PTR struct .
  8246 ;;		 -> NULL(0), mtouch_sensor(27), 
  8247 ;;  retry           1   29[BANK0 ] unsigned char 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  1    wreg      enum E2858
  8250 ;; Registers used:
  8251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8257 ;;      Params:         0       1       0       0       0       0       0       0
  8258 ;;      Locals:         0       2       0       0       0       0       0       0
  8259 ;;      Temps:          0       1       0       0       0       0       0       0
  8260 ;;      Totals:         0       4       0       0       0       0       0       0
  8261 ;;Total ram usage:        4 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    8
  8264 ;; This function calls:
  8265 ;;		_Sensor_Acq_ExecutePacket
  8266 ;;		_Sensor_Scanfrequency_Evaluation
  8267 ;;		_Sensor_isActive
  8268 ;;		_Sensor_isCalibrated
  8269 ;;		_Sensor_postAcquisitionProcess
  8270 ;; This function is called by:
  8271 ;;		_Sensor_Service
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           
  8276                           ;psect for function _Sensor_Acquisition
  8277  0C51                     _Sensor_Acquisition:	
  8278                           
  8279                           ;incstack = 0
  8280                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8281                           ;Sensor_Acquisition@sensor_adc1 stored from wreg
  8282  0C51  0020               	movlb	0	; select bank0
  8283  0C52  00BE               	movwf	Sensor_Acquisition@sensor_adc1
  8284                           
  8285                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 372: static enum mtouch_sensor_error Sensor
      +                          _Acquisition(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc_generated_fi
      +                          les/mtouch/mtouch_sensor.c: 373: {;mcc_generated_files/mtouch/mtouch_sensor.c: 374:     
      +                          uint8_t retry = (uint8_t)5;
  8286  0C53  3005               	movlw	5
  8287  0C54  00BC               	movwf	??_Sensor_Acquisition
  8288  0C55  083C               	movf	??_Sensor_Acquisition,w
  8289  0C56  00BD               	movwf	Sensor_Acquisition@retry
  8290                           
  8291                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 377:     if (sensor_adc1 == ((void*)0) && s
      +                          ensor_adc2 == ((void*)0))
  8292  0C57  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8293  0C58  1D03               	btfss	3,2
  8294  0C59  2C67               	goto	l5967
  8295  0C5A  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8296  0C5B  1D03               	btfss	3,2
  8297  0C5C  2C67               	goto	l5967
  8298                           
  8299                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 378:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 379:         return MTOUCH_SENSOR_ERROR_invalid_index;
  8300  0C5D  30FF               	movlw	255
  8301  0C5E  0008               	return
  8302  0C5F                     l5961:	
  8303                           
  8304                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 388:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 389:         retry--;
  8305  0C5F  3001               	movlw	1
  8306  0C60  0020               	movlb	0	; select bank0
  8307  0C61  02BD               	subwf	Sensor_Acquisition@retry,f
  8308                           
  8309                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 390:         if(retry == 0)
  8310  0C62  083D               	movf	Sensor_Acquisition@retry,w
  8311  0C63  1D03               	btfss	3,2
  8312  0C64  2C67               	goto	l5967
  8313                           
  8314                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 391:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 392:             return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8315  0C65  30FC               	movlw	252
  8316  0C66  0008               	return
  8317  0C67                     l5967:	
  8318                           
  8319                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 387:     while(Sensor_Acq_ExecutePacket(sen
      +                          sor_adc1,sensor_adc2))
  8320  0C67  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8321  0C68  00BC               	movwf	??_Sensor_Acquisition
  8322  0C69  083C               	movf	??_Sensor_Acquisition,w
  8323  0C6A  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8324  0C6B  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8325  0C6C  3182  22D5  318C   	fcall	_Sensor_Acq_ExecutePacket
  8326  0C6F  3A00               	xorlw	0
  8327  0C70  1D03               	skipz
  8328  0C71  2C5F               	goto	l5961
  8329                           
  8330                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 396:     if(sensor_adc1 != ((void*)0))
  8331  0C72  0020               	movlb	0	; select bank0
  8332  0C73  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8333  0C74  1903               	btfsc	3,2
  8334  0C75  2C7A               	goto	l5973
  8335                           
  8336                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 397:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 398:         Sensor_postAcquisitionProcess(sensor_adc1);
  8337  0C76  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8338  0C77  318A  223F  318C   	fcall	_Sensor_postAcquisitionProcess
  8339  0C7A                     l5973:	
  8340                           
  8341                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 401:     if(sensor_adc2 !=((void*)0))
  8342  0C7A  0020               	movlb	0	; select bank0
  8343  0C7B  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8344  0C7C  1903               	btfsc	3,2
  8345  0C7D  2C82               	goto	l5977
  8346                           
  8347                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 402:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 403:         Sensor_postAcquisitionProcess(sensor_adc2);
  8348  0C7E  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8349  0C7F  318A  223F  318C   	fcall	_Sensor_postAcquisitionProcess
  8350  0C82                     l5977:	
  8351                           
  8352                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 406:     if((Sensor_isActive(sensor_adc1) &
      +                          & Sensor_isCalibrated(sensor_adc1))
  8353  0C82  0020               	movlb	0	; select bank0
  8354  0C83  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8355  0C84  3195  255C  318C   	fcall	_Sensor_isActive
  8356  0C87  3A00               	xorlw	0
  8357  0C88  1903               	skipnz
  8358  0C89  2C92               	goto	l5981
  8359  0C8A  0020               	movlb	0	; select bank0
  8360  0C8B  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8361  0C8C  3195  2520  318C   	fcall	_Sensor_isCalibrated
  8362  0C8F  3A00               	xorlw	0
  8363  0C90  1D03               	skipz
  8364  0C91  2CA2               	goto	l5985
  8365  0C92                     l5981:	
  8366  0C92  0020               	movlb	0	; select bank0
  8367  0C93  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8368  0C94  3195  255C  318C   	fcall	_Sensor_isActive
  8369  0C97  3A00               	xorlw	0
  8370  0C98  1903               	skipnz
  8371  0C99  2CAB               	goto	l5989
  8372  0C9A  0020               	movlb	0	; select bank0
  8373  0C9B  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8374  0C9C  3195  2520  318C   	fcall	_Sensor_isCalibrated
  8375  0C9F  3A00               	xorlw	0
  8376  0CA0  1903               	skipnz
  8377  0CA1  2CAB               	goto	l5989
  8378  0CA2                     l5985:	
  8379                           
  8380                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 408:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 409:         return Sensor_Scanfrequency_Evaluation(sensor_adc1,sensor_adc2)
      +                          ;
  8381  0CA2  0020               	movlb	0	; select bank0
  8382  0CA3  083B               	movf	Sensor_Acquisition@sensor_adc2,w
  8383  0CA4  00BC               	movwf	??_Sensor_Acquisition
  8384  0CA5  083C               	movf	??_Sensor_Acquisition,w
  8385  0CA6  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc2
  8386  0CA7  083E               	movf	Sensor_Acquisition@sensor_adc1,w
  8387  0CA8  318D  25E2         	fcall	_Sensor_Scanfrequency_Evaluation
  8388  0CAA  0008               	return
  8389  0CAB                     l5989:	
  8390                           
  8391                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 412:     return MTOUCH_SENSOR_ERROR_none;
  8392  0CAB  3000               	movlw	0
  8393  0CAC  0008               	return
  8394  0CAD                     __end_of_Sensor_Acquisition:	
  8395                           
  8396                           	psect	text44
  8397  0A3F                     __ptext44:	
  8398 ;; *************** function _Sensor_postAcquisitionProcess *****************
  8399 ;; Defined at:
  8400 ;;		line 415 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;  sensor          1    wreg     PTR struct .
  8403 ;;		 -> NULL(0), mtouch_sensor(27), 
  8404 ;; Auto vars:     Size  Location     Type
  8405 ;;  sensor          1    9[COMMON] PTR struct .
  8406 ;;		 -> NULL(0), mtouch_sensor(27), 
  8407 ;;  deviation       2    6[COMMON] unsigned short 
  8408 ;;  adcIndex        1    8[COMMON] unsigned char 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  1    wreg      void 
  8411 ;; Registers used:
  8412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8418 ;;      Params:         0       0       0       0       0       0       0       0
  8419 ;;      Locals:         4       0       0       0       0       0       0       0
  8420 ;;      Temps:          1       0       0       0       0       0       0       0
  8421 ;;      Totals:         5       0       0       0       0       0       0       0
  8422 ;;Total ram usage:        5 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    5
  8425 ;; This function calls:
  8426 ;;		_Sensor_getScanGroupIndex
  8427 ;;		_Sensor_isEnabled
  8428 ;;		_Sensor_setActive
  8429 ;;		_Sensor_setInactive
  8430 ;;		_abs
  8431 ;; This function is called by:
  8432 ;;		_Sensor_Acquisition
  8433 ;; This function uses a non-reentrant model
  8434 ;;
  8435                           
  8436                           
  8437                           ;psect for function _Sensor_postAcquisitionProcess
  8438  0A3F                     _Sensor_postAcquisitionProcess:	
  8439                           
  8440                           ;incstack = 0
  8441                           ; Regs used in _Sensor_postAcquisitionProcess: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  8442                           ;Sensor_postAcquisitionProcess@sensor stored from wreg
  8443  0A3F  00F9               	movwf	Sensor_postAcquisitionProcess@sensor
  8444                           
  8445                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 415: static void Sensor_postAcquisitionProc
      +                          ess(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 416: {;mcc_gene
      +                          rated_files/mtouch/mtouch_sensor.c: 417:     mtouch_sensor_sample_t deviation;;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 418:     uint8_t adcIndex = Sensor_getScanGroupIndex(
      +                          sensor);
  8446  0A40  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8447  0A41  3188  20E6  318A   	fcall	_Sensor_getScanGroupIndex
  8448  0A44  00F5               	movwf	??_Sensor_postAcquisitionProcess
  8449  0A45  0875               	movf	??_Sensor_postAcquisitionProcess,w
  8450  0A46  00F8               	movwf	Sensor_postAcquisitionProcess@adcIndex
  8451                           
  8452                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 420:     if(Sensor_isEnabled(sensor))
  8453  0A47  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8454  0A48  3195  25C7  318A   	fcall	_Sensor_isEnabled
  8455  0A4B  3A00               	xorlw	0
  8456  0A4C  1903               	skipnz
  8457  0A4D  2A66               	goto	l4237
  8458                           
  8459                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 421:         deviation = (mtouch_sensor_sam
      +                          ple_t)abs(packet_sample[adcIndex] - sensor->rawSample);
  8460  0A4E  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8461  0A4F  3E06               	addlw	6
  8462  0A50  0086               	movwf	6
  8463  0A51  3001               	movlw	1	; select bank2/3
  8464  0A52  0087               	movwf	7
  8465  0A53  3578               	lslf	Sensor_postAcquisitionProcess@adcIndex,w
  8466  0A54  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  8467  0A55  0084               	movwf	4
  8468  0A56  0185               	clrf	5
  8469  0A57  3F40               	moviw [0]fsr1
  8470  0A58  0200               	subwf	0,w
  8471  0A59  00F1               	movwf	abs@a
  8472  0A5A  3101               	addfsr 0,1
  8473  0A5B  3F41               	moviw [1]fsr1
  8474  0A5C  3B00               	subwfb	0,w
  8475  0A5D  00F2               	movwf	abs@a+1
  8476  0A5E  3196  26A0  318A   	fcall	_abs
  8477  0A61  0872               	movf	?_abs+1,w
  8478  0A62  00F7               	movwf	Sensor_postAcquisitionProcess@deviation+1
  8479  0A63  0871               	movf	?_abs,w
  8480  0A64  00F6               	movwf	Sensor_postAcquisitionProcess@deviation
  8481  0A65  2A68               	goto	l4239
  8482  0A66                     l4237:	
  8483                           
  8484                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 423:         deviation = 0;
  8485  0A66  01F6               	clrf	Sensor_postAcquisitionProcess@deviation
  8486  0A67  01F7               	clrf	Sensor_postAcquisitionProcess@deviation+1
  8487  0A68                     l4239:	
  8488                           
  8489                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 425:     if(deviation > 100u)
  8490  0A68  3000               	movlw	0
  8491  0A69  0277               	subwf	Sensor_postAcquisitionProcess@deviation+1,w
  8492  0A6A  3065               	movlw	101
  8493  0A6B  1903               	skipnz
  8494  0A6C  0276               	subwf	Sensor_postAcquisitionProcess@deviation,w
  8495  0A6D  1C03               	skipc
  8496  0A6E  2A73               	goto	l4243
  8497                           
  8498                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 426:         Sensor_setActive(sensor);
  8499  0A6F  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8500  0A70  3194  24EF         	fcall	_Sensor_setActive
  8501  0A72  0008               	return
  8502  0A73                     l4243:	
  8503                           
  8504                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 428:         Sensor_setInactive(sensor);
  8505  0A73  0879               	movf	Sensor_postAcquisitionProcess@sensor,w
  8506  0A74  3194  24F7         	fcall	_Sensor_setInactive
  8507  0A76  0008               	return
  8508  0A77                     __end_of_Sensor_postAcquisitionProcess:	
  8509                           
  8510                           	psect	text45
  8511  14F7                     __ptext45:	
  8512 ;; *************** function _Sensor_setInactive *****************
  8513 ;; Defined at:
  8514 ;;		line 877 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;  sensor          1    wreg     PTR struct .
  8517 ;;		 -> NULL(0), mtouch_sensor(27), 
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;  sensor          1    1[COMMON] PTR struct .
  8520 ;;		 -> NULL(0), mtouch_sensor(27), 
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  1    wreg      void 
  8523 ;; Registers used:
  8524 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8530 ;;      Params:         0       0       0       0       0       0       0       0
  8531 ;;      Locals:         1       0       0       0       0       0       0       0
  8532 ;;      Temps:          0       0       0       0       0       0       0       0
  8533 ;;      Totals:         1       0       0       0       0       0       0       0
  8534 ;;Total ram usage:        1 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; Hardware stack levels required when called:    4
  8537 ;; This function calls:
  8538 ;;		Nothing
  8539 ;; This function is called by:
  8540 ;;		_Sensor_postAcquisitionProcess
  8541 ;; This function uses a non-reentrant model
  8542 ;;
  8543                           
  8544                           
  8545                           ;psect for function _Sensor_setInactive
  8546  14F7                     _Sensor_setInactive:	
  8547                           
  8548                           ;incstack = 0
  8549                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8550                           ;Sensor_setInactive@sensor stored from wreg
  8551  14F7  00F1               	movwf	Sensor_setInactive@sensor
  8552                           
  8553                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 877: static __attribute__((inline)) void Se
      +                          nsor_setInactive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 87
      +                          8: {;mcc_generated_files/mtouch/mtouch_sensor.c: 879:     sensor->active = 0;
  8554  14F8  0871               	movf	Sensor_setInactive@sensor,w
  8555  14F9  3E08               	addlw	8
  8556  14FA  0086               	movwf	6
  8557  14FB  3001               	movlw	1	; select bank2/3
  8558  14FC  0087               	movwf	7
  8559  14FD  1081               	bcf	1,1
  8560  14FE  0008               	return
  8561  14FF                     __end_of_Sensor_setInactive:	
  8562                           
  8563                           	psect	text46
  8564  14EF                     __ptext46:	
  8565 ;; *************** function _Sensor_setActive *****************
  8566 ;; Defined at:
  8567 ;;		line 872 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  sensor          1    wreg     PTR struct .
  8570 ;;		 -> NULL(0), mtouch_sensor(27), 
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;  sensor          1    1[COMMON] PTR struct .
  8573 ;;		 -> NULL(0), mtouch_sensor(27), 
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  1    wreg      void 
  8576 ;; Registers used:
  8577 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8583 ;;      Params:         0       0       0       0       0       0       0       0
  8584 ;;      Locals:         1       0       0       0       0       0       0       0
  8585 ;;      Temps:          0       0       0       0       0       0       0       0
  8586 ;;      Totals:         1       0       0       0       0       0       0       0
  8587 ;;Total ram usage:        1 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    4
  8590 ;; This function calls:
  8591 ;;		Nothing
  8592 ;; This function is called by:
  8593 ;;		_Sensor_postAcquisitionProcess
  8594 ;; This function uses a non-reentrant model
  8595 ;;
  8596                           
  8597                           
  8598                           ;psect for function _Sensor_setActive
  8599  14EF                     _Sensor_setActive:	
  8600                           
  8601                           ;incstack = 0
  8602                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  8603                           ;Sensor_setActive@sensor stored from wreg
  8604  14EF  00F1               	movwf	Sensor_setActive@sensor
  8605                           
  8606                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 872: static __attribute__((inline)) void Se
      +                          nsor_setActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 873:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 874:     sensor->active = 1;
  8607  14F0  0871               	movf	Sensor_setActive@sensor,w
  8608  14F1  3E08               	addlw	8
  8609  14F2  0086               	movwf	6
  8610  14F3  3001               	movlw	1	; select bank2/3
  8611  14F4  0087               	movwf	7
  8612  14F5  1481               	bsf	1,1
  8613  14F6  0008               	return
  8614  14F7                     __end_of_Sensor_setActive:	
  8615                           
  8616                           	psect	text47
  8617  0DE2                     __ptext47:	
  8618 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  8619 ;; Defined at:
  8620 ;;		line 733 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8621 ;; Parameters:    Size  Location     Type
  8622 ;;  sensor_adc1     1    wreg     PTR struct .
  8623 ;;		 -> NULL(0), mtouch_sensor(27), 
  8624 ;;  sensor_adc2     1   14[BANK0 ] PTR struct .
  8625 ;;		 -> mtouch_sensor(27), 
  8626 ;; Auto vars:     Size  Location     Type
  8627 ;;  sensor_adc1     1   17[BANK0 ] PTR struct .
  8628 ;;		 -> NULL(0), mtouch_sensor(27), 
  8629 ;;  best_packet_    4   22[BANK0 ] unsigned short [2]
  8630 ;;  packet_noise    2   18[BANK0 ] unsigned short 
  8631 ;;  i               1   26[BANK0 ] unsigned char 
  8632 ;;  retry           1   21[BANK0 ] unsigned char 
  8633 ;;  best_sample_    1   20[BANK0 ] unsigned char 
  8634 ;; Return value:  Size  Location     Type
  8635 ;;                  1    wreg      enum E2858
  8636 ;; Registers used:
  8637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8638 ;; Tracked objects:
  8639 ;;		On entry : 0/0
  8640 ;;		On exit  : 0/0
  8641 ;;		Unchanged: 0/0
  8642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8643 ;;      Params:         0       1       0       0       0       0       0       0
  8644 ;;      Locals:         0      10       0       0       0       0       0       0
  8645 ;;      Temps:          0       2       0       0       0       0       0       0
  8646 ;;      Totals:         0      13       0       0       0       0       0       0
  8647 ;;Total ram usage:       13 bytes
  8648 ;; Hardware stack levels used:    1
  8649 ;; Hardware stack levels required when called:    7
  8650 ;; This function calls:
  8651 ;;		_Sensor_Acq_ExecutePacket
  8652 ;; This function is called by:
  8653 ;;		_Sensor_Acquisition
  8654 ;; This function uses a non-reentrant model
  8655 ;;
  8656                           
  8657                           
  8658                           ;psect for function _Sensor_Scanfrequency_Evaluation
  8659  0DE2                     _Sensor_Scanfrequency_Evaluation:	
  8660                           
  8661                           ;incstack = 0
  8662                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  8663                           ;Sensor_Scanfrequency_Evaluation@sensor_adc1 stored from wreg
  8664  0DE2  0020               	movlb	0	; select bank0
  8665  0DE3  00B1               	movwf	Sensor_Scanfrequency_Evaluation@sensor_adc1
  8666                           
  8667                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 733: static enum mtouch_sensor_error Sensor
      +                          _Scanfrequency_Evaluation(mtouch_sensor_t* sensor_adc1,mtouch_sensor_t* sensor_adc2);mcc
      +                          _generated_files/mtouch/mtouch_sensor.c: 734: {;mcc_generated_files/mtouch/mtouch_sensor
      +                          .c: 735:     uint8_t i;;mcc_generated_files/mtouch/mtouch_sensor.c: 736:     const mtouc
      +                          h_sensor_sampleperiod_t frequency_hop[5] = {0,13,28,30,23};;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 737:     mtouch_sensor_packetnoise_t packet_noise_Max;;mcc_generated_fil
      +                          es/mtouch/mtouch_sensor.c: 738:     mtouch_sensor_sampleperiod_t best_sample_period;
  8668  0DE4  085C               	movf	_packet_noise+1,w
  8669  0DE5  00B0               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  8670  0DE6  085B               	movf	_packet_noise,w
  8671  0DE7  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8672  0DE8  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8673  0DE9  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8674  0DEA  36B0               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  8675  0DEB  0CAF               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  8676  0DEC  085B               	movf	_packet_noise,w
  8677  0DED  072F               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  8678  0DEE  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8679  0DEF  085C               	movf	_packet_noise+1,w
  8680  0DF0  3D30               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  8681  0DF1  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8682                           
  8683                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 743:     best_sample_period = sample_period
      +                          ;
  8684  0DF2  086E               	movf	_sample_period,w
  8685  0DF3  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8686  0DF4  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8687  0DF5  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8688                           
  8689                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 744:     best_packet_sample[0] = packet_sam
      +                          ple[0];
  8690  0DF6  0854               	movf	_packet_sample+1,w
  8691  0DF7  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8692  0DF8  0853               	movf	_packet_sample,w
  8693  0DF9  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8694                           
  8695                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 745:     best_packet_sample[1] = packet_sam
      +                          ple[1];
  8696  0DFA  0856               	movf	_packet_sample+3,w
  8697  0DFB  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8698  0DFC  0855               	movf	_packet_sample+2,w
  8699  0DFD  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8700                           
  8701                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 747:     for(i=(uint8_t)0;i<(uint8_t)5;i++)
  8702  0DFE  01BA               	clrf	Sensor_Scanfrequency_Evaluation@i
  8703  0DFF                     l5879:	
  8704                           
  8705                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 748:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 749:         sample_period += frequency_hop[i];
  8706  0DFF  083A               	movf	Sensor_Scanfrequency_Evaluation@i,w
  8707  0E00  3E0F               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8708  0E01  0084               	movwf	4
  8709  0E02  3098               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  8710  0E03  1803               	skipnc
  8711  0E04  3E01               	addlw	1
  8712  0E05  0085               	movwf	5
  8713  0E06  0800               	movf	0,w	;code access
  8714  0E07  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8715  0E08  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8716  0E09  07EE               	addwf	_sample_period,f
  8717                           
  8718                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 750:         if(sample_period > ((mtouch_se
      +                          nsor_sampleperiod_t)255))
  8719  0E0A  30AE               	movlw	174
  8720  0E0B  026E               	subwf	_sample_period,w
  8721  0E0C  1803               	skipnc
  8722  0E0D  2E12               	goto	l5887
  8723                           
  8724                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 756:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 757:             sample_period += ((mtouch_sensor_sampleperiod_t)(mtouch
      +                          _sensor_time_t)32 +(mtouch_sensor_time_t)32 +(mtouch_sensor_time_t)110);
  8725  0E0E  30AE               	movlw	174
  8726  0E0F  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8727  0E10  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8728  0E11  07EE               	addwf	_sample_period,f
  8729  0E12                     l5887:	
  8730                           
  8731                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 760:         retry = (uint8_t)5;
  8732  0E12  3005               	movlw	5
  8733  0E13  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8734  0E14  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8735  0E15  00B5               	movwf	Sensor_Scanfrequency_Evaluation@retry
  8736  0E16                     l5895:	
  8737                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8738                           
  8739                           
  8740                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 762:         while(Sensor_Acq_ExecutePacket
      +                          (sensor_adc1,sensor_adc2))
  8741  0E16  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc2,w
  8742  0E17  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8743  0E18  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8744  0E19  00FB               	movwf	Sensor_Acq_ExecutePacket@sensor_adc2
  8745  0E1A  0831               	movf	Sensor_Scanfrequency_Evaluation@sensor_adc1,w
  8746  0E1B  3182  22D5  318D   	fcall	_Sensor_Acq_ExecutePacket
  8747  0E1E  3A00               	xorlw	0
  8748  0E1F  1903               	btfsc	3,2
  8749  0E20  2E29               	goto	l5897
  8750                           
  8751                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 763:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 764:             retry--;
  8752  0E21  3001               	movlw	1
  8753  0E22  0020               	movlb	0	; select bank0
  8754  0E23  02B5               	subwf	Sensor_Scanfrequency_Evaluation@retry,f
  8755                           
  8756                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 765:             if(retry == 0)
  8757  0E24  0835               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  8758  0E25  1D03               	btfss	3,2
  8759  0E26  2E16               	goto	l5895
  8760                           
  8761                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 766:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 767:                 return MTOUCH_SENSOR_ERROR_tooManyRetries;
  8762  0E27  30FC               	movlw	252
  8763  0E28  0008               	return
  8764  0E29                     l5897:	
  8765                           
  8766                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 771:         if(packet_noise_Max < packet_n
      +                          oise)
  8767  0E29  0020               	movlb	0	; select bank0
  8768  0E2A  085C               	movf	_packet_noise+1,w
  8769  0E2B  0233               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  8770  0E2C  1D03               	skipz
  8771  0E2D  2E30               	goto	u4725
  8772  0E2E  085B               	movf	_packet_noise,w
  8773  0E2F  0232               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  8774  0E30                     u4725:	
  8775  0E30  1803               	skipnc
  8776  0E31  2E42               	goto	l5901
  8777                           
  8778                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 772:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 773:             packet_noise_Max = packet_noise;
  8779  0E32  085C               	movf	_packet_noise+1,w
  8780  0E33  00B3               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  8781  0E34  085B               	movf	_packet_noise,w
  8782  0E35  00B2               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  8783                           
  8784                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 774:             best_sample_period = sampl
      +                          e_period;
  8785  0E36  086E               	movf	_sample_period,w
  8786  0E37  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8787  0E38  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8788  0E39  00B4               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  8789                           
  8790                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 775:             best_packet_sample[0] = pa
      +                          cket_sample[0];
  8791  0E3A  0854               	movf	_packet_sample+1,w
  8792  0E3B  00B7               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  8793  0E3C  0853               	movf	_packet_sample,w
  8794  0E3D  00B6               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  8795                           
  8796                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 776:             best_packet_sample[1] = pa
      +                          cket_sample[1];
  8797  0E3E  0856               	movf	_packet_sample+3,w
  8798  0E3F  00B9               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3
  8799  0E40  0855               	movf	_packet_sample+2,w
  8800  0E41  00B8               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2
  8801  0E42                     l5901:	
  8802                           
  8803                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 778:     }
  8804  0E42  3001               	movlw	1
  8805  0E43  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8806  0E44  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8807  0E45  07BA               	addwf	Sensor_Scanfrequency_Evaluation@i,f
  8808  0E46  3005               	movlw	5
  8809  0E47  023A               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  8810  0E48  1C03               	skipc
  8811  0E49  2DFF               	goto	l5879
  8812                           
  8813                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 780:     sample_period = best_sample_period
      +                          ;
  8814  0E4A  0834               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  8815  0E4B  00AF               	movwf	??_Sensor_Scanfrequency_Evaluation
  8816  0E4C  082F               	movf	??_Sensor_Scanfrequency_Evaluation,w
  8817  0E4D  00EE               	movwf	_sample_period
  8818                           
  8819                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 781:     packet_sample[0] = best_packet_sam
      +                          ple[0];
  8820  0E4E  0837               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  8821  0E4F  00D4               	movwf	_packet_sample+1
  8822  0E50  0836               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  8823  0E51  00D3               	movwf	_packet_sample
  8824                           
  8825                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 782:     packet_sample[1] = best_packet_sam
      +                          ple[1];
  8826  0E52  0839               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+3,w
  8827  0E53  00D6               	movwf	_packet_sample+3
  8828  0E54  0838               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+2,w
  8829  0E55  00D5               	movwf	_packet_sample+2
  8830                           
  8831                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 784:     return MTOUCH_SENSOR_ERROR_none;
  8832  0E56  3000               	movlw	0
  8833  0E57  0008               	return
  8834  0E58                     __end_of_Sensor_Scanfrequency_Evaluation:	
  8835                           
  8836                           	psect	text48
  8837  02D5                     __ptext48:	
  8838 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  8839 ;; Defined at:
  8840 ;;		line 471 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;  sensor_adc1     1    wreg     PTR struct .
  8843 ;;		 -> NULL(0), mtouch_sensor(27), 
  8844 ;;  sensor_adc2     1   11[COMMON] PTR struct .
  8845 ;;		 -> mtouch_sensor(27), 
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;  sensor_adc1     1   13[BANK0 ] PTR struct .
  8848 ;;		 -> NULL(0), mtouch_sensor(27), 
  8849 ;;  last_b          2   10[BANK0 ] unsigned short 
  8850 ;;  last_a          2    8[BANK0 ] unsigned short 
  8851 ;;  packet_count    1   12[BANK0 ] unsigned char 
  8852 ;;  activeSensor    1    7[BANK0 ] unsigned char 
  8853 ;;  ADxIF_flag      1    6[BANK0 ] unsigned char 
  8854 ;;  sensor2Force    1    5[BANK0 ] unsigned char 
  8855 ;;  sensor1Force    1    4[BANK0 ] unsigned char 
  8856 ;;  AD2CON2_temp    1    3[BANK0 ] unsigned char 
  8857 ;;  AD1CON2_temp    1    2[BANK0 ] unsigned char 
  8858 ;;  ADCOMCON_tem    1    1[BANK0 ] unsigned char 
  8859 ;; Return value:  Size  Location     Type
  8860 ;;                  1    wreg      enum E2858
  8861 ;; Registers used:
  8862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8863 ;; Tracked objects:
  8864 ;;		On entry : 0/0
  8865 ;;		On exit  : 0/0
  8866 ;;		Unchanged: 0/0
  8867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8868 ;;      Params:         1       0       0       0       0       0       0       0
  8869 ;;      Locals:         0      13       0       0       0       0       0       0
  8870 ;;      Temps:          0       1       0       0       0       0       0       0
  8871 ;;      Totals:         1      14       0       0       0       0       0       0
  8872 ;;Total ram usage:       15 bytes
  8873 ;; Hardware stack levels used:    1
  8874 ;; Hardware stack levels required when called:    6
  8875 ;; This function calls:
  8876 ;;		_MTOUCH_Sensor_Scan_Initialize
  8877 ;;		_Sensor_autoCalibration
  8878 ;;		_Sensor_isActive
  8879 ;;		_Sensor_isCalibrated
  8880 ;;		_Sensor_isEnabled
  8881 ;;		_Sensor_loadADCSettings
  8882 ;;		_TMR2_LoadPeriodRegister
  8883 ;;		_TMR2_StartTimer
  8884 ;;		_TMR2_StopTimer
  8885 ;;		_abs
  8886 ;; This function is called by:
  8887 ;;		_Sensor_Acquisition
  8888 ;;		_Sensor_Scanfrequency_Evaluation
  8889 ;; This function uses a non-reentrant model
  8890 ;;
  8891                           
  8892                           
  8893                           ;psect for function _Sensor_Acq_ExecutePacket
  8894  02D5                     _Sensor_Acq_ExecutePacket:	
  8895                           
  8896                           ;incstack = 0
  8897                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8898                           ;Sensor_Acq_ExecutePacket@sensor_adc1 stored from wreg
  8899  02D5  0020               	movlb	0	; select bank0
  8900  02D6  00AD               	movwf	Sensor_Acq_ExecutePacket@sensor_adc1
  8901                           
  8902                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 474:     mtouch_sensor_packetcounter_t pack
      +                          et_counter;;mcc_generated_files/mtouch/mtouch_sensor.c: 476:     mtouch_sensor_adcsample
      +                          _t last_a = 0;
  8903  02D7  01A8               	clrf	Sensor_Acq_ExecutePacket@last_a
  8904  02D8  01A9               	clrf	Sensor_Acq_ExecutePacket@last_a+1
  8905                           
  8906                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 477:     mtouch_sensor_adcsample_t last_b =
      +                           0;
  8907  02D9  01AA               	clrf	Sensor_Acq_ExecutePacket@last_b
  8908  02DA  01AB               	clrf	Sensor_Acq_ExecutePacket@last_b+1
  8909                           
  8910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 478:     uint8_t activeSensor = 0;
  8911  02DB  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  8912                           
  8913                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 480:     uint8_t ADCOMCON_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 481:     uint8_t AD1CON2_temp,AD2CON2_temp;;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 487:     uint8_t sensor1ForceEnabled = 0, sensor2ForceE
      +                          nabled = 0;
  8914  02DC  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8915  02DD  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8916                           
  8917                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 488:     if(sensor_adc1 != ((void*)0) && se
      +                          nsor_adc2 != ((void*)0))
  8918  02DE  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8919  02DF  1903               	btfsc	3,2
  8920  02E0  2B1B               	goto	l5659
  8921  02E1  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8922  02E2  1903               	btfsc	3,2
  8923  02E3  2B1B               	goto	l5659
  8924                           
  8925                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 489:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 490:         if (sensor_adc1->enabled == 0 && sensor_adc2->enabled == 1)
  8926  02E4  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8927  02E5  3E08               	addlw	8
  8928  02E6  0086               	movwf	6
  8929  02E7  3001               	movlw	1	; select bank2/3
  8930  02E8  0087               	movwf	7
  8931  02E9  1981               	btfsc	1,3
  8932  02EA  2AFB               	goto	l5641
  8933  02EB  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8934  02EC  3E08               	addlw	8
  8935  02ED  0086               	movwf	6
  8936  02EE  3001               	movlw	1	; select bank2/3
  8937  02EF  0087               	movwf	7
  8938  02F0  1D81               	btfss	1,3
  8939  02F1  2AFB               	goto	l5641
  8940                           
  8941                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 491:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 492:             sensor_adc1->enabled = 1;
  8942  02F2  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8943  02F3  3E08               	addlw	8
  8944  02F4  0086               	movwf	6
  8945  02F5  3001               	movlw	1	; select bank2/3
  8946  02F6  0087               	movwf	7
  8947  02F7  1581               	bsf	1,3
  8948                           
  8949                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 493:             sensor1ForceEnabled = 1;
  8950  02F8  01A4               	clrf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled
  8951  02F9  0AA4               	incf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,f
  8952                           
  8953                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 494:         }
  8954  02FA  2B30               	goto	l5683
  8955  02FB                     l5641:	
  8956  02FB  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8957  02FC  3E08               	addlw	8
  8958  02FD  0086               	movwf	6
  8959  02FE  3001               	movlw	1	; select bank2/3
  8960  02FF  0087               	movwf	7
  8961  0300  1981               	btfsc	1,3
  8962  0301  2B12               	goto	l5649
  8963  0302  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8964  0303  3E08               	addlw	8
  8965  0304  0086               	movwf	6
  8966  0305  3001               	movlw	1	; select bank2/3
  8967  0306  0087               	movwf	7
  8968  0307  1D81               	btfss	1,3
  8969  0308  2B12               	goto	l5649
  8970                           
  8971                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 496:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 497:             sensor_adc2->enabled = 1;
  8972  0309  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8973  030A  3E08               	addlw	8
  8974  030B  0086               	movwf	6
  8975  030C  3001               	movlw	1	; select bank2/3
  8976  030D  0087               	movwf	7
  8977  030E  1581               	bsf	1,3
  8978                           
  8979                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 498:             sensor2ForceEnabled = 1;
  8980  030F  01A5               	clrf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled
  8981  0310  0AA5               	incf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,f
  8982                           
  8983                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 499:         }
  8984  0311  2B30               	goto	l5683
  8985  0312                     l5649:	
  8986  0312  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  8987  0313  3E08               	addlw	8
  8988  0314  0086               	movwf	6
  8989  0315  3001               	movlw	1	; select bank2/3
  8990  0316  0087               	movwf	7
  8991  0317  1981               	btfsc	1,3
  8992  0318  2B30               	goto	l5683
  8993  0319                     l5651:	
  8994  0319  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  8995  031A  2B28               	goto	L4
  8996  031B                     l5659:	
  8997                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 507:     }
  8998                           
  8999  031B  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9000  031C  1D03               	btfss	3,2
  9001  031D  2B21               	goto	l5671
  9002  031E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9003  031F  1D03               	btfss	3,2
  9004  0320  2B19               	goto	l5651
  9005  0321                     l5671:	
  9006                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 509:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 510:         if(sensor_adc2->enabled == 0)
  9007                           
  9008  0321  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9009  0322  1903               	btfsc	3,2
  9010  0323  2B30               	goto	l5683
  9011  0324  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9012  0325  1D03               	btfss	3,2
  9013  0326  2B30               	goto	l5683
  9014                           
  9015                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 519:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 520:         if(sensor_adc1->enabled == 0)
  9016  0327  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9017  0328                     L4:	
  9018  0328  3E08               	addlw	8
  9019  0329  0086               	movwf	6
  9020  032A  3001               	movlw	1	; select bank2/3
  9021  032B  0087               	movwf	7
  9022  032C  1981               	btfsc	1,3
  9023  032D  2B30               	goto	l5683
  9024  032E                     l5653:	
  9025                           
  9026                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 501:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 502:             return MTOUCH_SENSOR_ERROR_none;
  9027  032E  3000               	movlw	0
  9028  032F  0008               	return
  9029  0330                     l5683:	
  9030                           
  9031                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 532:     if(Sensor_isActive(sensor_adc2))
  9032  0330  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9033  0331  3195  255C  3182   	fcall	_Sensor_isActive
  9034  0334  3A00               	xorlw	0
  9035  0335  1903               	skipnz
  9036  0336  2B3A               	goto	l5687
  9037                           
  9038                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 533:         activeSensor = 1;
  9039  0337  0020               	movlb	0	; select bank0
  9040  0338  01A7               	clrf	Sensor_Acq_ExecutePacket@activeSensor
  9041  0339  0AA7               	incf	Sensor_Acq_ExecutePacket@activeSensor,f
  9042  033A                     l5687:	
  9043                           
  9044                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 539:     ADCOMCON_temp = ADCOMCON;
  9045  033A  002E               	movlb	14	; select bank14
  9046  033B  0812               	movf	18,w	;volatile
  9047  033C  0020               	movlb	0	; select bank0
  9048  033D  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9049  033E  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9050  033F  00A1               	movwf	Sensor_Acq_ExecutePacket@ADCOMCON_temp
  9051                           
  9052                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 540:     AD1CON2_temp = AD1CON2;
  9053  0340  002E               	movlb	14	; select bank14
  9054  0341  0813               	movf	19,w	;volatile
  9055  0342  0020               	movlb	0	; select bank0
  9056  0343  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9057  0344  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9058  0345  00A2               	movwf	Sensor_Acq_ExecutePacket@AD1CON2_temp
  9059                           
  9060                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 541:     AD2CON2_temp = AD2CON2;
  9061  0346  002F               	movlb	15	; select bank15
  9062  0347  0813               	movf	19,w	;volatile
  9063  0348  0020               	movlb	0	; select bank0
  9064  0349  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9065  034A  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9066  034B  00A3               	movwf	Sensor_Acq_ExecutePacket@AD2CON2_temp
  9067                           
  9068                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 542:     MTOUCH_Sensor_Scan_Initialize();
  9069  034C  3195  25A6  3182   	fcall	_MTOUCH_Sensor_Scan_Initialize
  9070                           
  9071                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 546:     if(sensor_adc1!=((void*)0))
  9072  034F  0020               	movlb	0	; select bank0
  9073  0350  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9074  0351  1903               	btfsc	3,2
  9075  0352  2B66               	goto	l5703
  9076                           
  9077                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 547:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 548:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc1->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9078  0353  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9079  0354  3E04               	addlw	4
  9080  0355  0086               	movwf	6
  9081  0356  3001               	movlw	1	; select bank2/3
  9082  0357  0087               	movwf	7
  9083  0358  0801               	movf	1,w
  9084  0359  3EFF               	addlw	255
  9085  035A  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9086  035B  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9087  035C  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9088                           
  9089                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 549:         ADxIF_flag = 0;
  9090  035D  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9091                           
  9092                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 550:         AAD1GRD = 0b01000000;
  9093  035E  3040               	movlw	64
  9094  035F  002E               	movlb	14	; select bank14
  9095  0360  0098               	movwf	24	;volatile
  9096                           
  9097                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 551:         AAD2GRD = 0b00000000;
  9098  0361  002F               	movlb	15	; select bank15
  9099  0362  0198               	clrf	24	;volatile
  9100                           
  9101                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 552:         APFCONbits.GRDASEL = 0x1;
  9102  0363  0022               	movlb	2	; select bank2
  9103  0364  141D               	bsf	29,0	;volatile
  9104                           
  9105                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 553:     }
  9106  0365  2B79               	goto	l5713
  9107  0366                     l5703:	
  9108                           
  9109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 555:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 556:         packet_counter = (mtouch_sensor_packetcounter_t)(sensor_adc2->o
      +                          versampling-(mtouch_sensor_packetcounter_t)1);
  9110  0366  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9111  0367  3E04               	addlw	4
  9112  0368  0086               	movwf	6
  9113  0369  3001               	movlw	1	; select bank2/3
  9114  036A  0087               	movwf	7
  9115  036B  0801               	movf	1,w
  9116  036C  3EFF               	addlw	255
  9117  036D  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9118  036E  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9119  036F  00AC               	movwf	Sensor_Acq_ExecutePacket@packet_counter
  9120                           
  9121                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 557:         ADxIF_flag = 1;
  9122  0370  01A6               	clrf	Sensor_Acq_ExecutePacket@ADxIF_flag
  9123  0371  0AA6               	incf	Sensor_Acq_ExecutePacket@ADxIF_flag,f
  9124                           
  9125                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 558:         AAD1GRD = 0b00000000;
  9126  0372  002E               	movlb	14	; select bank14
  9127  0373  0198               	clrf	24	;volatile
  9128                           
  9129                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 559:         AAD2GRD = 0b01000000;
  9130  0374  3040               	movlw	64
  9131  0375  002F               	movlb	15	; select bank15
  9132  0376  0098               	movwf	24	;volatile
  9133                           
  9134                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 560:         APFCONbits.GRDASEL = 0x0;
  9135  0377  0022               	movlb	2	; select bank2
  9136  0378  101D               	bcf	29,0	;volatile
  9137  0379                     l5713:	
  9138                           
  9139                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 563:     Sensor_loadADCSettings(sensor_adc1
      +                          ,0);
  9140  0379  01F2               	clrf	Sensor_loadADCSettings@adc_index
  9141  037A  0020               	movlb	0	; select bank0
  9142  037B  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9143  037C  3184  249F  3182   	fcall	_Sensor_loadADCSettings
  9144                           
  9145                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 564:     Sensor_loadADCSettings(sensor_adc2
      +                          ,1);
  9146  037F  01F2               	clrf	Sensor_loadADCSettings@adc_index
  9147  0380  0AF2               	incf	Sensor_loadADCSettings@adc_index,f
  9148  0381  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9149  0382  3184  249F  3182   	fcall	_Sensor_loadADCSettings
  9150                           
  9151                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 566:     sensor_globalFlags.done = 0;
  9152  0385  0020               	movlb	0	; select bank0
  9153  0386  1069               	bcf	_sensor_globalFlags,0	;volatile
  9154                           
  9155                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 567:     sensor_globalFlags.error = 0;
  9156  0387  1169               	bcf	_sensor_globalFlags,2	;volatile
  9157                           
  9158                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 568:     sensor_globalFlags.interrupted = 0
      +                          ;
  9159  0388  11E9               	bcf	_sensor_globalFlags,3	;volatile
  9160                           
  9161                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 570:     TMR2_LoadPeriodRegister(sample_per
      +                          iod);
  9162  0389  086E               	movf	_sample_period,w
  9163  038A  3194  24A9  3182   	fcall	_TMR2_LoadPeriodRegister
  9164                           
  9165                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 571:     TMR2_StartTimer();
  9166  038D  3194  247D  3182   	fcall	_TMR2_StartTimer
  9167                           
  9168                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 572:     packet_noise = 0;
  9169  0390  0020               	movlb	0	; select bank0
  9170  0391  01DB               	clrf	_packet_noise
  9171  0392  01DC               	clrf	_packet_noise+1
  9172  0393                     l5729:	
  9173                           
  9174                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 575:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 576:         if(ADxIF_flag == 0)
  9175  0393  0826               	movf	Sensor_Acq_ExecutePacket@ADxIF_flag,w
  9176  0394  1D03               	btfss	3,2
  9177  0395  2B9C               	goto	l286
  9178                           
  9179                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 577:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 578:             if (PIR1bits.AD1IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9180  0396  1F11               	btfss	17,6	;volatile
  9181  0397  10E9               	bcf	_sensor_globalFlags,1	;volatile
  9182  0398                     l288:	
  9183  0398  1F11               	btfss	17,6	;volatile
  9184  0399  2B98               	goto	l288
  9185                           
  9186                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 580:             PIR1bits.AD1IF = 0;
  9187  039A  1311               	bcf	17,6	;volatile
  9188                           
  9189                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 581:         }
  9190  039B  2BA2               	goto	l5737
  9191  039C                     l286:	
  9192                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 582:         else
  9193                           
  9194                           
  9195                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 583:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 584:             if (PIR2bits.AD2IF == 0) { sensor_globalFlags.check = 0
      +                          ; }
  9196  039C  1B12               	btfsc	18,6	;volatile
  9197  039D  2B9F               	goto	l293
  9198  039E  10E9               	bcf	_sensor_globalFlags,1	;volatile
  9199  039F                     l293:	
  9200  039F  1F12               	btfss	18,6	;volatile
  9201  03A0  2B9F               	goto	l293
  9202                           
  9203                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 586:             PIR2bits.AD2IF = 0;
  9204  03A1  1312               	bcf	18,6	;volatile
  9205  03A2                     l5737:	
  9206                           
  9207                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 589:         AAD1GRD ^= 0b00100001;
  9208  03A2  3021               	movlw	33
  9209  03A3  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9210  03A4  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9211  03A5  002E               	movlb	14	; select bank14
  9212  03A6  0698               	xorwf	24,f	;volatile
  9213                           
  9214                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 590:         AAD2GRD ^= 0b00100001;
  9215  03A7  3021               	movlw	33
  9216  03A8  0020               	movlb	0	; select bank0
  9217  03A9  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9218  03AA  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9219  03AB  002F               	movlb	15	; select bank15
  9220  03AC  0698               	xorwf	24,f	;volatile
  9221                           
  9222                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 591:         AAD1CON3 ^= 0b11000000;
  9223  03AD  30C0               	movlw	192
  9224  03AE  0020               	movlb	0	; select bank0
  9225  03AF  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9226  03B0  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9227  03B1  002E               	movlb	14	; select bank14
  9228  03B2  0694               	xorwf	20,f	;volatile
  9229                           
  9230                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 592:         AAD2CON3 ^= 0b11000000;
  9231  03B3  30C0               	movlw	192
  9232  03B4  0020               	movlb	0	; select bank0
  9233  03B5  00A0               	movwf	??_Sensor_Acq_ExecutePacket
  9234  03B6  0820               	movf	??_Sensor_Acq_ExecutePacket,w
  9235  03B7  002F               	movlb	15	; select bank15
  9236  03B8  0694               	xorwf	20,f	;volatile
  9237                           
  9238                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 594:         if ((packet_counter & 0x01) ==
      +                           0)
  9239  03B9  0020               	movlb	0	; select bank0
  9240  03BA  182C               	btfsc	Sensor_Acq_ExecutePacket@packet_counter,0
  9241  03BB  2C02               	goto	l5753
  9242                           
  9243                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 595:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 596:             packet_sample[0] += AAD1RES0;
  9244  03BC  002E               	movlb	14	; select bank14
  9245  03BD  081A               	movf	26,w	;volatile
  9246  03BE  0020               	movlb	0	; select bank0
  9247  03BF  07D3               	addwf	_packet_sample,f
  9248  03C0  002E               	movlb	14	; select bank14
  9249  03C1  081B               	movf	27,w	;volatile
  9250  03C2  0020               	movlb	0	; select bank0
  9251  03C3  3DD4               	addwfc	_packet_sample+1,f
  9252                           
  9253                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 597:             packet_sample[1] += AAD2RE
      +                          S0;
  9254  03C4  002F               	movlb	15	; select bank15
  9255  03C5  081A               	movf	26,w	;volatile
  9256  03C6  0020               	movlb	0	; select bank0
  9257  03C7  07D5               	addwf	_packet_sample+2,f
  9258  03C8  002F               	movlb	15	; select bank15
  9259  03C9  081B               	movf	27,w	;volatile
  9260  03CA  0020               	movlb	0	; select bank0
  9261  03CB  3DD6               	addwfc	_packet_sample+3,f
  9262                           
  9263                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 598:             if(activeSensor ==0)
  9264  03CC  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9265  03CD  1D03               	btfss	3,2
  9266  03CE  2BE7               	goto	l5749
  9267                           
  9268                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 599:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 600:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD1RES0);
  9269  03CF  002E               	movlb	14	; select bank14
  9270  03D0  081A               	movf	26,w	;volatile
  9271  03D1  0020               	movlb	0	; select bank0
  9272  03D2  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9273  03D3  00F1               	movwf	abs@a
  9274  03D4  002E               	movlb	14	; select bank14
  9275  03D5  081B               	movf	27,w	;volatile
  9276  03D6  0020               	movlb	0	; select bank0
  9277  03D7  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9278  03D8  00F2               	movwf	abs@a+1
  9279  03D9  3196  26A0  3182   	fcall	_abs
  9280  03DC  0871               	movf	?_abs,w
  9281  03DD  0020               	movlb	0	; select bank0
  9282  03DE  07DB               	addwf	_packet_noise,f
  9283  03DF  0872               	movf	?_abs+1,w
  9284  03E0  3DDC               	addwfc	_packet_noise+1,f
  9285                           
  9286                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 601:                 last_b = AAD1RES0;
  9287  03E1  002E               	movlb	14	; select bank14
  9288  03E2  081B               	movf	27,w	;volatile
  9289  03E3  0020               	movlb	0	; select bank0
  9290  03E4  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9291  03E5  002E               	movlb	14	; select bank14
  9292  03E6  2BFE               	goto	L3
  9293  03E7                     l5749:	
  9294                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 602:             }
  9295                           
  9296                           
  9297                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 604:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 605:                 packet_noise += (mtouch_sensor_packetsample_t)a
      +                          bs(last_b-AAD2RES0);
  9298  03E7  002F               	movlb	15	; select bank15
  9299  03E8  081A               	movf	26,w	;volatile
  9300  03E9  0020               	movlb	0	; select bank0
  9301  03EA  022A               	subwf	Sensor_Acq_ExecutePacket@last_b,w
  9302  03EB  00F1               	movwf	abs@a
  9303  03EC  002F               	movlb	15	; select bank15
  9304  03ED  081B               	movf	27,w	;volatile
  9305  03EE  0020               	movlb	0	; select bank0
  9306  03EF  3B2B               	subwfb	Sensor_Acq_ExecutePacket@last_b+1,w
  9307  03F0  00F2               	movwf	abs@a+1
  9308  03F1  3196  26A0  3182   	fcall	_abs
  9309  03F4  0871               	movf	?_abs,w
  9310  03F5  0020               	movlb	0	; select bank0
  9311  03F6  07DB               	addwf	_packet_noise,f
  9312  03F7  0872               	movf	?_abs+1,w
  9313  03F8  3DDC               	addwfc	_packet_noise+1,f
  9314                           
  9315                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 606:                 last_b = AAD2RES0;
  9316  03F9  002F               	movlb	15	; select bank15
  9317  03FA  081B               	movf	27,w	;volatile
  9318  03FB  0020               	movlb	0	; select bank0
  9319  03FC  00AB               	movwf	Sensor_Acq_ExecutePacket@last_b+1
  9320  03FD  002F               	movlb	15	; select bank15
  9321  03FE                     L3:	
  9322  03FE  081A               	movf	26,w	;volatile
  9323  03FF  0020               	movlb	0	; select bank0
  9324  0400  00AA               	movwf	Sensor_Acq_ExecutePacket@last_b
  9325  0401  2C36               	goto	l5765
  9326  0402                     l5753:	
  9327                           
  9328                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 610:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 611:             packet_sample[0] -= AAD1RES0;
  9329  0402  002E               	movlb	14	; select bank14
  9330  0403  081A               	movf	26,w	;volatile
  9331  0404  0020               	movlb	0	; select bank0
  9332  0405  02D3               	subwf	_packet_sample,f
  9333  0406  002E               	movlb	14	; select bank14
  9334  0407  081B               	movf	27,w	;volatile
  9335  0408  0020               	movlb	0	; select bank0
  9336  0409  3BD4               	subwfb	_packet_sample+1,f
  9337                           
  9338                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 612:             packet_sample[1] -= AAD2RE
      +                          S0;
  9339  040A  002F               	movlb	15	; select bank15
  9340  040B  081A               	movf	26,w	;volatile
  9341  040C  0020               	movlb	0	; select bank0
  9342  040D  02D5               	subwf	_packet_sample+2,f
  9343  040E  002F               	movlb	15	; select bank15
  9344  040F  081B               	movf	27,w	;volatile
  9345  0410  0020               	movlb	0	; select bank0
  9346  0411  3BD6               	subwfb	_packet_sample+3,f
  9347                           
  9348                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 613:             if(activeSensor ==0)
  9349  0412  0827               	movf	Sensor_Acq_ExecutePacket@activeSensor,w
  9350  0413  1D03               	btfss	3,2
  9351  0414  2C1C               	goto	l5761
  9352                           
  9353                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 614:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 615:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD1RES0);
  9354  0415  002E               	movlb	14	; select bank14
  9355  0416  081A               	movf	26,w	;volatile
  9356  0417  0020               	movlb	0	; select bank0
  9357  0418  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9358  0419  00F1               	movwf	abs@a
  9359  041A  002E               	movlb	14	; select bank14
  9360  041B  2C22               	goto	L6
  9361  041C                     l5761:	
  9362                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 617:             }
  9363                           
  9364                           
  9365                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 619:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 620:                 packet_noise +=(mtouch_sensor_packetsample_t)ab
      +                          s(last_a-AAD2RES0);
  9366  041C  002F               	movlb	15	; select bank15
  9367  041D  081A               	movf	26,w	;volatile
  9368  041E  0020               	movlb	0	; select bank0
  9369  041F  0228               	subwf	Sensor_Acq_ExecutePacket@last_a,w
  9370  0420  00F1               	movwf	abs@a
  9371  0421  002F               	movlb	15	; select bank15
  9372  0422                     L6:	
  9373  0422  081B               	movf	27,w	;volatile
  9374  0423  0020               	movlb	0	; select bank0
  9375  0424  3B29               	subwfb	Sensor_Acq_ExecutePacket@last_a+1,w
  9376  0425  00F2               	movwf	abs@a+1
  9377  0426  3196  26A0  3182   	fcall	_abs
  9378  0429  0871               	movf	?_abs,w
  9379  042A  0020               	movlb	0	; select bank0
  9380  042B  07DB               	addwf	_packet_noise,f
  9381  042C  0872               	movf	?_abs+1,w
  9382  042D  3DDC               	addwfc	_packet_noise+1,f
  9383                           
  9384                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 616:                 last_a = AAD1RES0;
  9385  042E  002E               	movlb	14	; select bank14
  9386  042F  081B               	movf	27,w	;volatile
  9387  0430  0020               	movlb	0	; select bank0
  9388  0431  00A9               	movwf	Sensor_Acq_ExecutePacket@last_a+1
  9389  0432  002E               	movlb	14	; select bank14
  9390  0433  081A               	movf	26,w	;volatile
  9391  0434  0020               	movlb	0	; select bank0
  9392  0435  00A8               	movwf	Sensor_Acq_ExecutePacket@last_a
  9393  0436                     l5765:	
  9394                           
  9395                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 626:         if (packet_counter == 0)
  9396  0436  082C               	movf	Sensor_Acq_ExecutePacket@packet_counter,w
  9397  0437  1903               	btfsc	3,2
  9398                           
  9399                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 627:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 629:             sensor_globalFlags.done = (uint8_t)1;
  9400  0438  1469               	bsf	_sensor_globalFlags,0	;volatile
  9401                           
  9402                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 631:         packet_counter--;
  9403  0439  3001               	movlw	1
  9404  043A  02AC               	subwf	Sensor_Acq_ExecutePacket@packet_counter,f
  9405                           
  9406                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 633:         if (sensor_globalFlags.check !
      +                          = 0)
  9407  043B  1CE9               	btfss	_sensor_globalFlags,1	;volatile
  9408  043C  2C3F               	goto	l303
  9409                           
  9410                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 634:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 635:             sensor_globalFlags.error = 1;
  9411  043D  1569               	bsf	_sensor_globalFlags,2	;volatile
  9412                           
  9413                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 636:             sensor_globalFlags.done = 
      +                          1;
  9414  043E  1469               	bsf	_sensor_globalFlags,0	;volatile
  9415  043F                     l303:	
  9416                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 637:         }
  9417                           
  9418                           
  9419                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 638:         sensor_globalFlags.check = 1;
  9420  043F  14E9               	bsf	_sensor_globalFlags,1	;volatile
  9421                           
  9422                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 639:     } while(sensor_globalFlags.done ==
      +                           0);
  9423  0440  1C69               	btfss	_sensor_globalFlags,0	;volatile
  9424  0441  2B93               	goto	l5729
  9425                           
  9426                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 641:     TMR2_StopTimer();
  9427  0442  3194  2480  3182   	fcall	_TMR2_StopTimer
  9428                           
  9429                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 642:     ADCOMCON = ADCOMCON_temp;
  9430  0445  0020               	movlb	0	; select bank0
  9431  0446  0821               	movf	Sensor_Acq_ExecutePacket@ADCOMCON_temp,w
  9432  0447  002E               	movlb	14	; select bank14
  9433  0448  0092               	movwf	18	;volatile
  9434                           
  9435                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 643:     AD1CON2 = AD1CON2_temp;
  9436  0449  0020               	movlb	0	; select bank0
  9437  044A  0822               	movf	Sensor_Acq_ExecutePacket@AD1CON2_temp,w
  9438  044B  002E               	movlb	14	; select bank14
  9439  044C  0093               	movwf	19	;volatile
  9440                           
  9441                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 644:     AD2CON2 = AD2CON2_temp;
  9442  044D  0020               	movlb	0	; select bank0
  9443  044E  0823               	movf	Sensor_Acq_ExecutePacket@AD2CON2_temp,w
  9444  044F  002F               	movlb	15	; select bank15
  9445  0450  0093               	movwf	19	;volatile
  9446                           
  9447                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 646:     if(sensor_globalFlags.error)
  9448  0451  0020               	movlb	0	; select bank0
  9449  0452  1D69               	btfss	_sensor_globalFlags,2	;volatile
  9450  0453  2C56               	goto	l305
  9451                           
  9452                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 647:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 648:         return MTOUCH_SENSOR_ERROR_scanOverrun;
  9453  0454  30FB               	movlw	251
  9454  0455  0008               	return
  9455  0456                     l305:	
  9456                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 649:     }
  9457                           
  9458                           
  9459                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 651:     if(sensor_globalFlags.interrupted)
  9460  0456  1DE9               	btfss	_sensor_globalFlags,3	;volatile
  9461  0457  2C5A               	goto	l5793
  9462                           
  9463                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 652:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 653:         return MTOUCH_SENSOR_ERROR_interruptedScan;
  9464  0458  30FA               	movlw	250
  9465  0459  0008               	return
  9466  045A                     l5793:	
  9467                           
  9468                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 657:     if (sensor1ForceEnabled)
  9469  045A  0824               	movf	Sensor_Acq_ExecutePacket@sensor1ForceEnabled,w
  9470  045B  1903               	btfsc	3,2
  9471  045C  2C63               	goto	l5797
  9472                           
  9473                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 658:         sensor_adc1->enabled = 0;
  9474  045D  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9475  045E  3E08               	addlw	8
  9476  045F  0086               	movwf	6
  9477  0460  3001               	movlw	1	; select bank2/3
  9478  0461  0087               	movwf	7
  9479  0462  1181               	bcf	1,3
  9480  0463                     l5797:	
  9481                           
  9482                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 660:     if (sensor2ForceEnabled)
  9483  0463  0825               	movf	Sensor_Acq_ExecutePacket@sensor2ForceEnabled,w
  9484  0464  1903               	btfsc	3,2
  9485  0465  2C6C               	goto	l5801
  9486                           
  9487                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 661:         sensor_adc2->enabled = 0;
  9488  0466  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9489  0467  3E08               	addlw	8
  9490  0468  0086               	movwf	6
  9491  0469  3001               	movlw	1	; select bank2/3
  9492  046A  0087               	movwf	7
  9493  046B  1181               	bcf	1,3
  9494  046C                     l5801:	
  9495                           
  9496                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 664:     if(Sensor_isEnabled(sensor_adc1) &
      +                          & !Sensor_isCalibrated(sensor_adc1))
  9497  046C  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9498  046D  3195  25C7  3182   	fcall	_Sensor_isEnabled
  9499  0470  3A00               	xorlw	0
  9500  0471  1903               	skipnz
  9501  0472  2C80               	goto	l5807
  9502  0473  0020               	movlb	0	; select bank0
  9503  0474  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9504  0475  3195  2520  3182   	fcall	_Sensor_isCalibrated
  9505  0478  3A00               	xorlw	0
  9506  0479  1D03               	skipz
  9507  047A  2C80               	goto	l5807
  9508                           
  9509                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 665:         Sensor_autoCalibration(sensor_
      +                          adc1);
  9510  047B  0020               	movlb	0	; select bank0
  9511  047C  082D               	movf	Sensor_Acq_ExecutePacket@sensor_adc1,w
  9512  047D  318F  276E  3182   	fcall	_Sensor_autoCalibration
  9513  0480                     l5807:	
  9514                           
  9515                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 667:     if(Sensor_isEnabled(sensor_adc2) &
      +                          & !Sensor_isCalibrated(sensor_adc2))
  9516  0480  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9517  0481  3195  25C7  3182   	fcall	_Sensor_isEnabled
  9518  0484  3A00               	xorlw	0
  9519  0485  1903               	skipnz
  9520  0486  2C92               	goto	l5813
  9521  0487  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9522  0488  3195  2520  3182   	fcall	_Sensor_isCalibrated
  9523  048B  3A00               	xorlw	0
  9524  048C  1D03               	skipz
  9525  048D  2C92               	goto	l5813
  9526                           
  9527                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 668:         Sensor_autoCalibration(sensor_
      +                          adc2);
  9528  048E  087B               	movf	Sensor_Acq_ExecutePacket@sensor_adc2,w
  9529  048F  318F  276E  3182   	fcall	_Sensor_autoCalibration
  9530  0492                     l5813:	
  9531                           
  9532                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 670:     AD1PRECON = 0;
  9533  0492  002E               	movlb	14	; select bank14
  9534  0493  0196               	clrf	22	;volatile
  9535                           
  9536                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 671:     AD2PRECON = 0;
  9537  0494  002F               	movlb	15	; select bank15
  9538  0495  0196               	clrf	22	;volatile
  9539                           
  9540                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 672:     AD1ACQCON = 0;
  9541  0496  002E               	movlb	14	; select bank14
  9542  0497  0197               	clrf	23	;volatile
  9543                           
  9544                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 673:     AD2ACQCON = 0;
  9545  0498  002F               	movlb	15	; select bank15
  9546  0499  0197               	clrf	23	;volatile
  9547                           
  9548                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 674:     AD1CON0bits.ADON = 0;
  9549  049A  002E               	movlb	14	; select bank14
  9550  049B  1011               	bcf	17,0	;volatile
  9551                           
  9552                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 675:     AD2CON0bits.ADON = 0;
  9553  049C  002F               	movlb	15	; select bank15
  9554  049D  1011               	bcf	17,0	;volatile
  9555  049E  2B2E               	goto	l5653
  9556  049F                     __end_of_Sensor_Acq_ExecutePacket:	
  9557                           
  9558                           	psect	text49
  9559  1480                     __ptext49:	
  9560 ;; *************** function _TMR2_StopTimer *****************
  9561 ;; Defined at:
  9562 ;;		line 85 in file "mcc_generated_files/tmr2.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;		None
  9565 ;; Auto vars:     Size  Location     Type
  9566 ;;		None
  9567 ;; Return value:  Size  Location     Type
  9568 ;;                  1    wreg      void 
  9569 ;; Registers used:
  9570 ;;		None
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9576 ;;      Params:         0       0       0       0       0       0       0       0
  9577 ;;      Locals:         0       0       0       0       0       0       0       0
  9578 ;;      Temps:          0       0       0       0       0       0       0       0
  9579 ;;      Totals:         0       0       0       0       0       0       0       0
  9580 ;;Total ram usage:        0 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; Hardware stack levels required when called:    4
  9583 ;; This function calls:
  9584 ;;		Nothing
  9585 ;; This function is called by:
  9586 ;;		_Sensor_Acq_ExecutePacket
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           
  9591                           ;psect for function _TMR2_StopTimer
  9592  1480                     _TMR2_StopTimer:	
  9593                           
  9594                           ;mcc_generated_files/tmr2.c: 88:     T2CONbits.TMR2ON = 0;
  9595                           
  9596                           ;incstack = 0
  9597                           ; Regs used in _TMR2_StopTimer: []
  9598  1480  0020               	movlb	0	; select bank0
  9599  1481  111C               	bcf	28,2	;volatile
  9600  1482  0008               	return
  9601  1483                     __end_of_TMR2_StopTimer:	
  9602                           
  9603                           	psect	text50
  9604  147D                     __ptext50:	
  9605 ;; *************** function _TMR2_StartTimer *****************
  9606 ;; Defined at:
  9607 ;;		line 79 in file "mcc_generated_files/tmr2.c"
  9608 ;; Parameters:    Size  Location     Type
  9609 ;;		None
  9610 ;; Auto vars:     Size  Location     Type
  9611 ;;		None
  9612 ;; Return value:  Size  Location     Type
  9613 ;;                  1    wreg      void 
  9614 ;; Registers used:
  9615 ;;		None
  9616 ;; Tracked objects:
  9617 ;;		On entry : 0/0
  9618 ;;		On exit  : 0/0
  9619 ;;		Unchanged: 0/0
  9620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9621 ;;      Params:         0       0       0       0       0       0       0       0
  9622 ;;      Locals:         0       0       0       0       0       0       0       0
  9623 ;;      Temps:          0       0       0       0       0       0       0       0
  9624 ;;      Totals:         0       0       0       0       0       0       0       0
  9625 ;;Total ram usage:        0 bytes
  9626 ;; Hardware stack levels used:    1
  9627 ;; Hardware stack levels required when called:    4
  9628 ;; This function calls:
  9629 ;;		Nothing
  9630 ;; This function is called by:
  9631 ;;		_Sensor_Acq_ExecutePacket
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           
  9636                           ;psect for function _TMR2_StartTimer
  9637  147D                     _TMR2_StartTimer:	
  9638                           
  9639                           ;mcc_generated_files/tmr2.c: 82:     T2CONbits.TMR2ON = 1;
  9640                           
  9641                           ;incstack = 0
  9642                           ; Regs used in _TMR2_StartTimer: []
  9643  147D  0020               	movlb	0	; select bank0
  9644  147E  151C               	bsf	28,2	;volatile
  9645  147F  0008               	return
  9646  1480                     __end_of_TMR2_StartTimer:	
  9647                           
  9648                           	psect	text51
  9649  14A9                     __ptext51:	
  9650 ;; *************** function _TMR2_LoadPeriodRegister *****************
  9651 ;; Defined at:
  9652 ;;		line 106 in file "mcc_generated_files/tmr2.c"
  9653 ;; Parameters:    Size  Location     Type
  9654 ;;  periodVal       1    wreg     unsigned char 
  9655 ;; Auto vars:     Size  Location     Type
  9656 ;;  periodVal       1    1[COMMON] unsigned char 
  9657 ;; Return value:  Size  Location     Type
  9658 ;;                  1    wreg      void 
  9659 ;; Registers used:
  9660 ;;		wreg
  9661 ;; Tracked objects:
  9662 ;;		On entry : 0/0
  9663 ;;		On exit  : 0/0
  9664 ;;		Unchanged: 0/0
  9665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9666 ;;      Params:         0       0       0       0       0       0       0       0
  9667 ;;      Locals:         1       0       0       0       0       0       0       0
  9668 ;;      Temps:          0       0       0       0       0       0       0       0
  9669 ;;      Totals:         1       0       0       0       0       0       0       0
  9670 ;;Total ram usage:        1 bytes
  9671 ;; Hardware stack levels used:    1
  9672 ;; Hardware stack levels required when called:    4
  9673 ;; This function calls:
  9674 ;;		Nothing
  9675 ;; This function is called by:
  9676 ;;		_Sensor_Acq_ExecutePacket
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           
  9681                           ;psect for function _TMR2_LoadPeriodRegister
  9682  14A9                     _TMR2_LoadPeriodRegister:	
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _TMR2_LoadPeriodRegister: [wreg]
  9686                           ;TMR2_LoadPeriodRegister@periodVal stored from wreg
  9687  14A9  00F1               	movwf	TMR2_LoadPeriodRegister@periodVal
  9688                           
  9689                           ;mcc_generated_files/tmr2.c: 106: void TMR2_LoadPeriodRegister(uint8_t periodVal);mcc_ge
      +                          nerated_files/tmr2.c: 107: {;mcc_generated_files/tmr2.c: 108:    PR2 = periodVal;
  9690  14AA  0871               	movf	TMR2_LoadPeriodRegister@periodVal,w
  9691  14AB  0020               	movlb	0	; select bank0
  9692  14AC  009B               	movwf	27	;volatile
  9693  14AD  0008               	return
  9694  14AE                     __end_of_TMR2_LoadPeriodRegister:	
  9695                           
  9696                           	psect	text52
  9697  049F                     __ptext52:	
  9698 ;; *************** function _Sensor_loadADCSettings *****************
  9699 ;; Defined at:
  9700 ;;		line 437 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;  sensor          1    wreg     PTR struct .
  9703 ;;		 -> NULL(0), mtouch_sensor(27), 
  9704 ;;  adc_index       1    2[COMMON] unsigned char 
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;  sensor          1    9[COMMON] PTR struct .
  9707 ;;		 -> NULL(0), mtouch_sensor(27), 
  9708 ;;  addressOffse    1    8[COMMON] unsigned char 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;                  1    wreg      void 
  9711 ;; Registers used:
  9712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9718 ;;      Params:         1       0       0       0       0       0       0       0
  9719 ;;      Locals:         4       0       0       0       0       0       0       0
  9720 ;;      Temps:          3       0       0       0       0       0       0       0
  9721 ;;      Totals:         8       0       0       0       0       0       0       0
  9722 ;;Total ram usage:        8 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    5
  9725 ;; This function calls:
  9726 ;;		_Sensor_isCalibrated
  9727 ;;		_Sensor_isCalibratingAcqTime
  9728 ;; This function is called by:
  9729 ;;		_Sensor_Acq_ExecutePacket
  9730 ;; This function uses a non-reentrant model
  9731 ;;
  9732                           
  9733                           
  9734                           ;psect for function _Sensor_loadADCSettings
  9735  049F                     _Sensor_loadADCSettings:	
  9736                           
  9737                           ;incstack = 0
  9738                           ; Regs used in _Sensor_loadADCSettings: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  9739                           ;Sensor_loadADCSettings@sensor stored from wreg
  9740  049F  00F9               	movwf	Sensor_loadADCSettings@sensor
  9741                           
  9742                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 437: static void Sensor_loadADCSettings(mto
      +                          uch_sensor_t* sensor, uint8_t adc_index);mcc_generated_files/mtouch/mtouch_sensor.c: 438
      +                          : {;mcc_generated_files/mtouch/mtouch_sensor.c: 439:     if (sensor == ((void*)0))
  9743  04A0  0879               	movf	Sensor_loadADCSettings@sensor,w
  9744  04A1  1903               	btfsc	3,2
  9745  04A2  0008               	return
  9746                           
  9747                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 442:     uint8_t addressOffset = (adc_index
      +                          ) ? 0x80 : 0x00;
  9748  04A3  0872               	movf	Sensor_loadADCSettings@adc_index,w
  9749  04A4  1D03               	btfss	3,2
  9750  04A5  2CA9               	goto	l3851
  9751  04A6  01F6               	clrf	_Sensor_loadADCSettings$562
  9752  04A7  01F7               	clrf	_Sensor_loadADCSettings$562+1
  9753  04A8  2CAD               	goto	l257
  9754  04A9                     l3851:	
  9755  04A9  3080               	movlw	128
  9756  04AA  00F6               	movwf	_Sensor_loadADCSettings$562
  9757  04AB  3000               	movlw	0
  9758  04AC  00F7               	movwf	_Sensor_loadADCSettings$562+1
  9759  04AD                     l257:	
  9760  04AD  0876               	movf	_Sensor_loadADCSettings$562,w
  9761  04AE  00F3               	movwf	??_Sensor_loadADCSettings
  9762  04AF  0873               	movf	??_Sensor_loadADCSettings,w
  9763  04B0  00F8               	movwf	Sensor_loadADCSettings@addressOffset
  9764                           
  9765                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 444:     *(&AD1CON0 + addressOffset) = (uin
      +                          t8_t) sensor->adcon0;
  9766  04B1  0A79               	incf	Sensor_loadADCSettings@sensor,w
  9767  04B2  0086               	movwf	6
  9768  04B3  3001               	movlw	1	; select bank2/3
  9769  04B4  0087               	movwf	7
  9770  04B5  0801               	movf	1,w
  9771  04B6  00F3               	movwf	??_Sensor_loadADCSettings
  9772  04B7  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9773  04B8  3E11               	addlw	17
  9774  04B9  00F4               	movwf	??_Sensor_loadADCSettings+1
  9775  04BA  01F5               	clrf	??_Sensor_loadADCSettings+2
  9776  04BB  3007               	movlw	7
  9777  04BC  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9778  04BD  0874               	movf	??_Sensor_loadADCSettings+1,w
  9779  04BE  0086               	movwf	6
  9780  04BF  0875               	movf	??_Sensor_loadADCSettings+2,w
  9781  04C0  0087               	movwf	7
  9782  04C1  0873               	movf	??_Sensor_loadADCSettings,w
  9783  04C2  0081               	movwf	1
  9784                           
  9785                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 445:     *(&AAD1CAP + addressOffset) = (uin
      +                          t8_t) sensor->addcap;
  9786  04C3  0879               	movf	Sensor_loadADCSettings@sensor,w
  9787  04C4  3E05               	addlw	5
  9788  04C5  0086               	movwf	6
  9789  04C6  3001               	movlw	1	; select bank2/3
  9790  04C7  0087               	movwf	7
  9791  04C8  0801               	movf	1,w
  9792  04C9  00F3               	movwf	??_Sensor_loadADCSettings
  9793  04CA  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9794  04CB  3E19               	addlw	25
  9795  04CC  00F4               	movwf	??_Sensor_loadADCSettings+1
  9796  04CD  01F5               	clrf	??_Sensor_loadADCSettings+2
  9797  04CE  3007               	movlw	7
  9798  04CF  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9799  04D0  0874               	movf	??_Sensor_loadADCSettings+1,w
  9800  04D1  0086               	movwf	6
  9801  04D2  0875               	movf	??_Sensor_loadADCSettings+2,w
  9802  04D3  0087               	movwf	7
  9803  04D4  0873               	movf	??_Sensor_loadADCSettings,w
  9804  04D5  0081               	movwf	1
  9805                           
  9806                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 446:     *(&AAD1CON2 + addressOffset) = (ui
      +                          nt8_t)(0b101<<4);
  9807  04D6  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9808  04D7  3E13               	addlw	19
  9809  04D8  00F3               	movwf	??_Sensor_loadADCSettings
  9810  04D9  01F4               	clrf	??_Sensor_loadADCSettings+1
  9811  04DA  3007               	movlw	7
  9812  04DB  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9813  04DC  0873               	movf	??_Sensor_loadADCSettings,w
  9814  04DD  0086               	movwf	6
  9815  04DE  0874               	movf	??_Sensor_loadADCSettings+1,w
  9816  04DF  0087               	movwf	7
  9817  04E0  3050               	movlw	80
  9818  04E1  0081               	movwf	1
  9819                           
  9820                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 447:     *(&AAD1GRD + addressOffset) &= (ui
      +                          nt8_t) 0b11111110;
  9821  04E2  30FE               	movlw	254
  9822  04E3  00F3               	movwf	??_Sensor_loadADCSettings
  9823  04E4  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9824  04E5  3E18               	addlw	24
  9825  04E6  0086               	movwf	6
  9826  04E7  0187               	clrf	7
  9827  04E8  3007               	movlw	7
  9828  04E9  3D87               	addwfc	7,f
  9829  04EA  0873               	movf	??_Sensor_loadADCSettings,w
  9830  04EB  0581               	andwf	1,f
  9831                           
  9832                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 449:     if (Sensor_isCalibrated(sensor))
  9833  04EC  0879               	movf	Sensor_loadADCSettings@sensor,w
  9834  04ED  3195  2520  3184   	fcall	_Sensor_isCalibrated
  9835  04F0  3A00               	xorlw	0
  9836  04F1  1903               	skipnz
  9837  04F2  2D07               	goto	l3865
  9838                           
  9839                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 450:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 451:         *(&AD1PRECON + addressOffset) = (uint8_t) sensor->precharge_tim
      +                          e;
  9840  04F3  0879               	movf	Sensor_loadADCSettings@sensor,w
  9841  04F4  3E02               	addlw	2
  9842  04F5  0086               	movwf	6
  9843  04F6  3001               	movlw	1	; select bank2/3
  9844  04F7  0087               	movwf	7
  9845  04F8  0801               	movf	1,w
  9846  04F9  00F3               	movwf	??_Sensor_loadADCSettings
  9847  04FA  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9848  04FB  3E16               	addlw	22
  9849  04FC  00F4               	movwf	??_Sensor_loadADCSettings+1
  9850  04FD  01F5               	clrf	??_Sensor_loadADCSettings+2
  9851  04FE  3007               	movlw	7
  9852  04FF  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9853  0500  0874               	movf	??_Sensor_loadADCSettings+1,w
  9854  0501  0086               	movwf	6
  9855  0502  0875               	movf	??_Sensor_loadADCSettings+2,w
  9856  0503  0087               	movwf	7
  9857  0504  0873               	movf	??_Sensor_loadADCSettings,w
  9858  0505  0081               	movwf	1
  9859  0506  2D1A               	goto	l3869
  9860  0507                     l3865:	
  9861                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 453:     }
  9862                           
  9863                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 452:         *(&AD1ACQCON + addressOffset) 
      +                          = (uint8_t) sensor->acquisition_time;
  9864                           
  9865                           
  9866                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 455:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 456:         *(&AD1PRECON + addressOffset) = (mtouch_sensor_time_t)32;
  9867  0507  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9868  0508  3E16               	addlw	22
  9869  0509  00F3               	movwf	??_Sensor_loadADCSettings
  9870  050A  01F4               	clrf	??_Sensor_loadADCSettings+1
  9871  050B  3007               	movlw	7
  9872  050C  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9873  050D  0873               	movf	??_Sensor_loadADCSettings,w
  9874  050E  0086               	movwf	6
  9875  050F  0874               	movf	??_Sensor_loadADCSettings+1,w
  9876  0510  0087               	movwf	7
  9877  0511  3020               	movlw	32
  9878  0512  0081               	movwf	1
  9879                           
  9880                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 457:         if (Sensor_isCalibratingAcqTim
      +                          e(sensor))
  9881  0513  0879               	movf	Sensor_loadADCSettings@sensor,w
  9882  0514  3195  2517  3184   	fcall	_Sensor_isCalibratingAcqTime
  9883  0517  3A00               	xorlw	0
  9884  0518  1903               	skipnz
  9885  0519  2D2D               	goto	l3871
  9886  051A                     l3869:	
  9887                           
  9888                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 458:             *(&AD1ACQCON + addressOffs
      +                          et) = (uint8_t) sensor->acquisition_time;
  9889  051A  0879               	movf	Sensor_loadADCSettings@sensor,w
  9890  051B  3E03               	addlw	3
  9891  051C  0086               	movwf	6
  9892  051D  3001               	movlw	1	; select bank2/3
  9893  051E  0087               	movwf	7
  9894  051F  0801               	movf	1,w
  9895  0520  00F3               	movwf	??_Sensor_loadADCSettings
  9896  0521  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9897  0522  3E17               	addlw	23
  9898  0523  00F4               	movwf	??_Sensor_loadADCSettings+1
  9899  0524  01F5               	clrf	??_Sensor_loadADCSettings+2
  9900  0525  3007               	movlw	7
  9901  0526  3DF5               	addwfc	??_Sensor_loadADCSettings+2,f
  9902  0527  0874               	movf	??_Sensor_loadADCSettings+1,w
  9903  0528  0086               	movwf	6
  9904  0529  0875               	movf	??_Sensor_loadADCSettings+2,w
  9905  052A  0087               	movwf	7
  9906  052B  0873               	movf	??_Sensor_loadADCSettings,w
  9907  052C  2D38               	goto	L7
  9908  052D                     l3871:	
  9909                           
  9910                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 460:             *(&AD1ACQCON + addressOffs
      +                          et) = (mtouch_sensor_time_t)32;
  9911  052D  0878               	movf	Sensor_loadADCSettings@addressOffset,w
  9912  052E  3E17               	addlw	23
  9913  052F  00F3               	movwf	??_Sensor_loadADCSettings
  9914  0530  01F4               	clrf	??_Sensor_loadADCSettings+1
  9915  0531  3007               	movlw	7
  9916  0532  3DF4               	addwfc	??_Sensor_loadADCSettings+1,f
  9917  0533  0873               	movf	??_Sensor_loadADCSettings,w
  9918  0534  0086               	movwf	6
  9919  0535  0874               	movf	??_Sensor_loadADCSettings+1,w
  9920  0536  0087               	movwf	7
  9921  0537  3020               	movlw	32
  9922  0538                     L7:	
  9923  0538  0081               	movwf	1
  9924                           
  9925                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 463:     packet_sample[adc_index] = ((mtouc
      +                          h_sensor_packetsample_t)(sensor->oversampling)<<9);
  9926                           
  9927                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 461:     }
  9928  0539  0879               	movf	Sensor_loadADCSettings@sensor,w
  9929  053A  3E04               	addlw	4
  9930  053B  0086               	movwf	6
  9931  053C  3001               	movlw	1	; select bank2/3
  9932  053D  0087               	movwf	7
  9933  053E  0801               	movf	1,w
  9934  053F  00F3               	movwf	??_Sensor_loadADCSettings
  9935  0540  01F4               	clrf	??_Sensor_loadADCSettings+1
  9936  0541  3009               	movlw	9
  9937  0542                     u2305:	
  9938  0542  35F3               	lslf	??_Sensor_loadADCSettings,f
  9939  0543  0DF4               	rlf	??_Sensor_loadADCSettings+1,f
  9940  0544  0B89               	decfsz	9,f
  9941  0545  2D42               	goto	u2305
  9942  0546  3572               	lslf	Sensor_loadADCSettings@adc_index,w
  9943  0547  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
  9944  0548  0086               	movwf	6
  9945  0549  0187               	clrf	7
  9946  054A  0873               	movf	??_Sensor_loadADCSettings,w
  9947  054B  3FC0               	movwi [0]fsr1
  9948  054C  0874               	movf	??_Sensor_loadADCSettings+1,w
  9949  054D  3FC1               	movwi [1]fsr1
  9950  054E  0008               	return
  9951  054F                     __end_of_Sensor_loadADCSettings:	
  9952                           
  9953                           	psect	text53
  9954  1520                     __ptext53:	
  9955 ;; *************** function _Sensor_isCalibrated *****************
  9956 ;; Defined at:
  9957 ;;		line 920 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
  9958 ;; Parameters:    Size  Location     Type
  9959 ;;  sensor          1    wreg     PTR struct .
  9960 ;;		 -> NULL(0), mtouch_sensor(27), 
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;  sensor          1    1[COMMON] PTR struct .
  9963 ;;		 -> NULL(0), mtouch_sensor(27), 
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  1    wreg      _Bool 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9973 ;;      Params:         0       0       0       0       0       0       0       0
  9974 ;;      Locals:         1       0       0       0       0       0       0       0
  9975 ;;      Temps:          0       0       0       0       0       0       0       0
  9976 ;;      Totals:         1       0       0       0       0       0       0       0
  9977 ;;Total ram usage:        1 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:    4
  9980 ;; This function calls:
  9981 ;;		Nothing
  9982 ;; This function is called by:
  9983 ;;		_Sensor_Acquisition
  9984 ;;		_Sensor_loadADCSettings
  9985 ;;		_Sensor_Acq_ExecutePacket
  9986 ;; This function uses a non-reentrant model
  9987 ;;
  9988                           
  9989                           
  9990                           ;psect for function _Sensor_isCalibrated
  9991  1520                     _Sensor_isCalibrated:	
  9992                           
  9993                           ;incstack = 0
  9994                           ; Regs used in _Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
  9995                           ;Sensor_isCalibrated@sensor stored from wreg
  9996  1520  00F1               	movwf	Sensor_isCalibrated@sensor
  9997                           
  9998                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 920: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          921: {;mcc_generated_files/mtouch/mtouch_sensor.c: 922:     return (_Bool)sensor->calibr
      +                          ated;
  9999  1521  0871               	movf	Sensor_isCalibrated@sensor,w
 10000  1522  3E08               	addlw	8
 10001  1523  0086               	movwf	6
 10002  1524  3001               	movlw	1	; select bank2/3
 10003  1525  0087               	movwf	7
 10004  1526  0C01               	rrf	1,w
 10005  1527  0C89               	rrf	9,f
 10006  1528  3901               	andlw	1
 10007  1529  0008               	return
 10008  152A                     __end_of_Sensor_isCalibrated:	
 10009                           
 10010                           	psect	text54
 10011  15C7                     __ptext54:	
 10012 ;; *************** function _Sensor_isEnabled *****************
 10013 ;; Defined at:
 10014 ;;		line 855 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10015 ;; Parameters:    Size  Location     Type
 10016 ;;  sensor          1    wreg     PTR struct .
 10017 ;;		 -> NULL(0), mtouch_sensor(27), 
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;  sensor          1    2[COMMON] PTR struct .
 10020 ;;		 -> NULL(0), mtouch_sensor(27), 
 10021 ;; Return value:  Size  Location     Type
 10022 ;;                  1    wreg      _Bool 
 10023 ;; Registers used:
 10024 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10025 ;; Tracked objects:
 10026 ;;		On entry : 0/0
 10027 ;;		On exit  : 0/0
 10028 ;;		Unchanged: 0/0
 10029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10030 ;;      Params:         0       0       0       0       0       0       0       0
 10031 ;;      Locals:         1       0       0       0       0       0       0       0
 10032 ;;      Temps:          1       0       0       0       0       0       0       0
 10033 ;;      Totals:         2       0       0       0       0       0       0       0
 10034 ;;Total ram usage:        2 bytes
 10035 ;; Hardware stack levels used:    1
 10036 ;; Hardware stack levels required when called:    4
 10037 ;; This function calls:
 10038 ;;		Nothing
 10039 ;; This function is called by:
 10040 ;;		_Sensor_Service
 10041 ;;		_Sensor_postAcquisitionProcess
 10042 ;;		_Sensor_Acq_ExecutePacket
 10043 ;; This function uses a non-reentrant model
 10044 ;;
 10045                           
 10046                           
 10047                           ;psect for function _Sensor_isEnabled
 10048  15C7                     _Sensor_isEnabled:	
 10049                           
 10050                           ;incstack = 0
 10051                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
 10052                           ;Sensor_isEnabled@sensor stored from wreg
 10053  15C7  00F2               	movwf	Sensor_isEnabled@sensor
 10054                           
 10055                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 855: static _Bool Sensor_isEnabled(mtouch_s
      +                          ensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 856: {;mcc_generated_files/
      +                          mtouch/mtouch_sensor.c: 857:     if(sensor!=((void*)0))
 10056  15C8  0872               	movf	Sensor_isEnabled@sensor,w
 10057  15C9  1903               	btfsc	3,2
 10058  15CA  2DD6               	goto	l3829
 10059                           
 10060                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 858:         return (_Bool)sensor->enabled;
 10061  15CB  0872               	movf	Sensor_isEnabled@sensor,w
 10062  15CC  3E08               	addlw	8
 10063  15CD  0086               	movwf	6
 10064  15CE  3001               	movlw	1	; select bank2/3
 10065  15CF  0087               	movwf	7
 10066  15D0  0C01               	rrf	1,w
 10067  15D1  00F1               	movwf	??_Sensor_isEnabled
 10068  15D2  0CF1               	rrf	??_Sensor_isEnabled,f
 10069  15D3  0C71               	rrf	??_Sensor_isEnabled,w
 10070  15D4  3901               	andlw	1
 10071  15D5  0008               	return
 10072  15D6                     l3829:	
 10073                           
 10074                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 860:         return 0;
 10075  15D6  3000               	movlw	0
 10076  15D7  0008               	return
 10077  15D8                     __end_of_Sensor_isEnabled:	
 10078                           
 10079                           	psect	text55
 10080  155C                     __ptext55:	
 10081 ;; *************** function _Sensor_isActive *****************
 10082 ;; Defined at:
 10083 ;;		line 882 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;  sensor          1    wreg     PTR struct .
 10086 ;;		 -> NULL(0), mtouch_sensor(27), 
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;  sensor          1    1[COMMON] PTR struct .
 10089 ;;		 -> NULL(0), mtouch_sensor(27), 
 10090 ;; Return value:  Size  Location     Type
 10091 ;;                  1    wreg      _Bool 
 10092 ;; Registers used:
 10093 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10094 ;; Tracked objects:
 10095 ;;		On entry : 0/0
 10096 ;;		On exit  : 0/0
 10097 ;;		Unchanged: 0/0
 10098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10099 ;;      Params:         0       0       0       0       0       0       0       0
 10100 ;;      Locals:         1       0       0       0       0       0       0       0
 10101 ;;      Temps:          0       0       0       0       0       0       0       0
 10102 ;;      Totals:         1       0       0       0       0       0       0       0
 10103 ;;Total ram usage:        1 bytes
 10104 ;; Hardware stack levels used:    1
 10105 ;; Hardware stack levels required when called:    4
 10106 ;; This function calls:
 10107 ;;		Nothing
 10108 ;; This function is called by:
 10109 ;;		_Sensor_Acquisition
 10110 ;;		_Sensor_Acq_ExecutePacket
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           
 10115                           ;psect for function _Sensor_isActive
 10116  155C                     _Sensor_isActive:	
 10117                           
 10118                           ;incstack = 0
 10119                           ; Regs used in _Sensor_isActive: [wreg+fsr1l+fsr1h+status,2+status,0]
 10120                           ;Sensor_isActive@sensor stored from wreg
 10121  155C  00F1               	movwf	Sensor_isActive@sensor
 10122                           
 10123                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 882: static __attribute__((inline)) _Bool S
      +                          ensor_isActive(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 883:
      +                           {;mcc_generated_files/mtouch/mtouch_sensor.c: 884:     if(sensor == ((void*)0))
 10124  155D  0871               	movf	Sensor_isActive@sensor,w
 10125  155E  1D03               	btfss	3,2
 10126  155F  2D62               	goto	l3839
 10127                           
 10128                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 885:         return 0;
 10129  1560  3000               	movlw	0
 10130  1561  0008               	return
 10131  1562                     l3839:	
 10132                           
 10133                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 887:     return (_Bool)sensor->active;
 10134  1562  0871               	movf	Sensor_isActive@sensor,w
 10135  1563  3E08               	addlw	8
 10136  1564  0086               	movwf	6
 10137  1565  3001               	movlw	1	; select bank2/3
 10138  1566  0087               	movwf	7
 10139  1567  0C01               	rrf	1,w
 10140  1568  3901               	andlw	1
 10141  1569  0008               	return
 10142  156A                     __end_of_Sensor_isActive:	
 10143                           
 10144                           	psect	text56
 10145  0F6E                     __ptext56:	
 10146 ;; *************** function _Sensor_autoCalibration *****************
 10147 ;; Defined at:
 10148 ;;		line 688 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;  sensor          1    wreg     PTR struct .
 10151 ;;		 -> NULL(0), mtouch_sensor(27), 
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;  sensor          1   10[COMMON] PTR struct .
 10154 ;;		 -> NULL(0), mtouch_sensor(27), 
 10155 ;;  adcIndex        1    9[COMMON] unsigned char 
 10156 ;; Return value:  Size  Location     Type
 10157 ;;                  1    wreg      void 
 10158 ;; Registers used:
 10159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10160 ;; Tracked objects:
 10161 ;;		On entry : 0/0
 10162 ;;		On exit  : 0/0
 10163 ;;		Unchanged: 0/0
 10164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10165 ;;      Params:         0       0       0       0       0       0       0       0
 10166 ;;      Locals:         2       0       0       0       0       0       0       0
 10167 ;;      Temps:          4       0       0       0       0       0       0       0
 10168 ;;      Totals:         6       0       0       0       0       0       0       0
 10169 ;;Total ram usage:        6 bytes
 10170 ;; Hardware stack levels used:    1
 10171 ;; Hardware stack levels required when called:    5
 10172 ;; This function calls:
 10173 ;;		_Sensor_getScanGroupIndex
 10174 ;;		_Sensor_isCalibratingAcqTime
 10175 ;;		_Sensor_setCalibratAcqTime
 10176 ;;		_Sensor_setCalibrated
 10177 ;;		_abs
 10178 ;; This function is called by:
 10179 ;;		_Sensor_Acq_ExecutePacket
 10180 ;; This function uses a non-reentrant model
 10181 ;;
 10182                           
 10183                           
 10184                           ;psect for function _Sensor_autoCalibration
 10185  0F6E                     _Sensor_autoCalibration:	
 10186                           
 10187                           ;incstack = 0
 10188                           ; Regs used in _Sensor_autoCalibration: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10189                           ;Sensor_autoCalibration@sensor stored from wreg
 10190  0F6E  00FA               	movwf	Sensor_autoCalibration@sensor
 10191                           
 10192                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 688: static void Sensor_autoCalibration(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 689: {;mcc_generated_f
      +                          iles/mtouch/mtouch_sensor.c: 690:     uint8_t adcIndex = Sensor_getScanGroupIndex(sensor
      +                          );
 10193  0F6F  087A               	movf	Sensor_autoCalibration@sensor,w
 10194  0F70  3188  20E6  318F   	fcall	_Sensor_getScanGroupIndex
 10195  0F73  00F5               	movwf	??_Sensor_autoCalibration
 10196  0F74  0875               	movf	??_Sensor_autoCalibration,w
 10197  0F75  00F9               	movwf	Sensor_autoCalibration@adcIndex
 10198                           
 10199                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 692:     if(!Sensor_isCalibratingAcqTime(se
      +                          nsor))
 10200  0F76  087A               	movf	Sensor_autoCalibration@sensor,w
 10201  0F77  3195  2517  318F   	fcall	_Sensor_isCalibratingAcqTime
 10202  0F7A  3A00               	xorlw	0
 10203  0F7B  1D03               	skipz
 10204  0F7C  2FAF               	goto	l3891
 10205                           
 10206                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 693:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 694:         if(packet_sample[adcIndex] > ((mtouch_sensor_packetsample_t)(se
      +                          nsor->oversampling)<<9))
 10207  0F7D  3579               	lslf	Sensor_autoCalibration@adcIndex,w
 10208  0F7E  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
 10209  0F7F  0086               	movwf	6
 10210  0F80  0187               	clrf	7
 10211  0F81  3F40               	moviw [0]fsr1
 10212  0F82  00F5               	movwf	??_Sensor_autoCalibration
 10213  0F83  3F41               	moviw [1]fsr1
 10214  0F84  00F6               	movwf	??_Sensor_autoCalibration+1
 10215  0F85  087A               	movf	Sensor_autoCalibration@sensor,w
 10216  0F86  3E04               	addlw	4
 10217  0F87  0086               	movwf	6
 10218  0F88  3001               	movlw	1	; select bank2/3
 10219  0F89  0087               	movwf	7
 10220  0F8A  0801               	movf	1,w
 10221  0F8B  00F7               	movwf	??_Sensor_autoCalibration+2
 10222  0F8C  01F8               	clrf	??_Sensor_autoCalibration+3
 10223  0F8D  3009               	movlw	9
 10224  0F8E                     u2325:	
 10225  0F8E  35F7               	lslf	??_Sensor_autoCalibration+2,f
 10226  0F8F  0DF8               	rlf	??_Sensor_autoCalibration+3,f
 10227  0F90  0B89               	decfsz	9,f
 10228  0F91  2F8E               	goto	u2325
 10229  0F92  0876               	movf	??_Sensor_autoCalibration+1,w
 10230  0F93  0278               	subwf	??_Sensor_autoCalibration+3,w
 10231  0F94  1D03               	skipz
 10232  0F95  2F98               	goto	u2335
 10233  0F96  0875               	movf	??_Sensor_autoCalibration,w
 10234  0F97  0277               	subwf	??_Sensor_autoCalibration+2,w
 10235  0F98                     u2335:	
 10236  0F98  1803               	skipnc
 10237  0F99  2FAB               	goto	l3889
 10238                           
 10239                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 695:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 696:             if(++(sensor->addcap) >= (uint8_t)0x0F)
 10240  0F9A  3001               	movlw	1
 10241  0F9B  00F5               	movwf	??_Sensor_autoCalibration
 10242  0F9C  087A               	movf	Sensor_autoCalibration@sensor,w
 10243  0F9D  3E05               	addlw	5
 10244  0F9E  0086               	movwf	6
 10245  0F9F  3001               	movlw	1	; select bank2/3
 10246  0FA0  0087               	movwf	7
 10247  0FA1  0875               	movf	??_Sensor_autoCalibration,w
 10248  0FA2  0781               	addwf	1,f
 10249  0FA3  300F               	movlw	15
 10250  0FA4  0201               	subwf	1,w
 10251  0FA5  1C03               	skipc
 10252  0FA6  0008               	return
 10253                           
 10254                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 697:                 Sensor_setCalibratAcqT
      +                          ime(sensor);
 10255  0FA7  087A               	movf	Sensor_autoCalibration@sensor,w
 10256  0FA8  3195  2587         	fcall	_Sensor_setCalibratAcqTime
 10257  0FAA  0008               	return
 10258  0FAB                     l3889:	
 10259                           
 10260                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 700:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 701:              Sensor_setCalibratAcqTime(sensor);
 10261  0FAB  087A               	movf	Sensor_autoCalibration@sensor,w
 10262  0FAC  3195  2587         	fcall	_Sensor_setCalibratAcqTime
 10263  0FAE  0008               	return
 10264  0FAF                     l3891:	
 10265                           
 10266                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 705:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 706:         if((mtouch_sensor_packetsample_t)abs(packet_sample[adcIndex] - 
      +                          sensor->rawSample) < ((mtouch_sensor_packetsample_t)(sensor->oversampling)<<1))
 10267  0FAF  087A               	movf	Sensor_autoCalibration@sensor,w
 10268  0FB0  3E04               	addlw	4
 10269  0FB1  0086               	movwf	6
 10270  0FB2  3001               	movlw	1	; select bank2/3
 10271  0FB3  0087               	movwf	7
 10272  0FB4  0801               	movf	1,w
 10273  0FB5  00F5               	movwf	??_Sensor_autoCalibration
 10274  0FB6  01F6               	clrf	??_Sensor_autoCalibration+1
 10275  0FB7  35F5               	lslf	??_Sensor_autoCalibration,f
 10276  0FB8  0DF6               	rlf	??_Sensor_autoCalibration+1,f
 10277  0FB9  087A               	movf	Sensor_autoCalibration@sensor,w
 10278  0FBA  3E06               	addlw	6
 10279  0FBB  0086               	movwf	6
 10280  0FBC  3001               	movlw	1	; select bank2/3
 10281  0FBD  0087               	movwf	7
 10282  0FBE  3579               	lslf	Sensor_autoCalibration@adcIndex,w
 10283  0FBF  3E53               	addlw	(low (_packet_sample| 0))& (0+255)
 10284  0FC0  0084               	movwf	4
 10285  0FC1  0185               	clrf	5
 10286  0FC2  3F40               	moviw [0]fsr1
 10287  0FC3  0200               	subwf	0,w
 10288  0FC4  00F1               	movwf	abs@a
 10289  0FC5  3101               	addfsr 0,1
 10290  0FC6  3F41               	moviw [1]fsr1
 10291  0FC7  3B00               	subwfb	0,w
 10292  0FC8  00F2               	movwf	abs@a+1
 10293  0FC9  3196  26A0  318F   	fcall	_abs
 10294  0FCC  0876               	movf	??_Sensor_autoCalibration+1,w
 10295  0FCD  0272               	subwf	?_abs+1,w
 10296  0FCE  1D03               	skipz
 10297  0FCF  2FD2               	goto	u2355
 10298  0FD0  0875               	movf	??_Sensor_autoCalibration,w
 10299  0FD1  0271               	subwf	?_abs,w
 10300  0FD2                     u2355:	
 10301  0FD2  1803               	skipnc
 10302  0FD3  2FE1               	goto	l3897
 10303                           
 10304                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 707:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 708:             sensor->precharge_time = (mtouch_sensor_time_t)32;
 10305  0FD4  3020               	movlw	32
 10306  0FD5  00F5               	movwf	??_Sensor_autoCalibration
 10307  0FD6  087A               	movf	Sensor_autoCalibration@sensor,w
 10308  0FD7  3E02               	addlw	2
 10309  0FD8  0086               	movwf	6
 10310  0FD9  3001               	movlw	1	; select bank2/3
 10311  0FDA  0087               	movwf	7
 10312  0FDB  0875               	movf	??_Sensor_autoCalibration,w
 10313  0FDC  0081               	movwf	1
 10314                           
 10315                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 709:             Sensor_setCalibrated(senso
      +                          r);
 10316  0FDD  087A               	movf	Sensor_autoCalibration@sensor,w
 10317  0FDE  3195  254E         	fcall	_Sensor_setCalibrated
 10318                           
 10319                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 710:         }
 10320  0FE0  0008               	return
 10321  0FE1                     l3897:	
 10322                           
 10323                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 712:         {;mcc_generated_files/mtouch/m
      +                          touch_sensor.c: 716:             sensor->acquisition_time += (uint8_t)2;
 10324  0FE1  3002               	movlw	2
 10325  0FE2  00F5               	movwf	??_Sensor_autoCalibration
 10326  0FE3  087A               	movf	Sensor_autoCalibration@sensor,w
 10327  0FE4  3E03               	addlw	3
 10328  0FE5  0086               	movwf	6
 10329  0FE6  3001               	movlw	1	; select bank2/3
 10330  0FE7  0087               	movwf	7
 10331  0FE8  0875               	movf	??_Sensor_autoCalibration,w
 10332  0FE9  0781               	addwf	1,f
 10333                           
 10334                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 717:             if((sensor->acquisition_ti
      +                          me)>=(mtouch_sensor_time_t)32)
 10335  0FEA  087A               	movf	Sensor_autoCalibration@sensor,w
 10336  0FEB  3E03               	addlw	3
 10337  0FEC  0086               	movwf	6
 10338  0FED  3001               	movlw	1	; select bank2/3
 10339  0FEE  0087               	movwf	7
 10340  0FEF  3020               	movlw	32
 10341  0FF0  0201               	subwf	1,w
 10342  0FF1  1C03               	skipc
 10343  0FF2  0008               	return
 10344                           
 10345                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 718:             {;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 719:                 sensor->precharge_time = (mtouch_sensor_time_t)
      +                          32;
 10346  0FF3  3020               	movlw	32
 10347  0FF4  00F5               	movwf	??_Sensor_autoCalibration
 10348  0FF5  087A               	movf	Sensor_autoCalibration@sensor,w
 10349  0FF6  3E02               	addlw	2
 10350  0FF7  0086               	movwf	6
 10351  0FF8  3001               	movlw	1	; select bank2/3
 10352  0FF9  0087               	movwf	7
 10353  0FFA  0875               	movf	??_Sensor_autoCalibration,w
 10354  0FFB  0081               	movwf	1
 10355                           
 10356                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 720:                 Sensor_setCalibrated(s
      +                          ensor);
 10357  0FFC  087A               	movf	Sensor_autoCalibration@sensor,w
 10358  0FFD  3195  254E         	fcall	_Sensor_setCalibrated
 10359  0FFF  0008               	return
 10360  1000                     __end_of_Sensor_autoCalibration:	
 10361                           
 10362                           	psect	text57
 10363  16A0                     __ptext57:	
 10364 ;; *************** function _abs *****************
 10365 ;; Defined at:
 10366 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  a               2    1[COMMON] int 
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;		None
 10371 ;; Return value:  Size  Location     Type
 10372 ;;                  2    1[COMMON] int 
 10373 ;; Registers used:
 10374 ;;		wreg, status,2, status,0
 10375 ;; Tracked objects:
 10376 ;;		On entry : 0/0
 10377 ;;		On exit  : 0/0
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10380 ;;      Params:         2       0       0       0       0       0       0       0
 10381 ;;      Locals:         0       0       0       0       0       0       0       0
 10382 ;;      Temps:          2       0       0       0       0       0       0       0
 10383 ;;      Totals:         4       0       0       0       0       0       0       0
 10384 ;;Total ram usage:        4 bytes
 10385 ;; Hardware stack levels used:    1
 10386 ;; Hardware stack levels required when called:    4
 10387 ;; This function calls:
 10388 ;;		Nothing
 10389 ;; This function is called by:
 10390 ;;		_Sensor_postAcquisitionProcess
 10391 ;;		_Sensor_Acq_ExecutePacket
 10392 ;;		_Sensor_autoCalibration
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           
 10397                           ;psect for function _abs
 10398  16A0                     _abs:	
 10399                           
 10400                           ;incstack = 0
 10401                           ; Regs used in _abs: [wreg+status,2+status,0]
 10402  16A0  0872               	movf	abs@a+1,w
 10403  16A1  3A80               	xorlw	128
 10404  16A2  00F3               	movwf	??_abs
 10405  16A3  3080               	movlw	128
 10406  16A4  0273               	subwf	??_abs,w
 10407  16A5  1D03               	skipz
 10408  16A6  2EA9               	goto	u2195
 10409  16A7  3001               	movlw	1
 10410  16A8  0271               	subwf	abs@a,w
 10411  16A9                     u2195:	
 10412  16A9  1803               	skipnc
 10413  16AA  0008               	return
 10414  16AB  0971               	comf	abs@a,w
 10415  16AC  00F3               	movwf	??_abs
 10416  16AD  0972               	comf	abs@a+1,w
 10417  16AE  00F4               	movwf	??_abs+1
 10418  16AF  0AF3               	incf	??_abs,f
 10419  16B0  1903               	skipnz
 10420  16B1  0AF4               	incf	??_abs+1,f
 10421  16B2  0873               	movf	??_abs,w
 10422  16B3  00F1               	movwf	?_abs
 10423  16B4  0874               	movf	??_abs+1,w
 10424  16B5  00F2               	movwf	?_abs+1
 10425  16B6  0008               	return
 10426  16B7                     __end_of_abs:	
 10427                           
 10428                           	psect	text58
 10429  154E                     __ptext58:	
 10430 ;; *************** function _Sensor_setCalibrated *****************
 10431 ;; Defined at:
 10432 ;;		line 925 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;  sensor          1    wreg     PTR struct .
 10435 ;;		 -> NULL(0), mtouch_sensor(27), 
 10436 ;; Auto vars:     Size  Location     Type
 10437 ;;  sensor          1    1[COMMON] PTR struct .
 10438 ;;		 -> NULL(0), mtouch_sensor(27), 
 10439 ;; Return value:  Size  Location     Type
 10440 ;;                  1    wreg      void 
 10441 ;; Registers used:
 10442 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10443 ;; Tracked objects:
 10444 ;;		On entry : 0/0
 10445 ;;		On exit  : 0/0
 10446 ;;		Unchanged: 0/0
 10447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10448 ;;      Params:         0       0       0       0       0       0       0       0
 10449 ;;      Locals:         1       0       0       0       0       0       0       0
 10450 ;;      Temps:          0       0       0       0       0       0       0       0
 10451 ;;      Totals:         1       0       0       0       0       0       0       0
 10452 ;;Total ram usage:        1 bytes
 10453 ;; Hardware stack levels used:    1
 10454 ;; Hardware stack levels required when called:    4
 10455 ;; This function calls:
 10456 ;;		Nothing
 10457 ;; This function is called by:
 10458 ;;		_Sensor_autoCalibration
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           
 10463                           ;psect for function _Sensor_setCalibrated
 10464  154E                     _Sensor_setCalibrated:	
 10465                           
 10466                           ;incstack = 0
 10467                           ; Regs used in _Sensor_setCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0]
 10468                           ;Sensor_setCalibrated@sensor stored from wreg
 10469  154E  00F1               	movwf	Sensor_setCalibrated@sensor
 10470                           
 10471                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 925: static __attribute__((inline)) void Se
      +                          nsor_setCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          926: {;mcc_generated_files/mtouch/mtouch_sensor.c: 927:     sensor->calibrated = 1;
 10472  154F  0871               	movf	Sensor_setCalibrated@sensor,w
 10473  1550  3E08               	addlw	8
 10474  1551  0086               	movwf	6
 10475  1552  3001               	movlw	1	; select bank2/3
 10476  1553  0087               	movwf	7
 10477  1554  1501               	bsf	1,2
 10478                           
 10479                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 928:     sensor->acqTime_cal = 0;
 10480  1555  0871               	movf	Sensor_setCalibrated@sensor,w
 10481  1556  3E08               	addlw	8
 10482  1557  0086               	movwf	6
 10483  1558  3001               	movlw	1	; select bank2/3
 10484  1559  0087               	movwf	7
 10485  155A  1201               	bcf	1,4
 10486  155B  0008               	return
 10487  155C                     __end_of_Sensor_setCalibrated:	
 10488                           
 10489                           	psect	text59
 10490  1587                     __ptext59:	
 10491 ;; *************** function _Sensor_setCalibratAcqTime *****************
 10492 ;; Defined at:
 10493 ;;		line 931 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;  sensor          1    wreg     PTR struct .
 10496 ;;		 -> NULL(0), mtouch_sensor(27), 
 10497 ;; Auto vars:     Size  Location     Type
 10498 ;;  sensor          1    1[COMMON] PTR struct .
 10499 ;;		 -> NULL(0), mtouch_sensor(27), 
 10500 ;; Return value:  Size  Location     Type
 10501 ;;                  1    wreg      void 
 10502 ;; Registers used:
 10503 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10504 ;; Tracked objects:
 10505 ;;		On entry : 0/0
 10506 ;;		On exit  : 0/0
 10507 ;;		Unchanged: 0/0
 10508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10509 ;;      Params:         0       0       0       0       0       0       0       0
 10510 ;;      Locals:         1       0       0       0       0       0       0       0
 10511 ;;      Temps:          0       0       0       0       0       0       0       0
 10512 ;;      Totals:         1       0       0       0       0       0       0       0
 10513 ;;Total ram usage:        1 bytes
 10514 ;; Hardware stack levels used:    1
 10515 ;; Hardware stack levels required when called:    4
 10516 ;; This function calls:
 10517 ;;		Nothing
 10518 ;; This function is called by:
 10519 ;;		_Sensor_autoCalibration
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           
 10524                           ;psect for function _Sensor_setCalibratAcqTime
 10525  1587                     _Sensor_setCalibratAcqTime:	
 10526                           
 10527                           ;incstack = 0
 10528                           ; Regs used in _Sensor_setCalibratAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10529                           ;Sensor_setCalibratAcqTime@sensor stored from wreg
 10530  1587  00F1               	movwf	Sensor_setCalibratAcqTime@sensor
 10531                           
 10532                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 931: static __attribute__((inline)) void Se
      +                          nsor_setCalibratAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_senso
      +                          r.c: 932: {;mcc_generated_files/mtouch/mtouch_sensor.c: 933:     sensor->acqTime_cal = 1
      +                          ;
 10533  1588  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10534  1589  3E08               	addlw	8
 10535  158A  0086               	movwf	6
 10536  158B  3001               	movlw	1	; select bank2/3
 10537  158C  0087               	movwf	7
 10538  158D  1601               	bsf	1,4
 10539                           
 10540                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 934:     sensor->acquisition_time = (mtouch
      +                          _sensor_time_t)1;
 10541  158E  0871               	movf	Sensor_setCalibratAcqTime@sensor,w
 10542  158F  3E03               	addlw	3
 10543  1590  0086               	movwf	6
 10544  1591  3001               	movlw	1	; select bank2/3
 10545  1592  0087               	movwf	7
 10546  1593  0181               	clrf	1
 10547  1594  0A81               	incf	1,f
 10548  1595  0008               	return
 10549  1596                     __end_of_Sensor_setCalibratAcqTime:	
 10550                           
 10551                           	psect	text60
 10552  1517                     __ptext60:	
 10553 ;; *************** function _Sensor_isCalibratingAcqTime *****************
 10554 ;; Defined at:
 10555 ;;		line 937 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10556 ;; Parameters:    Size  Location     Type
 10557 ;;  sensor          1    wreg     PTR struct .
 10558 ;;		 -> NULL(0), mtouch_sensor(27), 
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;  sensor          1    1[COMMON] PTR struct .
 10561 ;;		 -> NULL(0), mtouch_sensor(27), 
 10562 ;; Return value:  Size  Location     Type
 10563 ;;                  1    wreg      _Bool 
 10564 ;; Registers used:
 10565 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10566 ;; Tracked objects:
 10567 ;;		On entry : 0/0
 10568 ;;		On exit  : 0/0
 10569 ;;		Unchanged: 0/0
 10570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10571 ;;      Params:         0       0       0       0       0       0       0       0
 10572 ;;      Locals:         1       0       0       0       0       0       0       0
 10573 ;;      Temps:          0       0       0       0       0       0       0       0
 10574 ;;      Totals:         1       0       0       0       0       0       0       0
 10575 ;;Total ram usage:        1 bytes
 10576 ;; Hardware stack levels used:    1
 10577 ;; Hardware stack levels required when called:    4
 10578 ;; This function calls:
 10579 ;;		Nothing
 10580 ;; This function is called by:
 10581 ;;		_Sensor_loadADCSettings
 10582 ;;		_Sensor_autoCalibration
 10583 ;; This function uses a non-reentrant model
 10584 ;;
 10585                           
 10586                           
 10587                           ;psect for function _Sensor_isCalibratingAcqTime
 10588  1517                     _Sensor_isCalibratingAcqTime:	
 10589                           
 10590                           ;incstack = 0
 10591                           ; Regs used in _Sensor_isCalibratingAcqTime: [wreg+fsr1l+fsr1h+status,2+status,0]
 10592                           ;Sensor_isCalibratingAcqTime@sensor stored from wreg
 10593  1517  00F1               	movwf	Sensor_isCalibratingAcqTime@sensor
 10594                           
 10595                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 937: static __attribute__((inline)) _Bool S
      +                          ensor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_se
      +                          nsor.c: 938: {;mcc_generated_files/mtouch/mtouch_sensor.c: 939:     return (_Bool)sensor
      +                          ->acqTime_cal;
 10596  1518  0871               	movf	Sensor_isCalibratingAcqTime@sensor,w
 10597  1519  3E08               	addlw	8
 10598  151A  0086               	movwf	6
 10599  151B  3001               	movlw	1	; select bank2/3
 10600  151C  0087               	movwf	7
 10601  151D  0E01               	swapf	1,w
 10602  151E  3901               	andlw	1
 10603  151F  0008               	return
 10604  1520                     __end_of_Sensor_isCalibratingAcqTime:	
 10605                           
 10606                           	psect	text61
 10607  08E6                     __ptext61:	
 10608 ;; *************** function _Sensor_getScanGroupIndex *****************
 10609 ;; Defined at:
 10610 ;;		line 354 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;  sensor          1    wreg     PTR struct .
 10613 ;;		 -> NULL(0), mtouch_sensor(27), 
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;  sensor          1    3[COMMON] PTR struct .
 10616 ;;		 -> NULL(0), mtouch_sensor(27), 
 10617 ;;  sensorGroup     1    4[COMMON] unsigned char 
 10618 ;; Return value:  Size  Location     Type
 10619 ;;                  1    wreg      unsigned char 
 10620 ;; Registers used:
 10621 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 10622 ;; Tracked objects:
 10623 ;;		On entry : 0/0
 10624 ;;		On exit  : 0/0
 10625 ;;		Unchanged: 0/0
 10626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10627 ;;      Params:         0       0       0       0       0       0       0       0
 10628 ;;      Locals:         2       0       0       0       0       0       0       0
 10629 ;;      Temps:          2       0       0       0       0       0       0       0
 10630 ;;      Totals:         4       0       0       0       0       0       0       0
 10631 ;;Total ram usage:        4 bytes
 10632 ;; Hardware stack levels used:    1
 10633 ;; Hardware stack levels required when called:    4
 10634 ;; This function calls:
 10635 ;;		Nothing
 10636 ;; This function is called by:
 10637 ;;		_Sensor_postAcquisitionProcess
 10638 ;;		_Sensor_autoCalibration
 10639 ;;		_Sensor_RawSample_Update
 10640 ;; This function uses a non-reentrant model
 10641 ;;
 10642                           
 10643                           
 10644                           ;psect for function _Sensor_getScanGroupIndex
 10645  08E6                     _Sensor_getScanGroupIndex:	
 10646                           
 10647                           ;incstack = 0
 10648                           ; Regs used in _Sensor_getScanGroupIndex: [wreg-fsr0h+status,2+status,0+pclath]
 10649                           ;Sensor_getScanGroupIndex@sensor stored from wreg
 10650  08E6  00F3               	movwf	Sensor_getScanGroupIndex@sensor
 10651                           
 10652                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 354: static uint8_t Sensor_getScanGroupInde
      +                          x(mtouch_sensor_t* sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 355: {;mcc_genera
      +                          ted_files/mtouch/mtouch_sensor.c: 356:     uint8_t sensorGroup;;mcc_generated_files/mtou
      +                          ch/mtouch_sensor.c: 357:     for(sensorGroup = 0; sensorGroup < 2u; sensorGroup++)
 10653  08E7  01F4               	clrf	Sensor_getScanGroupIndex@sensorGroup
 10654  08E8                     l3759:	
 10655                           
 10656                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 358:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 359:         if(sensor_scan_group[sensorGroup].sensor_adc1 == sensor)
 10657  08E8  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10658  08E9  00F1               	movwf	??_Sensor_getScanGroupIndex
 10659  08EA  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10660  08EB  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10661  08EC  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10662  08ED  303C               	movlw	low (_sensor_scan_group| (0+32768))
 10663  08EE  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10664  08EF  0084               	movwf	4
 10665  08F0  3098               	movlw	high (_sensor_scan_group| (0+32768))
 10666  08F1  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10667  08F2  0085               	movwf	5
 10668  08F3  0800               	movf	0,w	;code access
 10669  08F4  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10670  08F5  1D03               	skipz
 10671  08F6  28F9               	goto	l3765
 10672  08F7                     l3761:	
 10673                           
 10674                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 360:             return 0;
 10675  08F7  3000               	movlw	0
 10676  08F8  0008               	return
 10677  08F9                     l3765:	
 10678                           
 10679                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 361:         if(sensor_scan_group[sensorGro
      +                          up].sensor_adc2 == sensor)
 10680  08F9  0874               	movf	Sensor_getScanGroupIndex@sensorGroup,w
 10681  08FA  00F1               	movwf	??_Sensor_getScanGroupIndex
 10682  08FB  01F2               	clrf	??_Sensor_getScanGroupIndex+1
 10683  08FC  35F1               	lslf	??_Sensor_getScanGroupIndex,f
 10684  08FD  0DF2               	rlf	??_Sensor_getScanGroupIndex+1,f
 10685  08FE  303D               	movlw	low ((_sensor_scan_group+1)| (0+32768))
 10686  08FF  0771               	addwf	??_Sensor_getScanGroupIndex,w
 10687  0900  0084               	movwf	4
 10688  0901  3098               	movlw	high ((_sensor_scan_group+1)| (0+32768))
 10689  0902  3D72               	addwfc	??_Sensor_getScanGroupIndex+1,w
 10690  0903  0085               	movwf	5
 10691  0904  0800               	movf	0,w	;code access
 10692  0905  0673               	xorwf	Sensor_getScanGroupIndex@sensor,w
 10693  0906  1D03               	skipz
 10694  0907  290A               	goto	l3771
 10695                           
 10696                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 362:             return 1;
 10697  0908  3001               	movlw	1
 10698  0909  0008               	return
 10699  090A                     l3771:	
 10700                           
 10701                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 363:     }
 10702  090A  3001               	movlw	1
 10703  090B  00F1               	movwf	??_Sensor_getScanGroupIndex
 10704  090C  0871               	movf	??_Sensor_getScanGroupIndex,w
 10705  090D  07F4               	addwf	Sensor_getScanGroupIndex@sensorGroup,f
 10706  090E  3002               	movlw	2
 10707  090F  0274               	subwf	Sensor_getScanGroupIndex@sensorGroup,w
 10708  0910  1803               	btfsc	3,0
 10709  0911  28F7               	goto	l3761
 10710  0912  28E8               	goto	l3759
 10711  0913                     __end_of_Sensor_getScanGroupIndex:	
 10712                           
 10713                           	psect	text62
 10714  15A6                     __ptext62:	
 10715 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
 10716 ;; Defined at:
 10717 ;;		line 239 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10718 ;; Parameters:    Size  Location     Type
 10719 ;;		None
 10720 ;; Auto vars:     Size  Location     Type
 10721 ;;		None
 10722 ;; Return value:  Size  Location     Type
 10723 ;;                  1    wreg      void 
 10724 ;; Registers used:
 10725 ;;		wreg, status,2, status,0
 10726 ;; Tracked objects:
 10727 ;;		On entry : 0/0
 10728 ;;		On exit  : 0/0
 10729 ;;		Unchanged: 0/0
 10730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10731 ;;      Params:         0       0       0       0       0       0       0       0
 10732 ;;      Locals:         0       0       0       0       0       0       0       0
 10733 ;;      Temps:          0       0       0       0       0       0       0       0
 10734 ;;      Totals:         0       0       0       0       0       0       0       0
 10735 ;;Total ram usage:        0 bytes
 10736 ;; Hardware stack levels used:    1
 10737 ;; Hardware stack levels required when called:    4
 10738 ;; This function calls:
 10739 ;;		Nothing
 10740 ;; This function is called by:
 10741 ;;		_MTOUCH_Initialize
 10742 ;;		_Sensor_Acq_ExecutePacket
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           
 10747                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
 10748  15A6                     _MTOUCH_Sensor_Scan_Initialize:	
 10749                           
 10750                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 241:     T2CONbits.T2CKPS = 0x0;
 10751                           
 10752                           ;incstack = 0
 10753                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
 10754  15A6  30FC               	movlw	-4
 10755  15A7  0020               	movlb	0	; select bank0
 10756  15A8  059C               	andwf	28,f	;volatile
 10757                           
 10758                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 243:     AD1CON0 = (uint8_t)0;
 10759  15A9  002E               	movlb	14	; select bank14
 10760  15AA  0191               	clrf	17	;volatile
 10761                           
 10762                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 244:     AD2CON0 = (uint8_t)0;
 10763  15AB  002F               	movlb	15	; select bank15
 10764  15AC  0191               	clrf	17	;volatile
 10765                           
 10766                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 245:     ADCOMCON = (uint8_t)( 0x1<<7 | 0x1
      +                          <<4 | 0x0 );
 10767  15AD  3090               	movlw	144
 10768  15AE  002E               	movlb	14	; select bank14
 10769  15AF  0092               	movwf	18	;volatile
 10770                           
 10771                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 246:     AD1CON3 = (uint8_t)0b01000000;
 10772  15B0  3040               	movlw	64
 10773  15B1  0094               	movwf	20	;volatile
 10774                           
 10775                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 247:     AD2CON3 = (uint8_t)0b01000000;
 10776  15B2  3040               	movlw	64
 10777  15B3  002F               	movlb	15	; select bank15
 10778  15B4  0094               	movwf	20	;volatile
 10779  15B5  0008               	return
 10780  15B6                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
 10781                           
 10782                           	psect	text63
 10783  1596                     __ptext63:	
 10784 ;; *************** function _MTOUCH_Button_ServiceAll *****************
 10785 ;; Defined at:
 10786 ;;		line 189 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10787 ;; Parameters:    Size  Location     Type
 10788 ;;		None
 10789 ;; Auto vars:     Size  Location     Type
 10790 ;;  button          1   14[BANK0 ] enum E3069
 10791 ;; Return value:  Size  Location     Type
 10792 ;;                  1    wreg      void 
 10793 ;; Registers used:
 10794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10795 ;; Tracked objects:
 10796 ;;		On entry : 0/0
 10797 ;;		On exit  : 0/0
 10798 ;;		Unchanged: 0/0
 10799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10800 ;;      Params:         0       0       0       0       0       0       0       0
 10801 ;;      Locals:         0       1       0       0       0       0       0       0
 10802 ;;      Temps:          0       1       0       0       0       0       0       0
 10803 ;;      Totals:         0       2       0       0       0       0       0       0
 10804 ;;Total ram usage:        2 bytes
 10805 ;; Hardware stack levels used:    1
 10806 ;; Hardware stack levels required when called:    9
 10807 ;; This function calls:
 10808 ;;		_Button_Service
 10809 ;; This function is called by:
 10810 ;;		_MTOUCH_Service_Mainloop
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           
 10815                           ;psect for function _MTOUCH_Button_ServiceAll
 10816  1596                     _MTOUCH_Button_ServiceAll:	
 10817                           
 10818                           ;mcc_generated_files/mtouch/mtouch_button.c: 191:     enum mtouch_button_names button;;m
      +                          cc_generated_files/mtouch/mtouch_button.c: 194:     for (button = 0; button < 3u; button
      +                          ++)
 10819                           
 10820                           ;incstack = 0
 10821                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10822  1596  0020               	movlb	0	; select bank0
 10823  1597  01AE               	clrf	MTOUCH_Button_ServiceAll@button
 10824  1598                     l6241:	
 10825                           
 10826                           ;mcc_generated_files/mtouch/mtouch_button.c: 195:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 196:         Button_Service(button);
 10827  1598  082E               	movf	MTOUCH_Button_ServiceAll@button,w
 10828  1599  318B  23A2  3195   	fcall	_Button_Service
 10829                           
 10830                           ;mcc_generated_files/mtouch/mtouch_button.c: 197:     }
 10831  159C  3001               	movlw	1
 10832  159D  0020               	movlb	0	; select bank0
 10833  159E  00AD               	movwf	??_MTOUCH_Button_ServiceAll
 10834  159F  082D               	movf	??_MTOUCH_Button_ServiceAll,w
 10835  15A0  07AE               	addwf	MTOUCH_Button_ServiceAll@button,f
 10836  15A1  3003               	movlw	3
 10837  15A2  022E               	subwf	MTOUCH_Button_ServiceAll@button,w
 10838  15A3  1803               	btfsc	3,0
 10839  15A4  0008               	return
 10840  15A5  2D98               	goto	l6241
 10841  15A6                     __end_of_MTOUCH_Button_ServiceAll:	
 10842                           
 10843                           	psect	text64
 10844  0BA2                     __ptext64:	
 10845 ;; *************** function _Button_Service *****************
 10846 ;; Defined at:
 10847 ;;		line 200 in file "mcc_generated_files/mtouch/mtouch_button.c"
 10848 ;; Parameters:    Size  Location     Type
 10849 ;;  name            1    wreg     enum E3069
 10850 ;; Auto vars:     Size  Location     Type
 10851 ;;  name            1   11[BANK0 ] enum E3069
 10852 ;;  button          1   12[BANK0 ] PTR struct .
 10853 ;;		 -> mtouch_button(48), 
 10854 ;; Return value:  Size  Location     Type
 10855 ;;                  1    wreg      void 
 10856 ;; Registers used:
 10857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10858 ;; Tracked objects:
 10859 ;;		On entry : 0/0
 10860 ;;		On exit  : 0/0
 10861 ;;		Unchanged: 0/0
 10862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10863 ;;      Params:         0       0       0       0       0       0       0       0
 10864 ;;      Locals:         0       2       0       0       0       0       0       0
 10865 ;;      Temps:          0       2       0       0       0       0       0       0
 10866 ;;      Totals:         0       4       0       0       0       0       0       0
 10867 ;;Total ram usage:        4 bytes
 10868 ;; Hardware stack levels used:    1
 10869 ;; Hardware stack levels required when called:    8
 10870 ;; This function calls:
 10871 ;;		_Button_Deviation_Update
 10872 ;;		_Button_Reading_Update
 10873 ;;		_Button_State_Initializing
 10874 ;;		_Button_State_NotPressed
 10875 ;;		_Button_State_Pressed
 10876 ;;		_MTOUCH_Button_Initialize
 10877 ;;		_MTOUCH_Sensor_isCalibrated
 10878 ;;		_MTOUCH_Sensor_wasSampled
 10879 ;; This function is called by:
 10880 ;;		_MTOUCH_Button_ServiceAll
 10881 ;; This function uses a non-reentrant model
 10882 ;;
 10883                           
 10884                           
 10885                           ;psect for function _Button_Service
 10886  0BA2                     _Button_Service:	
 10887                           
 10888                           ;incstack = 0
 10889                           ; Regs used in _Button_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10890                           ;Button_Service@name stored from wreg
 10891  0BA2  0020               	movlb	0	; select bank0
 10892  0BA3  00AB               	movwf	Button_Service@name
 10893                           
 10894                           ;mcc_generated_files/mtouch/mtouch_button.c: 200: static void Button_Service(enum mtouch
      +                          _button_names name);mcc_generated_files/mtouch/mtouch_button.c: 201: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 202:     mtouch_button_t* button = &mtouch_button[name];
 10895  0BA4  082B               	movf	Button_Service@name,w
 10896  0BA5  00A9               	movwf	??_Button_Service
 10897  0BA6  3003               	movlw	3
 10898  0BA7                     u5095:	
 10899  0BA7  35A9               	lslf	??_Button_Service,f
 10900  0BA8  3EFF               	addlw	-1
 10901  0BA9  1D03               	skipz
 10902  0BAA  2BA7               	goto	u5095
 10903  0BAB  3529               	lslf	??_Button_Service,w
 10904  0BAC  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 10905  0BAD  00AA               	movwf	??_Button_Service+1
 10906  0BAE  082A               	movf	??_Button_Service+1,w
 10907  0BAF  00AC               	movwf	Button_Service@button
 10908                           
 10909                           ;mcc_generated_files/mtouch/mtouch_button.c: 204:     if (MTOUCH_Sensor_wasSampled(butto
      +                          n->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
 10910  0BB0  0A2C               	incf	Button_Service@button,w
 10911  0BB1  0086               	movwf	6
 10912  0BB2  3001               	movlw	1	; select bank2/3
 10913  0BB3  0087               	movwf	7
 10914  0BB4  0801               	movf	1,w
 10915  0BB5  3195  2578  318B   	fcall	_MTOUCH_Sensor_wasSampled
 10916  0BB8  3A00               	xorlw	0
 10917  0BB9  1903               	skipnz
 10918  0BBA  0008               	return
 10919  0BBB  0020               	movlb	0	; select bank0
 10920  0BBC  0A2C               	incf	Button_Service@button,w
 10921  0BBD  0086               	movwf	6
 10922  0BBE  3001               	movlw	1	; select bank2/3
 10923  0BBF  0087               	movwf	7
 10924  0BC0  0801               	movf	1,w
 10925  0BC1  3196  2647  318B   	fcall	_MTOUCH_Sensor_isCalibrated
 10926  0BC4  3A00               	xorlw	0
 10927  0BC5  1903               	skipnz
 10928  0BC6  0008               	return
 10929                           
 10930                           ;mcc_generated_files/mtouch/mtouch_button.c: 205:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 206:         Button_Reading_Update(button);
 10931  0BC7  0020               	movlb	0	; select bank0
 10932  0BC8  082C               	movf	Button_Service@button,w
 10933  0BC9  3195  2540  318B   	fcall	_Button_Reading_Update
 10934                           
 10935                           ;mcc_generated_files/mtouch/mtouch_button.c: 207:         Button_Deviation_Update(button
      +                          );
 10936  0BCC  0020               	movlb	0	; select bank0
 10937  0BCD  082C               	movf	Button_Service@button,w
 10938  0BCE  318E  2658  318B   	fcall	_Button_Deviation_Update
 10939                           
 10940                           ;mcc_generated_files/mtouch/mtouch_button.c: 209:         if (button->state >= (uint8_t)
      +                          (sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
 10941  0BD1  0020               	movlb	0	; select bank0
 10942  0BD2  082C               	movf	Button_Service@button,w
 10943  0BD3  3E02               	addlw	2
 10944  0BD4  0086               	movwf	6
 10945  0BD5  3001               	movlw	1	; select bank2/3
 10946  0BD6  0087               	movwf	7
 10947  0BD7  3003               	movlw	3
 10948  0BD8  0201               	subwf	1,w
 10949  0BD9  1C03               	skipc
 10950  0BDA  2BE3               	goto	l6193
 10951                           
 10952                           ;mcc_generated_files/mtouch/mtouch_button.c: 210:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 211:             MTOUCH_Button_Initialize(button->name);
 10953  0BDB  082C               	movf	Button_Service@button,w
 10954  0BDC  0086               	movwf	6
 10955  0BDD  3001               	movlw	1	; select bank2/3
 10956  0BDE  0087               	movwf	7
 10957  0BDF  0801               	movf	1,w
 10958  0BE0  318A  2209  318B   	fcall	_MTOUCH_Button_Initialize
 10959  0BE3                     l6193:	
 10960                           
 10961                           ;mcc_generated_files/mtouch/mtouch_button.c: 213:         Button_StateMachine[(uint8_t)b
      +                          utton->state](button);
 10962  0BE3  0020               	movlb	0	; select bank0
 10963  0BE4  082C               	movf	Button_Service@button,w
 10964  0BE5  00A9               	movwf	??_Button_Service
 10965  0BE6  0829               	movf	??_Button_Service,w
 10966  0BE7  00A4               	movwf	Button_State_Pressed@button
 10967  0BE8  082C               	movf	Button_Service@button,w
 10968  0BE9  3E02               	addlw	2
 10969  0BEA  0086               	movwf	6
 10970  0BEB  3001               	movlw	1	; select bank2/3
 10971  0BEC  0087               	movwf	7
 10972  0BED  3501               	lslf	1,w
 10973  0BEE  3ECF               	addlw	(low (_Button_StateMachine| 0))& (0+255)
 10974  0BEF  0086               	movwf	6
 10975  0BF0  0187               	clrf	7
 10976  0BF1  3F41               	moviw [1]fsr1
 10977  0BF2  008A               	movwf	10
 10978  0BF3  3F40               	moviw [0]fsr1
 10979  0BF4  000A               	callw
 10980  0BF5  318B               	pagesel	$
 10981  0BF6  0008               	return
 10982  0BF7                     __end_of_Button_Service:	
 10983                           
 10984                           	psect	text65
 10985  1578                     __ptext65:	
 10986 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
 10987 ;; Defined at:
 10988 ;;		line 959 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 10989 ;; Parameters:    Size  Location     Type
 10990 ;;  sensor          1    wreg     enum E2854
 10991 ;; Auto vars:     Size  Location     Type
 10992 ;;  sensor          1    6[COMMON] enum E2854
 10993 ;; Return value:  Size  Location     Type
 10994 ;;                  1    wreg      _Bool 
 10995 ;; Registers used:
 10996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10997 ;; Tracked objects:
 10998 ;;		On entry : 0/0
 10999 ;;		On exit  : 0/0
 11000 ;;		Unchanged: 0/0
 11001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11002 ;;      Params:         0       0       0       0       0       0       0       0
 11003 ;;      Locals:         1       0       0       0       0       0       0       0
 11004 ;;      Temps:          1       0       0       0       0       0       0       0
 11005 ;;      Totals:         2       0       0       0       0       0       0       0
 11006 ;;Total ram usage:        2 bytes
 11007 ;; Hardware stack levels used:    1
 11008 ;; Hardware stack levels required when called:    5
 11009 ;; This function calls:
 11010 ;;		___bmul
 11011 ;; This function is called by:
 11012 ;;		_Button_Service
 11013 ;; This function uses a non-reentrant model
 11014 ;;
 11015                           
 11016                           
 11017                           ;psect for function _MTOUCH_Sensor_wasSampled
 11018  1578                     _MTOUCH_Sensor_wasSampled:	
 11019                           
 11020                           ;incstack = 0
 11021                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11022                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
 11023  1578  00F6               	movwf	MTOUCH_Sensor_wasSampled@sensor
 11024                           
 11025                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 959: _Bool MTOUCH_Sensor_wasSampled(enum mt
      +                          ouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 960: {;mcc_generat
      +                          ed_files/mtouch/mtouch_sensor.c: 961:     return (_Bool)mtouch_sensor[sensor].sampled;
 11026  1579  3009               	movlw	9
 11027  157A  00F5               	movwf	??_MTOUCH_Sensor_wasSampled
 11028  157B  0875               	movf	??_MTOUCH_Sensor_wasSampled,w
 11029  157C  00F1               	movwf	___bmul@multiplicand
 11030  157D  0876               	movf	MTOUCH_Sensor_wasSampled@sensor,w
 11031  157E  3195  25B6         	fcall	___bmul
 11032  1580  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11033  1581  0086               	movwf	6
 11034  1582  3001               	movlw	1	; select bank2/3
 11035  1583  0087               	movwf	7
 11036  1584  0801               	movf	1,w
 11037  1585  3901               	andlw	1
 11038  1586  0008               	return
 11039  1587                     __end_of_MTOUCH_Sensor_wasSampled:	
 11040                           
 11041                           	psect	text66
 11042  1647                     __ptext66:	
 11043 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
 11044 ;; Defined at:
 11045 ;;		line 912 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 11046 ;; Parameters:    Size  Location     Type
 11047 ;;  sensor          1    wreg     enum E2854
 11048 ;; Auto vars:     Size  Location     Type
 11049 ;;  sensor          1    6[COMMON] enum E2854
 11050 ;; Return value:  Size  Location     Type
 11051 ;;                  1    wreg      _Bool 
 11052 ;; Registers used:
 11053 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11054 ;; Tracked objects:
 11055 ;;		On entry : 0/0
 11056 ;;		On exit  : 0/0
 11057 ;;		Unchanged: 0/0
 11058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11059 ;;      Params:         0       0       0       0       0       0       0       0
 11060 ;;      Locals:         1       0       0       0       0       0       0       0
 11061 ;;      Temps:          1       0       0       0       0       0       0       0
 11062 ;;      Totals:         2       0       0       0       0       0       0       0
 11063 ;;Total ram usage:        2 bytes
 11064 ;; Hardware stack levels used:    1
 11065 ;; Hardware stack levels required when called:    5
 11066 ;; This function calls:
 11067 ;;		___bmul
 11068 ;; This function is called by:
 11069 ;;		_Button_Service
 11070 ;; This function uses a non-reentrant model
 11071 ;;
 11072                           
 11073                           
 11074                           ;psect for function _MTOUCH_Sensor_isCalibrated
 11075  1647                     _MTOUCH_Sensor_isCalibrated:	
 11076                           
 11077                           ;incstack = 0
 11078                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 11079                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
 11080  1647  00F6               	movwf	MTOUCH_Sensor_isCalibrated@sensor
 11081                           
 11082                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 912: _Bool MTOUCH_Sensor_isCalibrated(enum 
      +                          mtouch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 913: {;mcc_gener
      +                          ated_files/mtouch/mtouch_sensor.c: 914:     if(sensor < 3u)
 11083  1648  3003               	movlw	3
 11084  1649  0276               	subwf	MTOUCH_Sensor_isCalibrated@sensor,w
 11085  164A  1803               	skipnc
 11086  164B  2E5B               	goto	l6001
 11087                           
 11088                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 915:         return (_Bool)mtouch_sensor[se
      +                          nsor].calibrated;
 11089  164C  3009               	movlw	9
 11090  164D  00F5               	movwf	??_MTOUCH_Sensor_isCalibrated
 11091  164E  0875               	movf	??_MTOUCH_Sensor_isCalibrated,w
 11092  164F  00F1               	movwf	___bmul@multiplicand
 11093  1650  0876               	movf	MTOUCH_Sensor_isCalibrated@sensor,w
 11094  1651  3195  25B6         	fcall	___bmul
 11095  1653  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 11096  1654  0086               	movwf	6
 11097  1655  3001               	movlw	1	; select bank2/3
 11098  1656  0087               	movwf	7
 11099  1657  0C01               	rrf	1,w
 11100  1658  0C89               	rrf	9,f
 11101  1659  3901               	andlw	1
 11102  165A  0008               	return
 11103  165B                     l6001:	
 11104                           
 11105                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 917:         return 0;
 11106  165B  3000               	movlw	0
 11107  165C  0008               	return
 11108  165D                     __end_of_MTOUCH_Sensor_isCalibrated:	
 11109                           
 11110                           	psect	text67
 11111  069E                     __ptext67:	
 11112 ;; *************** function _Button_State_NotPressed *****************
 11113 ;; Defined at:
 11114 ;;		line 237 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11115 ;; Parameters:    Size  Location     Type
 11116 ;;  button          1    4[BANK0 ] PTR struct .
 11117 ;;		 -> mtouch_button(48), 
 11118 ;; Auto vars:     Size  Location     Type
 11119 ;;		None
 11120 ;; Return value:  Size  Location     Type
 11121 ;;                  1    wreg      void 
 11122 ;; Registers used:
 11123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11124 ;; Tracked objects:
 11125 ;;		On entry : 0/0
 11126 ;;		On exit  : 0/0
 11127 ;;		Unchanged: 0/0
 11128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11129 ;;      Params:         0       1       0       0       0       0       0       0
 11130 ;;      Locals:         0       0       0       0       0       0       0       0
 11131 ;;      Temps:          0       2       0       0       0       0       0       0
 11132 ;;      Totals:         0       3       0       0       0       0       0       0
 11133 ;;Total ram usage:        3 bytes
 11134 ;; Hardware stack levels used:    1
 11135 ;; Hardware stack levels required when called:    7
 11136 ;; This function calls:
 11137 ;;		_Button_Baseline_Update
 11138 ;;		_Button_DefaultCallback
 11139 ;;		_MTOUCH_Button_Initialize
 11140 ;;		_myButtonPressedCallback
 11141 ;; This function is called by:
 11142 ;;		_Button_Service
 11143 ;; This function uses a non-reentrant model
 11144 ;;
 11145                           
 11146                           
 11147                           ;psect for function _Button_State_NotPressed
 11148  069E                     _Button_State_NotPressed:	
 11149                           
 11150                           ;mcc_generated_files/mtouch/mtouch_button.c: 237: static void Button_State_NotPressed(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 238: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 240:     if ((button->deviation) < (mtouch_button_deviatio
      +                          n_t)(-button->threshold))
 11151                           
 11152                           ;incstack = 0
 11153                           ; Regs used in _Button_State_NotPressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11154  069E  0020               	movlb	0	; select bank0
 11155  069F  0824               	movf	Button_State_NotPressed@button,w
 11156  06A0  3E09               	addlw	9
 11157  06A1  0086               	movwf	6
 11158  06A2  3001               	movlw	1	; select bank2/3
 11159  06A3  0087               	movwf	7
 11160  06A4  0801               	movf	1,w
 11161  06A5  3A80               	xorlw	128
 11162  06A6  00A5               	movwf	??_Button_State_NotPressed
 11163  06A7  0824               	movf	Button_State_NotPressed@button,w
 11164  06A8  3E0E               	addlw	14
 11165  06A9  0086               	movwf	6
 11166  06AA  3001               	movlw	1	; select bank2/3
 11167  06AB  0087               	movwf	7
 11168  06AC  0301               	decf	1,w
 11169  06AD  3AFF               	xorlw	255
 11170  06AE  3A80               	xorlw	128
 11171  06AF  02A5               	subwf	??_Button_State_NotPressed,f
 11172  06B0  1803               	skipnc
 11173  06B1  2EDD               	goto	l6051
 11174                           
 11175                           ;mcc_generated_files/mtouch/mtouch_button.c: 241:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 242:         (button->counter)++;
 11176  06B2  0824               	movf	Button_State_NotPressed@button,w
 11177  06B3  3E0A               	addlw	10
 11178  06B4  0086               	movwf	6
 11179  06B5  3001               	movlw	1	; select bank2/3
 11180  06B6  0087               	movwf	7
 11181  06B7  3001               	movlw	1
 11182  06B8  0781               	addwf	1,f
 11183  06B9  3141               	addfsr 1,1
 11184  06BA  1803               	skipnc
 11185  06BB  0A81               	incf	1,f
 11186                           
 11187                           ;mcc_generated_files/mtouch/mtouch_button.c: 243:         if ((button->counter) > (mtouc
      +                          h_button_statecounter_t)((mtouch_button_statecounter_t)64u))
 11188  06BC  0824               	movf	Button_State_NotPressed@button,w
 11189  06BD  3E0A               	addlw	10
 11190  06BE  0086               	movwf	6
 11191  06BF  3001               	movlw	1	; select bank2/3
 11192  06C0  0087               	movwf	7
 11193  06C1  3F40               	moviw [0]fsr1
 11194  06C2  00A5               	movwf	??_Button_State_NotPressed
 11195  06C3  3F41               	moviw [1]fsr1
 11196  06C4  00A6               	movwf	??_Button_State_NotPressed+1
 11197  06C5  3000               	movlw	0
 11198  06C6  0226               	subwf	??_Button_State_NotPressed+1,w
 11199  06C7  3041               	movlw	65
 11200  06C8  1903               	skipnz
 11201  06C9  0225               	subwf	??_Button_State_NotPressed,w
 11202  06CA  1C03               	skipc
 11203  06CB  2F1F               	goto	l522
 11204                           
 11205                           ;mcc_generated_files/mtouch/mtouch_button.c: 244:         {;mcc_generated_files/mtouch/m
      +                          touch_button.c: 245:             button->counter = (mtouch_button_statecounter_t)0;
 11206  06CC  0824               	movf	Button_State_NotPressed@button,w
 11207  06CD  3E0A               	addlw	10
 11208  06CE  0086               	movwf	6
 11209  06CF  3001               	movlw	1	; select bank2/3
 11210  06D0  0087               	movwf	7
 11211  06D1  3000               	movlw	0
 11212  06D2  3FC0               	movwi [0]fsr1
 11213  06D3  3FC1               	movwi [1]fsr1
 11214                           
 11215                           ;mcc_generated_files/mtouch/mtouch_button.c: 246:             MTOUCH_Button_Initialize(b
      +                          utton->name);
 11216  06D4  0824               	movf	Button_State_NotPressed@button,w
 11217  06D5  0086               	movwf	6
 11218  06D6  3001               	movlw	1	; select bank2/3
 11219  06D7  0087               	movwf	7
 11220  06D8  0801               	movf	1,w
 11221  06D9  318A  2209  3186   	fcall	_MTOUCH_Button_Initialize
 11222  06DC  2F1F               	goto	l522
 11223  06DD                     l6051:	
 11224  06DD  0824               	movf	Button_State_NotPressed@button,w
 11225  06DE  3E09               	addlw	9
 11226  06DF  0086               	movwf	6
 11227  06E0  3001               	movlw	1	; select bank2/3
 11228  06E1  0087               	movwf	7
 11229  06E2  0801               	movf	1,w
 11230  06E3  00A5               	movwf	??_Button_State_NotPressed
 11231  06E4  01A6               	clrf	??_Button_State_NotPressed+1
 11232  06E5  1BA5               	btfsc	??_Button_State_NotPressed,7
 11233  06E6  03A6               	decf	??_Button_State_NotPressed+1,f
 11234  06E7  0824               	movf	Button_State_NotPressed@button,w
 11235  06E8  3E0E               	addlw	14
 11236  06E9  0086               	movwf	6
 11237  06EA  3001               	movlw	1	; select bank2/3
 11238  06EB  0087               	movwf	7
 11239  06EC  0826               	movf	??_Button_State_NotPressed+1,w
 11240  06ED  3A80               	xorlw	128
 11241  06EE  3C80               	sublw	128
 11242  06EF  1D03               	skipz
 11243  06F0  2EF3               	goto	u4965
 11244  06F1  0825               	movf	??_Button_State_NotPressed,w
 11245  06F2  0201               	subwf	1,w
 11246  06F3                     u4965:	
 11247  06F3  1803               	skipnc
 11248  06F4  2F16               	goto	l6057
 11249                           
 11250                           ;mcc_generated_files/mtouch/mtouch_button.c: 251:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 253:         button->state = MTOUCH_BUTTON_STATE_pressed;
 11251  06F5  3002               	movlw	2
 11252  06F6  0020               	movlb	0	; select bank0
 11253  06F7  00A5               	movwf	??_Button_State_NotPressed
 11254  06F8  0824               	movf	Button_State_NotPressed@button,w
 11255  06F9  3E02               	addlw	2
 11256  06FA  0086               	movwf	6
 11257  06FB  3001               	movlw	1	; select bank2/3
 11258  06FC  0087               	movwf	7
 11259  06FD  0825               	movf	??_Button_State_NotPressed,w
 11260  06FE  0081               	movwf	1
 11261                           
 11262                           ;mcc_generated_files/mtouch/mtouch_button.c: 254:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11263  06FF  0824               	movf	Button_State_NotPressed@button,w
 11264  0700  3E0A               	addlw	10
 11265  0701  0086               	movwf	6
 11266  0702  3001               	movlw	1	; select bank2/3
 11267  0703  0087               	movwf	7
 11268  0704  3000               	movlw	0
 11269  0705  3FC0               	movwi [0]fsr1
 11270  0706  3FC1               	movwi [1]fsr1
 11271                           
 11272                           ;mcc_generated_files/mtouch/mtouch_button.c: 255:         callback_pressed(button->name)
      +                          ;
 11273  0707  0824               	movf	Button_State_NotPressed@button,w
 11274  0708  0086               	movwf	6
 11275  0709  3001               	movlw	1	; select bank2/3
 11276  070A  0087               	movwf	7
 11277  070B  0801               	movf	1,w
 11278  070C  00A5               	movwf	??_Button_State_NotPressed
 11279  070D  0825               	movf	??_Button_State_NotPressed,w
 11280  070E  00F4               	movwf	myButtonPressedCallback@button
 11281  070F  0021               	movlb	1	; select bank1
 11282  0710  0856               	movf	(_callback_pressed+1)^(0+128),w
 11283  0711  008A               	movwf	10
 11284  0712  0855               	movf	_callback_pressed^(0+128),w
 11285  0713  000A               	callw
 11286  0714  3186               	pagesel	$
 11287                           
 11288                           ;mcc_generated_files/mtouch/mtouch_button.c: 256:     }
 11289  0715  2F1F               	goto	l522
 11290  0716                     l6057:	
 11291                           
 11292                           ;mcc_generated_files/mtouch/mtouch_button.c: 258:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 260:         button->counter = (mtouch_button_statecounter_t)0;
 11293  0716  0020               	movlb	0	; select bank0
 11294  0717  0824               	movf	Button_State_NotPressed@button,w
 11295  0718  3E0A               	addlw	10
 11296  0719  0086               	movwf	6
 11297  071A  3001               	movlw	1	; select bank2/3
 11298  071B  0087               	movwf	7
 11299  071C  3000               	movlw	0
 11300  071D  3FC0               	movwi [0]fsr1
 11301  071E  3FC1               	movwi [1]fsr1
 11302  071F                     l522:	
 11303                           
 11304                           ;mcc_generated_files/mtouch/mtouch_button.c: 265:     (button->baseline_count)++;
 11305  071F  0020               	movlb	0	; select bank0
 11306  0720  0824               	movf	Button_State_NotPressed@button,w
 11307  0721  3E0C               	addlw	12
 11308  0722  0086               	movwf	6
 11309  0723  3001               	movlw	1	; select bank2/3
 11310  0724  0087               	movwf	7
 11311  0725  3001               	movlw	1
 11312  0726  0781               	addwf	1,f
 11313  0727  3141               	addfsr 1,1
 11314  0728  1803               	skipnc
 11315  0729  0A81               	incf	1,f
 11316                           
 11317                           ;mcc_generated_files/mtouch/mtouch_button.c: 266:     if ((button->baseline_count) == ((
      +                          mtouch_button_baselinecounter_t)64u))
 11318  072A  0824               	movf	Button_State_NotPressed@button,w
 11319  072B  3E0C               	addlw	12
 11320  072C  0086               	movwf	6
 11321  072D  3001               	movlw	1	; select bank2/3
 11322  072E  0087               	movwf	7
 11323  072F  0016               	moviw fsr1++
 11324  0730  3A40               	xorlw	64
 11325  0731  00A5               	movwf	??_Button_State_NotPressed
 11326  0732  0016               	moviw fsr1++
 11327  0733  04A5               	iorwf	??_Button_State_NotPressed,f
 11328  0734  1D03               	btfss	3,2
 11329  0735  0008               	return
 11330                           
 11331                           ;mcc_generated_files/mtouch/mtouch_button.c: 267:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 268:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
 11332  0736  0824               	movf	Button_State_NotPressed@button,w
 11333  0737  3E0C               	addlw	12
 11334  0738  0086               	movwf	6
 11335  0739  3001               	movlw	1	; select bank2/3
 11336  073A  0087               	movwf	7
 11337  073B  3000               	movlw	0
 11338  073C  3FC0               	movwi [0]fsr1
 11339  073D  3FC1               	movwi [1]fsr1
 11340                           
 11341                           ;mcc_generated_files/mtouch/mtouch_button.c: 269:         Button_Baseline_Update(button)
      +                          ;
 11342  073E  0824               	movf	Button_State_NotPressed@button,w
 11343  073F  318E  26DF         	fcall	_Button_Baseline_Update
 11344  0741  0008               	return
 11345  0742                     __end_of_Button_State_NotPressed:	
 11346                           
 11347                           	psect	text68
 11348  0CAD                     __ptext68:	
 11349 ;; *************** function _Button_State_Initializing *****************
 11350 ;; Defined at:
 11351 ;;		line 217 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11352 ;; Parameters:    Size  Location     Type
 11353 ;;  button          1    4[BANK0 ] PTR struct .
 11354 ;;		 -> mtouch_button(48), 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;		None
 11357 ;; Return value:  Size  Location     Type
 11358 ;;                  1    wreg      void 
 11359 ;; Registers used:
 11360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11366 ;;      Params:         0       1       0       0       0       0       0       0
 11367 ;;      Locals:         0       0       0       0       0       0       0       0
 11368 ;;      Temps:          0       4       0       0       0       0       0       0
 11369 ;;      Totals:         0       5       0       0       0       0       0       0
 11370 ;;Total ram usage:        5 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    7
 11373 ;; This function calls:
 11374 ;;		_Button_Baseline_Initialize
 11375 ;;		_Button_Baseline_Update
 11376 ;; This function is called by:
 11377 ;;		_Button_Service
 11378 ;; This function uses a non-reentrant model
 11379 ;;
 11380                           
 11381                           
 11382                           ;psect for function _Button_State_Initializing
 11383  0CAD                     _Button_State_Initializing:	
 11384                           
 11385                           ;mcc_generated_files/mtouch/mtouch_button.c: 217: static void Button_State_Initializing(
      +                          mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 218: {;mcc_generate
      +                          d_files/mtouch/mtouch_button.c: 220:     if ((button->counter) <= (mtouch_button_stateco
      +                          unter_t)((mtouch_button_baselinecounter_t)16u)/2)
 11386                           
 11387                           ;incstack = 0
 11388                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11389  0CAD  0020               	movlb	0	; select bank0
 11390  0CAE  0824               	movf	Button_State_Initializing@button,w
 11391  0CAF  3E0A               	addlw	10
 11392  0CB0  0086               	movwf	6
 11393  0CB1  3001               	movlw	1	; select bank2/3
 11394  0CB2  0087               	movwf	7
 11395  0CB3  3F40               	moviw [0]fsr1
 11396  0CB4  00A5               	movwf	??_Button_State_Initializing
 11397  0CB5  3F41               	moviw [1]fsr1
 11398  0CB6  00A6               	movwf	??_Button_State_Initializing+1
 11399  0CB7  3000               	movlw	0
 11400  0CB8  0226               	subwf	??_Button_State_Initializing+1,w
 11401  0CB9  3009               	movlw	9
 11402  0CBA  1903               	skipnz
 11403  0CBB  0225               	subwf	??_Button_State_Initializing,w
 11404  0CBC  1803               	skipnc
 11405  0CBD  2CC3               	goto	l6035
 11406                           
 11407                           ;mcc_generated_files/mtouch/mtouch_button.c: 221:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 222:         Button_Baseline_Initialize(button);
 11408  0CBE  0824               	movf	Button_State_Initializing@button,w
 11409  0CBF  3189  2113  318C   	fcall	_Button_Baseline_Initialize
 11410                           
 11411                           ;mcc_generated_files/mtouch/mtouch_button.c: 223:     } else {
 11412  0CC2  2CC7               	goto	l6037
 11413  0CC3                     l6035:	
 11414                           
 11415                           ;mcc_generated_files/mtouch/mtouch_button.c: 224:         Button_Baseline_Update(button)
      +                          ;
 11416  0CC3  0824               	movf	Button_State_Initializing@button,w
 11417  0CC4  318E  26DF  318C   	fcall	_Button_Baseline_Update
 11418  0CC7                     l6037:	
 11419                           
 11420                           ;mcc_generated_files/mtouch/mtouch_button.c: 228:     (button->counter)++;
 11421  0CC7  0020               	movlb	0	; select bank0
 11422  0CC8  0824               	movf	Button_State_Initializing@button,w
 11423  0CC9  3E0A               	addlw	10
 11424  0CCA  0086               	movwf	6
 11425  0CCB  3001               	movlw	1	; select bank2/3
 11426  0CCC  0087               	movwf	7
 11427  0CCD  3001               	movlw	1
 11428  0CCE  0781               	addwf	1,f
 11429  0CCF  3141               	addfsr 1,1
 11430  0CD0  1803               	skipnc
 11431  0CD1  0A81               	incf	1,f
 11432                           
 11433                           ;mcc_generated_files/mtouch/mtouch_button.c: 229:     if ((button->counter) >= (mtouch_b
      +                          utton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
 11434  0CD2  0824               	movf	Button_State_Initializing@button,w
 11435  0CD3  3E0A               	addlw	10
 11436  0CD4  0086               	movwf	6
 11437  0CD5  3001               	movlw	1	; select bank2/3
 11438  0CD6  0087               	movwf	7
 11439  0CD7  3F40               	moviw [0]fsr1
 11440  0CD8  00A5               	movwf	??_Button_State_Initializing
 11441  0CD9  3F41               	moviw [1]fsr1
 11442  0CDA  00A6               	movwf	??_Button_State_Initializing+1
 11443  0CDB  3000               	movlw	0
 11444  0CDC  0226               	subwf	??_Button_State_Initializing+1,w
 11445  0CDD  3010               	movlw	16
 11446  0CDE  1903               	skipnz
 11447  0CDF  0225               	subwf	??_Button_State_Initializing,w
 11448  0CE0  1C03               	skipc
 11449  0CE1  0008               	return
 11450                           
 11451                           ;mcc_generated_files/mtouch/mtouch_button.c: 230:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 231:         button->reading = (mtouch_button_reading_t)((button->baseline)>
      +                          >((uint8_t)4u));
 11452  0CE2  0824               	movf	Button_State_Initializing@button,w
 11453  0CE3  3E05               	addlw	5
 11454  0CE4  0086               	movwf	6
 11455  0CE5  3001               	movlw	1	; select bank2/3
 11456  0CE6  0087               	movwf	7
 11457  0CE7  3F40               	moviw [0]fsr1
 11458  0CE8  00A5               	movwf	??_Button_State_Initializing
 11459  0CE9  3F41               	moviw [1]fsr1
 11460  0CEA  00A6               	movwf	??_Button_State_Initializing+1
 11461  0CEB  3F42               	moviw [2]fsr1
 11462  0CEC  00A7               	movwf	??_Button_State_Initializing+2
 11463  0CED  3F43               	moviw [3]fsr1
 11464  0CEE  00A8               	movwf	??_Button_State_Initializing+3
 11465  0CEF  3004               	movlw	4
 11466  0CF0                     u4935:	
 11467  0CF0  36A8               	lsrf	??_Button_State_Initializing+3,f
 11468  0CF1  0CA7               	rrf	??_Button_State_Initializing+2,f
 11469  0CF2  0CA6               	rrf	??_Button_State_Initializing+1,f
 11470  0CF3  0CA5               	rrf	??_Button_State_Initializing,f
 11471  0CF4  0B89               	decfsz	9,f
 11472  0CF5  2CF0               	goto	u4935
 11473  0CF6  0824               	movf	Button_State_Initializing@button,w
 11474  0CF7  3E03               	addlw	3
 11475  0CF8  0086               	movwf	6
 11476  0CF9  3001               	movlw	1	; select bank2/3
 11477  0CFA  0087               	movwf	7
 11478  0CFB  0825               	movf	??_Button_State_Initializing,w
 11479  0CFC  3FC0               	movwi [0]fsr1
 11480  0CFD  0826               	movf	??_Button_State_Initializing+1,w
 11481  0CFE  3FC1               	movwi [1]fsr1
 11482                           
 11483                           ;mcc_generated_files/mtouch/mtouch_button.c: 232:         button->state = MTOUCH_BUTTON_
      +                          STATE_notPressed;
 11484  0CFF  0824               	movf	Button_State_Initializing@button,w
 11485  0D00  3E02               	addlw	2
 11486  0D01  0086               	movwf	6
 11487  0D02  3001               	movlw	1	; select bank2/3
 11488  0D03  0087               	movwf	7
 11489  0D04  0181               	clrf	1
 11490  0D05  0A81               	incf	1,f
 11491                           
 11492                           ;mcc_generated_files/mtouch/mtouch_button.c: 233:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11493  0D06  0824               	movf	Button_State_Initializing@button,w
 11494  0D07  3E0A               	addlw	10
 11495  0D08  0086               	movwf	6
 11496  0D09  3001               	movlw	1	; select bank2/3
 11497  0D0A  0087               	movwf	7
 11498  0D0B  3000               	movlw	0
 11499  0D0C  3FC0               	movwi [0]fsr1
 11500  0D0D  3FC1               	movwi [1]fsr1
 11501  0D0E  0008               	return
 11502  0D0F                     __end_of_Button_State_Initializing:	
 11503                           
 11504                           	psect	text69
 11505  0D0F                     __ptext69:	
 11506 ;; *************** function _Button_State_Pressed *****************
 11507 ;; Defined at:
 11508 ;;		line 273 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;  button          1    4[BANK0 ] PTR struct .
 11511 ;;		 -> mtouch_button(48), 
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;		None
 11514 ;; Return value:  Size  Location     Type
 11515 ;;                  1    wreg      void 
 11516 ;; Registers used:
 11517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11518 ;; Tracked objects:
 11519 ;;		On entry : 0/0
 11520 ;;		On exit  : 0/0
 11521 ;;		Unchanged: 0/0
 11522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11523 ;;      Params:         0       1       0       0       0       0       0       0
 11524 ;;      Locals:         0       0       0       0       0       0       0       0
 11525 ;;      Temps:          0       2       0       0       0       0       0       0
 11526 ;;      Totals:         0       3       0       0       0       0       0       0
 11527 ;;Total ram usage:        3 bytes
 11528 ;; Hardware stack levels used:    1
 11529 ;; Hardware stack levels required when called:    7
 11530 ;; This function calls:
 11531 ;;		_Button_DefaultCallback
 11532 ;;		_MTOUCH_Button_Initialize
 11533 ;;		_myButtonReleasedCallback
 11534 ;; This function is called by:
 11535 ;;		_Button_Service
 11536 ;; This function uses a non-reentrant model
 11537 ;;
 11538                           
 11539                           
 11540                           ;psect for function _Button_State_Pressed
 11541  0D0F                     _Button_State_Pressed:	
 11542                           
 11543                           ;mcc_generated_files/mtouch/mtouch_button.c: 273: static void Button_State_Pressed(mtouc
      +                          h_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 274: {;mcc_generated_fil
      +                          es/mtouch/mtouch_button.c: 276:     if ((button->counter) >= ((mtouch_button_statecounte
      +                          r_t)2000u))
 11544                           
 11545                           ;incstack = 0
 11546                           ; Regs used in _Button_State_Pressed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11547  0D0F  0020               	movlb	0	; select bank0
 11548  0D10  0824               	movf	Button_State_Pressed@button,w
 11549  0D11  3E0A               	addlw	10
 11550  0D12  0086               	movwf	6
 11551  0D13  3001               	movlw	1	; select bank2/3
 11552  0D14  0087               	movwf	7
 11553  0D15  3F40               	moviw [0]fsr1
 11554  0D16  00A5               	movwf	??_Button_State_Pressed
 11555  0D17  3F41               	moviw [1]fsr1
 11556  0D18  00A6               	movwf	??_Button_State_Pressed+1
 11557  0D19  3007               	movlw	7
 11558  0D1A  0226               	subwf	??_Button_State_Pressed+1,w
 11559  0D1B  30D0               	movlw	208
 11560  0D1C  1903               	skipnz
 11561  0D1D  0225               	subwf	??_Button_State_Pressed,w
 11562  0D1E  1C03               	skipc
 11563  0D1F  2D37               	goto	l6067
 11564                           
 11565                           ;mcc_generated_files/mtouch/mtouch_button.c: 277:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 278:         MTOUCH_Button_Initialize(button->name);
 11566  0D20  0824               	movf	Button_State_Pressed@button,w
 11567  0D21  0086               	movwf	6
 11568  0D22  3001               	movlw	1	; select bank2/3
 11569  0D23  0087               	movwf	7
 11570  0D24  0801               	movf	1,w
 11571  0D25  318A  2209  318D   	fcall	_MTOUCH_Button_Initialize
 11572                           
 11573                           ;mcc_generated_files/mtouch/mtouch_button.c: 279:         callback_notPressed(button->na
      +                          me);
 11574  0D28  0020               	movlb	0	; select bank0
 11575  0D29  0824               	movf	Button_State_Pressed@button,w
 11576  0D2A  0086               	movwf	6
 11577  0D2B  3001               	movlw	1	; select bank2/3
 11578  0D2C  0087               	movwf	7
 11579  0D2D  0801               	movf	1,w
 11580  0D2E  00A5               	movwf	??_Button_State_Pressed
 11581  0D2F  0825               	movf	??_Button_State_Pressed,w
 11582  0D30  00F4               	movwf	myButtonReleasedCallback@button
 11583  0D31  086D               	movf	_callback_notPressed+1,w
 11584  0D32  008A               	movwf	10
 11585  0D33  086C               	movf	_callback_notPressed,w
 11586  0D34  000A               	callw
 11587  0D35  318D               	pagesel	$
 11588                           
 11589                           ;mcc_generated_files/mtouch/mtouch_button.c: 280:     }
 11590  0D36  0008               	return
 11591  0D37                     l6067:	
 11592  0D37  0824               	movf	Button_State_Pressed@button,w
 11593  0D38  3E09               	addlw	9
 11594  0D39  0086               	movwf	6
 11595  0D3A  3001               	movlw	1	; select bank2/3
 11596  0D3B  0087               	movwf	7
 11597  0D3C  0801               	movf	1,w
 11598  0D3D  3A80               	xorlw	128
 11599  0D3E  00A5               	movwf	??_Button_State_Pressed
 11600  0D3F  0824               	movf	Button_State_Pressed@button,w
 11601  0D40  3E0E               	addlw	14
 11602  0D41  0086               	movwf	6
 11603  0D42  3001               	movlw	1	; select bank2/3
 11604  0D43  0087               	movwf	7
 11605  0D44  0824               	movf	Button_State_Pressed@button,w
 11606  0D45  3E0E               	addlw	14
 11607  0D46  0084               	movwf	4
 11608  0D47  3001               	movlw	1	; select bank2/3
 11609  0D48  0085               	movwf	5
 11610  0D49  3600               	lsrf	0,w
 11611  0D4A  0201               	subwf	1,w
 11612  0D4B  3A80               	xorlw	128
 11613  0D4C  02A5               	subwf	??_Button_State_Pressed,f
 11614  0D4D  1803               	skipnc
 11615  0D4E  0008               	return
 11616                           
 11617                           ;mcc_generated_files/mtouch/mtouch_button.c: 284:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 285:         button->state = MTOUCH_BUTTON_STATE_notPressed;
 11618  0D4F  0824               	movf	Button_State_Pressed@button,w
 11619  0D50  3E02               	addlw	2
 11620  0D51  0086               	movwf	6
 11621  0D52  3001               	movlw	1	; select bank2/3
 11622  0D53  0087               	movwf	7
 11623  0D54  0181               	clrf	1
 11624  0D55  0A81               	incf	1,f
 11625                           
 11626                           ;mcc_generated_files/mtouch/mtouch_button.c: 286:         button->counter = (mtouch_butt
      +                          on_statecounter_t)0;
 11627  0D56  0824               	movf	Button_State_Pressed@button,w
 11628  0D57  3E0A               	addlw	10
 11629  0D58  0086               	movwf	6
 11630  0D59  3001               	movlw	1	; select bank2/3
 11631  0D5A  0087               	movwf	7
 11632  0D5B  3000               	movlw	0
 11633  0D5C  3FC0               	movwi [0]fsr1
 11634  0D5D  3FC1               	movwi [1]fsr1
 11635                           
 11636                           ;mcc_generated_files/mtouch/mtouch_button.c: 287:         button->baseline_count = (mtou
      +                          ch_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
 11637  0D5E  0824               	movf	Button_State_Pressed@button,w
 11638  0D5F  3E0C               	addlw	12
 11639  0D60  0086               	movwf	6
 11640  0D61  3001               	movlw	1	; select bank2/3
 11641  0D62  0087               	movwf	7
 11642  0D63  30FF               	movlw	255
 11643  0D64  3FC0               	movwi [0]fsr1
 11644  0D65  30FB               	movlw	251
 11645  0D66  3FC1               	movwi [1]fsr1
 11646                           
 11647                           ;mcc_generated_files/mtouch/mtouch_button.c: 288:         callback_notPressed(button->na
      +                          me);
 11648  0D67  0824               	movf	Button_State_Pressed@button,w
 11649  0D68  0086               	movwf	6
 11650  0D69  3001               	movlw	1	; select bank2/3
 11651  0D6A  0087               	movwf	7
 11652  0D6B  0801               	movf	1,w
 11653  0D6C  00A5               	movwf	??_Button_State_Pressed
 11654  0D6D  0825               	movf	??_Button_State_Pressed,w
 11655  0D6E  00F4               	movwf	myButtonReleasedCallback@button
 11656  0D6F  086D               	movf	_callback_notPressed+1,w
 11657  0D70  008A               	movwf	10
 11658  0D71  086C               	movf	_callback_notPressed,w
 11659  0D72  000A               	callw
 11660  0D73  318D               	pagesel	$
 11661  0D74  0008               	return
 11662  0D75                     __end_of_Button_State_Pressed:	
 11663                           
 11664                           	psect	text70
 11665  17DA                     __ptext70:	
 11666 ;; *************** function _myButtonPressedCallback *****************
 11667 ;; Defined at:
 11668 ;;		line 183 in file "main.c"
 11669 ;; Parameters:    Size  Location     Type
 11670 ;;  button          1    4[COMMON] enum E2913
 11671 ;; Auto vars:     Size  Location     Type
 11672 ;;		None
 11673 ;; Return value:  Size  Location     Type
 11674 ;;                  1    wreg      void 
 11675 ;; Registers used:
 11676 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11677 ;; Tracked objects:
 11678 ;;		On entry : 0/0
 11679 ;;		On exit  : 0/0
 11680 ;;		Unchanged: 0/0
 11681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11682 ;;      Params:         1       0       0       0       0       0       0       0
 11683 ;;      Locals:         0       0       0       0       0       0       0       0
 11684 ;;      Temps:          0       0       0       0       0       0       0       0
 11685 ;;      Totals:         1       0       0       0       0       0       0       0
 11686 ;;Total ram usage:        1 bytes
 11687 ;; Hardware stack levels used:    1
 11688 ;; Hardware stack levels required when called:    6
 11689 ;; This function calls:
 11690 ;;		_LED_PROCESS
 11691 ;;		_RELAY_PROCESS
 11692 ;; This function is called by:
 11693 ;;		_main
 11694 ;;		_Button_State_NotPressed
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           
 11699                           ;psect for function _myButtonPressedCallback
 11700  17DA                     _myButtonPressedCallback:	
 11701                           
 11702                           ;main.c: 183: void myButtonPressedCallback(enum mtouch_button_names button);main.c: 184:
      +                           {;main.c: 185:     count_conf = 0;
 11703                           
 11704                           ;incstack = 0
 11705                           ; Regs used in _myButtonPressedCallback: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11706  17DA  0021               	movlb	1	; select bank1
 11707  17DB  01C2               	clrf	_count_conf^(0+128)
 11708  17DC  01C3               	clrf	(_count_conf+1)^(0+128)
 11709                           
 11710                           ;main.c: 186:     if(config_status == 0)
 11711  17DD  0020               	movlb	0	; select bank0
 11712  17DE  0861               	movf	_config_status,w
 11713  17DF  1D03               	btfss	3,2
 11714  17E0  0008               	return
 11715                           
 11716                           ;main.c: 187:     {;main.c: 188:         if(button == 0) {last_touch_status.full_status 
      +                          ^= 0b00000001;}
 11717  17E1  0874               	movf	myButtonPressedCallback@button,w
 11718  17E2  1D03               	btfss	3,2
 11719  17E3  2FE8               	goto	l4331
 11720  17E4  3001               	movlw	1
 11721  17E5  06D9               	xorwf	_last_touch_status,f
 11722  17E6  3000               	movlw	0
 11723  17E7  06DA               	xorwf	_last_touch_status+1,f
 11724  17E8                     l4331:	
 11725                           
 11726                           ;main.c: 189:         if(button == 1) {last_touch_status.full_status ^= 0b00000010;}
 11727  17E8  0374               	decf	myButtonPressedCallback@button,w
 11728  17E9  1D03               	btfss	3,2
 11729  17EA  2FEF               	goto	l4335
 11730  17EB  3002               	movlw	2
 11731  17EC  06D9               	xorwf	_last_touch_status,f
 11732  17ED  3000               	movlw	0
 11733  17EE  06DA               	xorwf	_last_touch_status+1,f
 11734  17EF                     l4335:	
 11735                           
 11736                           ;main.c: 190:         if(button == 2) {last_touch_status.full_status ^= 0b00000100;}
 11737  17EF  3002               	movlw	2
 11738  17F0  0674               	xorwf	myButtonPressedCallback@button,w
 11739  17F1  1D03               	btfss	3,2
 11740  17F2  2FF7               	goto	l4339
 11741  17F3  3004               	movlw	4
 11742  17F4  06D9               	xorwf	_last_touch_status,f
 11743  17F5  3000               	movlw	0
 11744  17F6  06DA               	xorwf	_last_touch_status+1,f
 11745  17F7                     l4339:	
 11746                           
 11747                           ;main.c: 192:         LED_PROCESS(last_touch_status.full_status);
 11748  17F7  0859               	movf	_last_touch_status,w
 11749  17F8  318D  2575  3197   	fcall	_LED_PROCESS
 11750                           
 11751                           ;main.c: 193:         RELAY_PROCESS(last_touch_status.full_status);
 11752  17FB  0020               	movlb	0	; select bank0
 11753  17FC  0859               	movf	_last_touch_status,w
 11754  17FD  318A  22B8         	fcall	_RELAY_PROCESS
 11755  17FF  0008               	return
 11756  1800                     __end_of_myButtonPressedCallback:	
 11757                           
 11758                           	psect	text71
 11759  1476                     __ptext71:	
 11760 ;; *************** function _Button_DefaultCallback *****************
 11761 ;; Defined at:
 11762 ;;		line 527 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11763 ;; Parameters:    Size  Location     Type
 11764 ;;  button          1    4[COMMON] enum E3069
 11765 ;; Auto vars:     Size  Location     Type
 11766 ;;		None
 11767 ;; Return value:  Size  Location     Type
 11768 ;;                  1    wreg      void 
 11769 ;; Registers used:
 11770 ;;		None
 11771 ;; Tracked objects:
 11772 ;;		On entry : 0/0
 11773 ;;		On exit  : 0/0
 11774 ;;		Unchanged: 0/0
 11775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11776 ;;      Params:         1       0       0       0       0       0       0       0
 11777 ;;      Locals:         0       0       0       0       0       0       0       0
 11778 ;;      Temps:          0       0       0       0       0       0       0       0
 11779 ;;      Totals:         1       0       0       0       0       0       0       0
 11780 ;;Total ram usage:        1 bytes
 11781 ;; Hardware stack levels used:    1
 11782 ;; Hardware stack levels required when called:    4
 11783 ;; This function calls:
 11784 ;;		Nothing
 11785 ;; This function is called by:
 11786 ;;		_Button_State_NotPressed
 11787 ;;		_Button_State_Pressed
 11788 ;; This function uses a non-reentrant model
 11789 ;;
 11790                           
 11791                           
 11792                           ;psect for function _Button_DefaultCallback
 11793  1476                     _Button_DefaultCallback:	
 11794                           
 11795                           ;incstack = 0
 11796                           ; Regs used in _Button_DefaultCallback: []
 11797  1476  0008               	return
 11798  1477                     __end_of_Button_DefaultCallback:	
 11799                           
 11800                           	psect	text72
 11801  1772                     __ptext72:	
 11802 ;; *************** function _myButtonReleasedCallback *****************
 11803 ;; Defined at:
 11804 ;;		line 196 in file "main.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;  button          1    4[COMMON] enum E2913
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;		None
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  1    wreg      void 
 11811 ;; Registers used:
 11812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11818 ;;      Params:         1       0       0       0       0       0       0       0
 11819 ;;      Locals:         0       0       0       0       0       0       0       0
 11820 ;;      Temps:          0       0       0       0       0       0       0       0
 11821 ;;      Totals:         1       0       0       0       0       0       0       0
 11822 ;;Total ram usage:        1 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    5
 11825 ;; This function calls:
 11826 ;;		_MTOUCH_Button_isPressed
 11827 ;; This function is called by:
 11828 ;;		_main
 11829 ;;		_Button_State_Pressed
 11830 ;; This function uses a non-reentrant model
 11831 ;;
 11832                           
 11833                           
 11834                           ;psect for function _myButtonReleasedCallback
 11835  1772                     _myButtonReleasedCallback:	
 11836                           
 11837                           ;main.c: 196: void myButtonReleasedCallback(enum mtouch_button_names button);main.c: 197
      +                          : {;main.c: 198:     count_conf = 0;
 11838                           
 11839                           ;incstack = 0
 11840                           ; Regs used in _myButtonReleasedCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11841  1772  0021               	movlb	1	; select bank1
 11842  1773  01C2               	clrf	_count_conf^(0+128)
 11843  1774  01C3               	clrf	(_count_conf+1)^(0+128)
 11844                           
 11845                           ;main.c: 199:     if(config_status == 0)
 11846  1775  0020               	movlb	0	; select bank0
 11847  1776  0861               	movf	_config_status,w
 11848  1777  1D03               	btfss	3,2
 11849  1778  0008               	return
 11850                           
 11851                           ;main.c: 200:     {;main.c: 202:         if(MTOUCH_Button_isPressed(0)==0&&MTOUCH_Button
      +                          _isPressed(1)==0&&MTOUCH_Button_isPressed(2)==0)
 11852  1779  3000               	movlw	0
 11853  177A  3196  26E7  3197   	fcall	_MTOUCH_Button_isPressed
 11854  177D  3A00               	xorlw	0
 11855  177E  1D03               	skipz
 11856  177F  0008               	return
 11857  1780  3001               	movlw	1
 11858  1781  3196  26E7  3197   	fcall	_MTOUCH_Button_isPressed
 11859  1784  3A00               	xorlw	0
 11860  1785  1D03               	skipz
 11861  1786  0008               	return
 11862  1787  3002               	movlw	2
 11863  1788  3196  26E7  3197   	fcall	_MTOUCH_Button_isPressed
 11864  178B  3A00               	xorlw	0
 11865  178C  1D03               	skipz
 11866  178D  0008               	return
 11867                           
 11868                           ;main.c: 203:         {;main.c: 204:             update_state_flag = 1;
 11869  178E  0020               	movlb	0	; select bank0
 11870  178F  01DD               	clrf	_update_state_flag
 11871  1790  0ADD               	incf	_update_state_flag,f
 11872  1791  0008               	return
 11873  1792                     __end_of_myButtonReleasedCallback:	
 11874                           
 11875                           	psect	text73
 11876  16E7                     __ptext73:	
 11877 ;; *************** function _MTOUCH_Button_isPressed *****************
 11878 ;; Defined at:
 11879 ;;		line 374 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;  name            1    wreg     enum E3069
 11882 ;; Auto vars:     Size  Location     Type
 11883 ;;  name            1    2[COMMON] enum E3069
 11884 ;; Return value:  Size  Location     Type
 11885 ;;                  1    wreg      _Bool 
 11886 ;; Registers used:
 11887 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11888 ;; Tracked objects:
 11889 ;;		On entry : 0/0
 11890 ;;		On exit  : 0/0
 11891 ;;		Unchanged: 0/0
 11892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11893 ;;      Params:         0       0       0       0       0       0       0       0
 11894 ;;      Locals:         1       0       0       0       0       0       0       0
 11895 ;;      Temps:          1       0       0       0       0       0       0       0
 11896 ;;      Totals:         2       0       0       0       0       0       0       0
 11897 ;;Total ram usage:        2 bytes
 11898 ;; Hardware stack levels used:    1
 11899 ;; Hardware stack levels required when called:    4
 11900 ;; This function calls:
 11901 ;;		Nothing
 11902 ;; This function is called by:
 11903 ;;		_main
 11904 ;;		_myButtonReleasedCallback
 11905 ;;		_touch_example
 11906 ;;		_MTOUCH_Button_Buttonmask_Get
 11907 ;; This function uses a non-reentrant model
 11908 ;;
 11909                           
 11910                           
 11911                           ;psect for function _MTOUCH_Button_isPressed
 11912  16E7                     _MTOUCH_Button_isPressed:	
 11913                           
 11914                           ;incstack = 0
 11915                           ; Regs used in _MTOUCH_Button_isPressed: [wreg+fsr1l+fsr1h+status,2+status,0]
 11916                           ;MTOUCH_Button_isPressed@name stored from wreg
 11917  16E7  00F2               	movwf	MTOUCH_Button_isPressed@name
 11918                           
 11919                           ;mcc_generated_files/mtouch/mtouch_button.c: 374: _Bool MTOUCH_Button_isPressed(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 375: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 376:     if(name < 3u)
 11920  16E8  3003               	movlw	3
 11921  16E9  0272               	subwf	MTOUCH_Button_isPressed@name,w
 11922  16EA  1803               	skipnc
 11923  16EB  2F00               	goto	l3943
 11924                           
 11925                           ;mcc_generated_files/mtouch/mtouch_button.c: 377:         return (_Bool)((mtouch_button[
      +                          name].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
 11926  16EC  0872               	movf	MTOUCH_Button_isPressed@name,w
 11927  16ED  00F1               	movwf	??_MTOUCH_Button_isPressed
 11928  16EE  3003               	movlw	3
 11929  16EF                     u2425:	
 11930  16EF  35F1               	lslf	??_MTOUCH_Button_isPressed,f
 11931  16F0  3EFF               	addlw	-1
 11932  16F1  1D03               	skipz
 11933  16F2  2EEF               	goto	u2425
 11934  16F3  3571               	lslf	??_MTOUCH_Button_isPressed,w
 11935  16F4  3E22               	addlw	(low ((_mtouch_button| (0+256)+2)))& (0+255)
 11936  16F5  0086               	movwf	6
 11937  16F6  3001               	movlw	1	; select bank2/3
 11938  16F7  0087               	movwf	7
 11939  16F8  3002               	movlw	2
 11940  16F9  0601               	xorwf	1,w
 11941  16FA  1D03               	btfss	3,2
 11942  16FB  2EFE               	goto	u2430
 11943  16FC  3001               	movlw	1
 11944  16FD  0008               	return
 11945  16FE                     u2430:	
 11946  16FE  3000               	movlw	0
 11947  16FF  0008               	return
 11948  1700                     l3943:	
 11949                           
 11950                           ;mcc_generated_files/mtouch/mtouch_button.c: 379:         return 0;
 11951  1700  3000               	movlw	0
 11952  1701  0008               	return
 11953  1702                     __end_of_MTOUCH_Button_isPressed:	
 11954                           
 11955                           	psect	text74
 11956  0A09                     __ptext74:	
 11957 ;; *************** function _MTOUCH_Button_Initialize *****************
 11958 ;; Defined at:
 11959 ;;		line 159 in file "mcc_generated_files/mtouch/mtouch_button.c"
 11960 ;; Parameters:    Size  Location     Type
 11961 ;;  name            1    wreg     enum E3069
 11962 ;; Auto vars:     Size  Location     Type
 11963 ;;  name            1    9[COMMON] enum E3069
 11964 ;;  button          1   10[COMMON] PTR struct .
 11965 ;;		 -> mtouch_button(48), 
 11966 ;; Return value:  Size  Location     Type
 11967 ;;                  1    wreg      void 
 11968 ;; Registers used:
 11969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11970 ;; Tracked objects:
 11971 ;;		On entry : 0/0
 11972 ;;		On exit  : 0/0
 11973 ;;		Unchanged: 0/0
 11974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11975 ;;      Params:         0       0       0       0       0       0       0       0
 11976 ;;      Locals:         2       0       0       0       0       0       0       0
 11977 ;;      Temps:          2       0       0       0       0       0       0       0
 11978 ;;      Totals:         4       0       0       0       0       0       0       0
 11979 ;;Total ram usage:        4 bytes
 11980 ;; Hardware stack levels used:    1
 11981 ;; Hardware stack levels required when called:    6
 11982 ;; This function calls:
 11983 ;;		_MTOUCH_Sensor_Calibrate
 11984 ;; This function is called by:
 11985 ;;		_MTOUCH_Button_InitializeAll
 11986 ;;		_Button_Service
 11987 ;;		_Button_State_NotPressed
 11988 ;;		_Button_State_Pressed
 11989 ;; This function uses a non-reentrant model
 11990 ;;
 11991                           
 11992                           
 11993                           ;psect for function _MTOUCH_Button_Initialize
 11994  0A09                     _MTOUCH_Button_Initialize:	
 11995                           
 11996                           ;incstack = 0
 11997                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 11998                           ;MTOUCH_Button_Initialize@name stored from wreg
 11999  0A09  00F9               	movwf	MTOUCH_Button_Initialize@name
 12000                           
 12001                           ;mcc_generated_files/mtouch/mtouch_button.c: 159: void MTOUCH_Button_Initialize(enum mto
      +                          uch_button_names name);mcc_generated_files/mtouch/mtouch_button.c: 160: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 161:     mtouch_button_t* button = &mtouch_button[name];
 12002  0A0A  0879               	movf	MTOUCH_Button_Initialize@name,w
 12003  0A0B  00F7               	movwf	??_MTOUCH_Button_Initialize
 12004  0A0C  3003               	movlw	3
 12005  0A0D                     u4745:	
 12006  0A0D  35F7               	lslf	??_MTOUCH_Button_Initialize,f
 12007  0A0E  3EFF               	addlw	-1
 12008  0A0F  1D03               	skipz
 12009  0A10  2A0D               	goto	u4745
 12010  0A11  3577               	lslf	??_MTOUCH_Button_Initialize,w
 12011  0A12  3E20               	addlw	(low (_mtouch_button| (0+256)))& (0+255)
 12012  0A13  00F8               	movwf	??_MTOUCH_Button_Initialize+1
 12013  0A14  0878               	movf	??_MTOUCH_Button_Initialize+1,w
 12014  0A15  00FA               	movwf	MTOUCH_Button_Initialize@button
 12015                           
 12016                           ;mcc_generated_files/mtouch/mtouch_button.c: 163:     button->state = MTOUCH_BUTTON_STAT
      +                          E_initializing;
 12017  0A16  087A               	movf	MTOUCH_Button_Initialize@button,w
 12018  0A17  3E02               	addlw	2
 12019  0A18  0086               	movwf	6
 12020  0A19  3001               	movlw	1	; select bank2/3
 12021  0A1A  0087               	movwf	7
 12022  0A1B  0181               	clrf	1
 12023                           
 12024                           ;mcc_generated_files/mtouch/mtouch_button.c: 164:     button->baseline = (mtouch_button_
      +                          baseline_t)0;
 12025  0A1C  087A               	movf	MTOUCH_Button_Initialize@button,w
 12026  0A1D  3E05               	addlw	5
 12027  0A1E  0086               	movwf	6
 12028  0A1F  3001               	movlw	1	; select bank2/3
 12029  0A20  0087               	movwf	7
 12030  0A21  3000               	movlw	0
 12031  0A22  3FC0               	movwi [0]fsr1
 12032  0A23  3000               	movlw	0
 12033  0A24  3FC1               	movwi [1]fsr1
 12034  0A25  3FC2               	movwi [2]fsr1
 12035  0A26  3FC3               	movwi [3]fsr1
 12036                           
 12037                           ;mcc_generated_files/mtouch/mtouch_button.c: 165:     button->counter = (mtouch_button_s
      +                          tatecounter_t)0;
 12038  0A27  087A               	movf	MTOUCH_Button_Initialize@button,w
 12039  0A28  3E0A               	addlw	10
 12040  0A29  0086               	movwf	6
 12041  0A2A  3001               	movlw	1	; select bank2/3
 12042  0A2B  0087               	movwf	7
 12043  0A2C  3000               	movlw	0
 12044  0A2D  3FC0               	movwi [0]fsr1
 12045  0A2E  3FC1               	movwi [1]fsr1
 12046                           
 12047                           ;mcc_generated_files/mtouch/mtouch_button.c: 166:     button->baseline_count = (mtouch_b
      +                          utton_baselinecounter_t)0;
 12048  0A2F  087A               	movf	MTOUCH_Button_Initialize@button,w
 12049  0A30  3E0C               	addlw	12
 12050  0A31  0086               	movwf	6
 12051  0A32  3001               	movlw	1	; select bank2/3
 12052  0A33  0087               	movwf	7
 12053  0A34  3000               	movlw	0
 12054  0A35  3FC0               	movwi [0]fsr1
 12055  0A36  3FC1               	movwi [1]fsr1
 12056                           
 12057                           ;mcc_generated_files/mtouch/mtouch_button.c: 168:     MTOUCH_Sensor_Calibrate(button->se
      +                          nsor);
 12058  0A37  0A7A               	incf	MTOUCH_Button_Initialize@button,w
 12059  0A38  0086               	movwf	6
 12060  0A39  3001               	movlw	1	; select bank2/3
 12061  0A3A  0087               	movwf	7
 12062  0A3B  0801               	movf	1,w
 12063  0A3C  3195  25E9         	fcall	_MTOUCH_Sensor_Calibrate
 12064  0A3E  0008               	return
 12065  0A3F                     __end_of_MTOUCH_Button_Initialize:	
 12066                           
 12067                           	psect	text75
 12068  15E9                     __ptext75:	
 12069 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
 12070 ;; Defined at:
 12071 ;;		line 904 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12072 ;; Parameters:    Size  Location     Type
 12073 ;;  sensor          1    wreg     enum E2854
 12074 ;; Auto vars:     Size  Location     Type
 12075 ;;  sensor          1    6[COMMON] enum E2854
 12076 ;; Return value:  Size  Location     Type
 12077 ;;                  1    wreg      void 
 12078 ;; Registers used:
 12079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12080 ;; Tracked objects:
 12081 ;;		On entry : 0/0
 12082 ;;		On exit  : 0/0
 12083 ;;		Unchanged: 0/0
 12084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12085 ;;      Params:         0       0       0       0       0       0       0       0
 12086 ;;      Locals:         1       0       0       0       0       0       0       0
 12087 ;;      Temps:          1       0       0       0       0       0       0       0
 12088 ;;      Totals:         2       0       0       0       0       0       0       0
 12089 ;;Total ram usage:        2 bytes
 12090 ;; Hardware stack levels used:    1
 12091 ;; Hardware stack levels required when called:    5
 12092 ;; This function calls:
 12093 ;;		___bmul
 12094 ;; This function is called by:
 12095 ;;		_MTOUCH_Sensor_Initialize
 12096 ;;		_MTOUCH_Button_Initialize
 12097 ;; This function uses a non-reentrant model
 12098 ;;
 12099                           
 12100                           
 12101                           ;psect for function _MTOUCH_Sensor_Calibrate
 12102  15E9                     _MTOUCH_Sensor_Calibrate:	
 12103                           
 12104                           ;incstack = 0
 12105                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12106                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
 12107  15E9  00F6               	movwf	MTOUCH_Sensor_Calibrate@sensor
 12108                           
 12109                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 904: void MTOUCH_Sensor_Calibrate(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/mtouch/mtouch_sensor.c: 905: {;mcc_generated
      +                          _files/mtouch/mtouch_sensor.c: 906:     if(sensor < 3u)
 12110  15EA  3003               	movlw	3
 12111  15EB  0276               	subwf	MTOUCH_Sensor_Calibrate@sensor,w
 12112  15EC  1803               	skipnc
 12113  15ED  0008               	return
 12114                           
 12115                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 907:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 908:         mtouch_sensor[sensor].calibrated = 0;
 12116  15EE  3009               	movlw	9
 12117  15EF  00F5               	movwf	??_MTOUCH_Sensor_Calibrate
 12118  15F0  0875               	movf	??_MTOUCH_Sensor_Calibrate,w
 12119  15F1  00F1               	movwf	___bmul@multiplicand
 12120  15F2  0876               	movf	MTOUCH_Sensor_Calibrate@sensor,w
 12121  15F3  3195  25B6         	fcall	___bmul
 12122  15F5  3E58               	addlw	(low ((_mtouch_sensor| (0+256)+8)))& (0+255)
 12123  15F6  0086               	movwf	6
 12124  15F7  3001               	movlw	1	; select bank2/3
 12125  15F8  0087               	movwf	7
 12126  15F9  1101               	bcf	1,2
 12127  15FA  0008               	return
 12128  15FB                     __end_of_MTOUCH_Sensor_Calibrate:	
 12129                           
 12130                           	psect	text76
 12131  0EDF                     __ptext76:	
 12132 ;; *************** function _Button_Baseline_Update *****************
 12133 ;; Defined at:
 12134 ;;		line 481 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12135 ;; Parameters:    Size  Location     Type
 12136 ;;  button          1    wreg     PTR struct .
 12137 ;;		 -> mtouch_button(48), 
 12138 ;; Auto vars:     Size  Location     Type
 12139 ;;  button          1    7[COMMON] PTR struct .
 12140 ;;		 -> mtouch_button(48), 
 12141 ;; Return value:  Size  Location     Type
 12142 ;;                  1    wreg      void 
 12143 ;; Registers used:
 12144 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12145 ;; Tracked objects:
 12146 ;;		On entry : 0/0
 12147 ;;		On exit  : 0/0
 12148 ;;		Unchanged: 0/0
 12149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12150 ;;      Params:         0       0       0       0       0       0       0       0
 12151 ;;      Locals:         1       0       0       0       0       0       0       0
 12152 ;;      Temps:          6       0       0       0       0       0       0       0
 12153 ;;      Totals:         7       0       0       0       0       0       0       0
 12154 ;;Total ram usage:        7 bytes
 12155 ;; Hardware stack levels used:    1
 12156 ;; Hardware stack levels required when called:    4
 12157 ;; This function calls:
 12158 ;;		Nothing
 12159 ;; This function is called by:
 12160 ;;		_Button_State_Initializing
 12161 ;;		_Button_State_NotPressed
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           
 12166                           ;psect for function _Button_Baseline_Update
 12167  0EDF                     _Button_Baseline_Update:	
 12168                           
 12169                           ;incstack = 0
 12170                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12171                           ;Button_Baseline_Update@button stored from wreg
 12172  0EDF  00F7               	movwf	Button_Baseline_Update@button
 12173                           
 12174                           ;mcc_generated_files/mtouch/mtouch_button.c: 481: static void Button_Baseline_Update(mto
      +                          uch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 482: {;mcc_generated_f
      +                          iles/mtouch/mtouch_button.c: 483:     if (GIE == (uint8_t)1)
 12175  0EE0  1F8B               	btfss	11,7	;volatile
 12176  0EE1  2F29               	goto	l4313
 12177                           
 12178                           ;mcc_generated_files/mtouch/mtouch_button.c: 484:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 485:         GIE = (uint8_t)0;
 12179  0EE2  138B               	bcf	11,7	;volatile
 12180                           
 12181                           ;mcc_generated_files/mtouch/mtouch_button.c: 486:         button->baseline -= (button->b
      +                          aseline) >> ((uint8_t)4u);
 12182  0EE3  0877               	movf	Button_Baseline_Update@button,w
 12183  0EE4  3E05               	addlw	5
 12184  0EE5  0086               	movwf	6
 12185  0EE6  3001               	movlw	1	; select bank2/3
 12186  0EE7  0087               	movwf	7
 12187  0EE8  3F40               	moviw [0]fsr1
 12188  0EE9  00F1               	movwf	??_Button_Baseline_Update
 12189  0EEA  3F41               	moviw [1]fsr1
 12190  0EEB  00F2               	movwf	??_Button_Baseline_Update+1
 12191  0EEC  3F42               	moviw [2]fsr1
 12192  0EED  00F3               	movwf	??_Button_Baseline_Update+2
 12193  0EEE  3F43               	moviw [3]fsr1
 12194  0EEF  00F4               	movwf	??_Button_Baseline_Update+3
 12195  0EF0  3004               	movlw	4
 12196  0EF1                     u2975:	
 12197  0EF1  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12198  0EF2  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12199  0EF3  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12200  0EF4  0CF1               	rrf	??_Button_Baseline_Update,f
 12201  0EF5  0B89               	decfsz	9,f
 12202  0EF6  2EF1               	goto	u2975
 12203  0EF7  0877               	movf	Button_Baseline_Update@button,w
 12204  0EF8  3E05               	addlw	5
 12205  0EF9  0086               	movwf	6
 12206  0EFA  3001               	movlw	1	; select bank2/3
 12207  0EFB  0087               	movwf	7
 12208  0EFC  0871               	movf	??_Button_Baseline_Update,w
 12209  0EFD  0281               	subwf	1,f
 12210  0EFE  3141               	addfsr 1,1
 12211  0EFF  0872               	movf	??_Button_Baseline_Update+1,w
 12212  0F00  3B81               	subwfb	1,f
 12213  0F01  3141               	addfsr 1,1
 12214  0F02  0873               	movf	??_Button_Baseline_Update+2,w
 12215  0F03  3B81               	subwfb	1,f
 12216  0F04  3141               	addfsr 1,1
 12217  0F05  0874               	movf	??_Button_Baseline_Update+3,w
 12218  0F06  3B81               	subwfb	1,f
 12219  0F07  317D               	addfsr 1,-3
 12220                           
 12221                           ;mcc_generated_files/mtouch/mtouch_button.c: 487:         button->baseline += button->re
      +                          ading;
 12222  0F08  0877               	movf	Button_Baseline_Update@button,w
 12223  0F09  3E03               	addlw	3
 12224  0F0A  0086               	movwf	6
 12225  0F0B  3001               	movlw	1	; select bank2/3
 12226  0F0C  0087               	movwf	7
 12227  0F0D  3F40               	moviw [0]fsr1
 12228  0F0E  00F1               	movwf	??_Button_Baseline_Update
 12229  0F0F  3F41               	moviw [1]fsr1
 12230  0F10  00F2               	movwf	??_Button_Baseline_Update+1
 12231  0F11  0871               	movf	??_Button_Baseline_Update,w
 12232  0F12  00F3               	movwf	??_Button_Baseline_Update+2
 12233  0F13  0872               	movf	??_Button_Baseline_Update+1,w
 12234  0F14  00F4               	movwf	??_Button_Baseline_Update+3
 12235  0F15  01F5               	clrf	??_Button_Baseline_Update+4
 12236  0F16  01F6               	clrf	??_Button_Baseline_Update+5
 12237  0F17  0877               	movf	Button_Baseline_Update@button,w
 12238  0F18  3E05               	addlw	5
 12239  0F19  0086               	movwf	6
 12240  0F1A  3001               	movlw	1	; select bank2/3
 12241  0F1B  0087               	movwf	7
 12242  0F1C  0873               	movf	??_Button_Baseline_Update+2,w
 12243  0F1D  0781               	addwf	1,f
 12244  0F1E  3141               	addfsr 1,1
 12245  0F1F  0874               	movf	??_Button_Baseline_Update+3,w
 12246  0F20  3D81               	addwfc	1,f
 12247  0F21  3141               	addfsr 1,1
 12248  0F22  0875               	movf	??_Button_Baseline_Update+4,w
 12249  0F23  3D81               	addwfc	1,f
 12250  0F24  3141               	addfsr 1,1
 12251  0F25  0876               	movf	??_Button_Baseline_Update+5,w
 12252  0F26  3D81               	addwfc	1,f
 12253                           
 12254                           ;mcc_generated_files/mtouch/mtouch_button.c: 488:         GIE = (uint8_t)1;
 12255  0F27  178B               	bsf	11,7	;volatile
 12256                           
 12257                           ;mcc_generated_files/mtouch/mtouch_button.c: 489:     }
 12258  0F28  0008               	return
 12259  0F29                     l4313:	
 12260                           
 12261                           ;mcc_generated_files/mtouch/mtouch_button.c: 491:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 492:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
 12262  0F29  0877               	movf	Button_Baseline_Update@button,w
 12263  0F2A  3E05               	addlw	5
 12264  0F2B  0086               	movwf	6
 12265  0F2C  3001               	movlw	1	; select bank2/3
 12266  0F2D  0087               	movwf	7
 12267  0F2E  3F40               	moviw [0]fsr1
 12268  0F2F  00F1               	movwf	??_Button_Baseline_Update
 12269  0F30  3F41               	moviw [1]fsr1
 12270  0F31  00F2               	movwf	??_Button_Baseline_Update+1
 12271  0F32  3F42               	moviw [2]fsr1
 12272  0F33  00F3               	movwf	??_Button_Baseline_Update+2
 12273  0F34  3F43               	moviw [3]fsr1
 12274  0F35  00F4               	movwf	??_Button_Baseline_Update+3
 12275  0F36  3004               	movlw	4
 12276  0F37                     u2985:	
 12277  0F37  36F4               	lsrf	??_Button_Baseline_Update+3,f
 12278  0F38  0CF3               	rrf	??_Button_Baseline_Update+2,f
 12279  0F39  0CF2               	rrf	??_Button_Baseline_Update+1,f
 12280  0F3A  0CF1               	rrf	??_Button_Baseline_Update,f
 12281  0F3B  0B89               	decfsz	9,f
 12282  0F3C  2F37               	goto	u2985
 12283  0F3D  0877               	movf	Button_Baseline_Update@button,w
 12284  0F3E  3E05               	addlw	5
 12285  0F3F  0086               	movwf	6
 12286  0F40  3001               	movlw	1	; select bank2/3
 12287  0F41  0087               	movwf	7
 12288  0F42  0871               	movf	??_Button_Baseline_Update,w
 12289  0F43  0281               	subwf	1,f
 12290  0F44  3141               	addfsr 1,1
 12291  0F45  0872               	movf	??_Button_Baseline_Update+1,w
 12292  0F46  3B81               	subwfb	1,f
 12293  0F47  3141               	addfsr 1,1
 12294  0F48  0873               	movf	??_Button_Baseline_Update+2,w
 12295  0F49  3B81               	subwfb	1,f
 12296  0F4A  3141               	addfsr 1,1
 12297  0F4B  0874               	movf	??_Button_Baseline_Update+3,w
 12298  0F4C  3B81               	subwfb	1,f
 12299  0F4D  317D               	addfsr 1,-3
 12300                           
 12301                           ;mcc_generated_files/mtouch/mtouch_button.c: 493:         button->baseline += button->re
      +                          ading;
 12302  0F4E  0877               	movf	Button_Baseline_Update@button,w
 12303  0F4F  3E03               	addlw	3
 12304  0F50  0086               	movwf	6
 12305  0F51  3001               	movlw	1	; select bank2/3
 12306  0F52  0087               	movwf	7
 12307  0F53  3F40               	moviw [0]fsr1
 12308  0F54  00F1               	movwf	??_Button_Baseline_Update
 12309  0F55  3F41               	moviw [1]fsr1
 12310  0F56  00F2               	movwf	??_Button_Baseline_Update+1
 12311  0F57  0871               	movf	??_Button_Baseline_Update,w
 12312  0F58  00F3               	movwf	??_Button_Baseline_Update+2
 12313  0F59  0872               	movf	??_Button_Baseline_Update+1,w
 12314  0F5A  00F4               	movwf	??_Button_Baseline_Update+3
 12315  0F5B  01F5               	clrf	??_Button_Baseline_Update+4
 12316  0F5C  01F6               	clrf	??_Button_Baseline_Update+5
 12317  0F5D  0877               	movf	Button_Baseline_Update@button,w
 12318  0F5E  3E05               	addlw	5
 12319  0F5F  0086               	movwf	6
 12320  0F60  3001               	movlw	1	; select bank2/3
 12321  0F61  0087               	movwf	7
 12322  0F62  0873               	movf	??_Button_Baseline_Update+2,w
 12323  0F63  0781               	addwf	1,f
 12324  0F64  3141               	addfsr 1,1
 12325  0F65  0874               	movf	??_Button_Baseline_Update+3,w
 12326  0F66  3D81               	addwfc	1,f
 12327  0F67  3141               	addfsr 1,1
 12328  0F68  0875               	movf	??_Button_Baseline_Update+4,w
 12329  0F69  3D81               	addwfc	1,f
 12330  0F6A  3141               	addfsr 1,1
 12331  0F6B  0876               	movf	??_Button_Baseline_Update+5,w
 12332  0F6C  3D81               	addwfc	1,f
 12333  0F6D  0008               	return
 12334  0F6E                     __end_of_Button_Baseline_Update:	
 12335                           
 12336                           	psect	text77
 12337  0913                     __ptext77:	
 12338 ;; *************** function _Button_Baseline_Initialize *****************
 12339 ;; Defined at:
 12340 ;;		line 475 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12341 ;; Parameters:    Size  Location     Type
 12342 ;;  button          1    wreg     PTR struct .
 12343 ;;		 -> mtouch_button(48), 
 12344 ;; Auto vars:     Size  Location     Type
 12345 ;;  button          1    9[COMMON] PTR struct .
 12346 ;;		 -> mtouch_button(48), 
 12347 ;; Return value:  Size  Location     Type
 12348 ;;                  1    wreg      void 
 12349 ;; Registers used:
 12350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12351 ;; Tracked objects:
 12352 ;;		On entry : 0/0
 12353 ;;		On exit  : 0/0
 12354 ;;		Unchanged: 0/0
 12355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12356 ;;      Params:         0       0       0       0       0       0       0       0
 12357 ;;      Locals:         1       0       0       0       0       0       0       0
 12358 ;;      Temps:          0       4       0       0       0       0       0       0
 12359 ;;      Totals:         1       4       0       0       0       0       0       0
 12360 ;;Total ram usage:        5 bytes
 12361 ;; Hardware stack levels used:    1
 12362 ;; Hardware stack levels required when called:    6
 12363 ;; This function calls:
 12364 ;;		_MTOUCH_Sensor_RawSample_Get
 12365 ;; This function is called by:
 12366 ;;		_Button_State_Initializing
 12367 ;; This function uses a non-reentrant model
 12368 ;;
 12369                           
 12370                           
 12371                           ;psect for function _Button_Baseline_Initialize
 12372  0913                     _Button_Baseline_Initialize:	
 12373                           
 12374                           ;incstack = 0
 12375                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12376                           ;Button_Baseline_Initialize@button stored from wreg
 12377  0913  00F9               	movwf	Button_Baseline_Initialize@button
 12378                           
 12379                           ;mcc_generated_files/mtouch/mtouch_button.c: 475: static void Button_Baseline_Initialize
      +                          (mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 476: {;mcc_generat
      +                          ed_files/mtouch/mtouch_button.c: 477:     button->baseline = MTOUCH_Sensor_RawSample_Get
      +                          (button->sensor);
 12380  0914  0A79               	incf	Button_Baseline_Initialize@button,w
 12381  0915  0086               	movwf	6
 12382  0916  3001               	movlw	1	; select bank2/3
 12383  0917  0087               	movwf	7
 12384  0918  0801               	movf	1,w
 12385  0919  3196  26B7  3189   	fcall	_MTOUCH_Sensor_RawSample_Get
 12386  091C  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12387  091D  0020               	movlb	0	; select bank0
 12388  091E  00A0               	movwf	??_Button_Baseline_Initialize
 12389  091F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12390  0920  00A1               	movwf	??_Button_Baseline_Initialize+1
 12391  0921  01A2               	clrf	??_Button_Baseline_Initialize+2
 12392  0922  01A3               	clrf	??_Button_Baseline_Initialize+3
 12393  0923  0879               	movf	Button_Baseline_Initialize@button,w
 12394  0924  3E05               	addlw	5
 12395  0925  0086               	movwf	6
 12396  0926  3001               	movlw	1	; select bank2/3
 12397  0927  0087               	movwf	7
 12398  0928  0820               	movf	??_Button_Baseline_Initialize,w
 12399  0929  3FC0               	movwi [0]fsr1
 12400  092A  0821               	movf	??_Button_Baseline_Initialize+1,w
 12401  092B  3FC1               	movwi [1]fsr1
 12402  092C  0822               	movf	??_Button_Baseline_Initialize+2,w
 12403  092D  3FC2               	movwi [2]fsr1
 12404  092E  0823               	movf	??_Button_Baseline_Initialize+3,w
 12405  092F  3FC3               	movwi [3]fsr1
 12406                           
 12407                           ;mcc_generated_files/mtouch/mtouch_button.c: 478:     button->baseline <<= ((uint8_t)4u)
      +                          ;
 12408  0930  0879               	movf	Button_Baseline_Initialize@button,w
 12409  0931  3E05               	addlw	5
 12410  0932  0086               	movwf	6
 12411  0933  3001               	movlw	1	; select bank2/3
 12412  0934  0087               	movwf	7
 12413  0935  3004               	movlw	4
 12414  0936                     u4755:	
 12415  0936  3581               	lslf	1,f
 12416  0937  3141               	addfsr 1,1
 12417  0938  0D81               	rlf	1,f
 12418  0939  3141               	addfsr 1,1
 12419  093A  0D81               	rlf	1,f
 12420  093B  3141               	addfsr 1,1
 12421  093C  0D81               	rlf	1,f
 12422  093D  317D               	addfsr 1,-3
 12423  093E  0B89               	decfsz	9,f
 12424  093F  2936               	goto	u4755
 12425  0940  0008               	return
 12426  0941                     __end_of_Button_Baseline_Initialize:	
 12427                           
 12428                           	psect	text78
 12429  1540                     __ptext78:	
 12430 ;; *************** function _Button_Reading_Update *****************
 12431 ;; Defined at:
 12432 ;;		line 448 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12433 ;; Parameters:    Size  Location     Type
 12434 ;;  button          1    wreg     PTR struct .
 12435 ;;		 -> mtouch_button(48), 
 12436 ;; Auto vars:     Size  Location     Type
 12437 ;;  button          1    0[BANK0 ] PTR struct .
 12438 ;;		 -> mtouch_button(48), 
 12439 ;; Return value:  Size  Location     Type
 12440 ;;                  1    wreg      void 
 12441 ;; Registers used:
 12442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12448 ;;      Params:         0       0       0       0       0       0       0       0
 12449 ;;      Locals:         0       1       0       0       0       0       0       0
 12450 ;;      Temps:          0       0       0       0       0       0       0       0
 12451 ;;      Totals:         0       1       0       0       0       0       0       0
 12452 ;;Total ram usage:        1 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    7
 12455 ;; This function calls:
 12456 ;;		_Button_Reading_Update_Helper
 12457 ;; This function is called by:
 12458 ;;		_Button_Service
 12459 ;; This function uses a non-reentrant model
 12460 ;;
 12461                           
 12462                           
 12463                           ;psect for function _Button_Reading_Update
 12464  1540                     _Button_Reading_Update:	
 12465                           
 12466                           ;incstack = 0
 12467                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12468                           ;Button_Reading_Update@button stored from wreg
 12469  1540  0020               	movlb	0	; select bank0
 12470  1541  00A0               	movwf	Button_Reading_Update@button
 12471                           
 12472                           ;mcc_generated_files/mtouch/mtouch_button.c: 448: static void Button_Reading_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 449: {;mcc_generated_fi
      +                          les/mtouch/mtouch_button.c: 450:     if (GIE == (uint8_t) 1)
 12473  1542  1F8B               	btfss	11,7	;volatile
 12474  1543  2D4A               	goto	l6029
 12475                           
 12476                           ;mcc_generated_files/mtouch/mtouch_button.c: 451:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 452:         GIE = (uint8_t) 0;
 12477  1544  138B               	bcf	11,7	;volatile
 12478                           
 12479                           ;mcc_generated_files/mtouch/mtouch_button.c: 453:         Button_Reading_Update_Helper(b
      +                          utton);
 12480  1545  0820               	movf	Button_Reading_Update@button,w
 12481  1546  318B  2305         	fcall	_Button_Reading_Update_Helper
 12482                           
 12483                           ;mcc_generated_files/mtouch/mtouch_button.c: 454:         GIE = (uint8_t) 1;
 12484  1548  178B               	bsf	11,7	;volatile
 12485                           
 12486                           ;mcc_generated_files/mtouch/mtouch_button.c: 455:     }
 12487  1549  0008               	return
 12488  154A                     l6029:	
 12489                           
 12490                           ;mcc_generated_files/mtouch/mtouch_button.c: 457:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 458:         Button_Reading_Update_Helper(button);
 12491  154A  0820               	movf	Button_Reading_Update@button,w
 12492  154B  318B  2305         	fcall	_Button_Reading_Update_Helper
 12493  154D  0008               	return
 12494  154E                     __end_of_Button_Reading_Update:	
 12495                           
 12496                           	psect	text79
 12497  0B05                     __ptext79:	
 12498 ;; *************** function _Button_Reading_Update_Helper *****************
 12499 ;; Defined at:
 12500 ;;		line 462 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12501 ;; Parameters:    Size  Location     Type
 12502 ;;  button          1    wreg     PTR struct .
 12503 ;;		 -> mtouch_button(48), 
 12504 ;; Auto vars:     Size  Location     Type
 12505 ;;  button          1   11[COMMON] PTR struct .
 12506 ;;		 -> mtouch_button(48), 
 12507 ;; Return value:  Size  Location     Type
 12508 ;;                  1    wreg      void 
 12509 ;; Registers used:
 12510 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12511 ;; Tracked objects:
 12512 ;;		On entry : 0/0
 12513 ;;		On exit  : 0/0
 12514 ;;		Unchanged: 0/0
 12515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12516 ;;      Params:         0       0       0       0       0       0       0       0
 12517 ;;      Locals:         1       0       0       0       0       0       0       0
 12518 ;;      Temps:          2       0       0       0       0       0       0       0
 12519 ;;      Totals:         3       0       0       0       0       0       0       0
 12520 ;;Total ram usage:        3 bytes
 12521 ;; Hardware stack levels used:    1
 12522 ;; Hardware stack levels required when called:    6
 12523 ;; This function calls:
 12524 ;;		_MTOUCH_Sensor_RawSample_Get
 12525 ;; This function is called by:
 12526 ;;		_Button_Reading_Update
 12527 ;; This function uses a non-reentrant model
 12528 ;;
 12529                           
 12530                           
 12531                           ;psect for function _Button_Reading_Update_Helper
 12532  0B05                     _Button_Reading_Update_Helper:	
 12533                           
 12534                           ;incstack = 0
 12535                           ; Regs used in _Button_Reading_Update_Helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12536                           ;Button_Reading_Update_Helper@button stored from wreg
 12537  0B05  00FB               	movwf	Button_Reading_Update_Helper@button
 12538                           
 12539                           ;mcc_generated_files/mtouch/mtouch_button.c: 462: static void Button_Reading_Update_Help
      +                          er(mtouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 463: {;mcc_gener
      +                          ated_files/mtouch/mtouch_button.c: 464:     if (button->state != MTOUCH_BUTTON_STATE_ini
      +                          tializing)
 12540  0B06  087B               	movf	Button_Reading_Update_Helper@button,w
 12541  0B07  3E02               	addlw	2
 12542  0B08  0086               	movwf	6
 12543  0B09  3001               	movlw	1	; select bank2/3
 12544  0B0A  0087               	movwf	7
 12545  0B0B  0801               	movf	1,w
 12546  0B0C  1903               	btfsc	3,2
 12547  0B0D  2B41               	goto	l5931
 12548                           
 12549                           ;mcc_generated_files/mtouch/mtouch_button.c: 465:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 466:         button->reading -= button->reading>>((uint8_t)2u);
 12550  0B0E  087B               	movf	Button_Reading_Update_Helper@button,w
 12551  0B0F  3E03               	addlw	3
 12552  0B10  0086               	movwf	6
 12553  0B11  3001               	movlw	1	; select bank2/3
 12554  0B12  0087               	movwf	7
 12555  0B13  3F40               	moviw [0]fsr1
 12556  0B14  00F9               	movwf	??_Button_Reading_Update_Helper
 12557  0B15  3F41               	moviw [1]fsr1
 12558  0B16  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12559  0B17  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12560  0B18  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12561  0B19  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12562  0B1A  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12563  0B1B  087B               	movf	Button_Reading_Update_Helper@button,w
 12564  0B1C  3E03               	addlw	3
 12565  0B1D  0086               	movwf	6
 12566  0B1E  3001               	movlw	1	; select bank2/3
 12567  0B1F  0087               	movwf	7
 12568  0B20  0879               	movf	??_Button_Reading_Update_Helper,w
 12569  0B21  0281               	subwf	1,f
 12570  0B22  3141               	addfsr 1,1
 12571  0B23  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12572  0B24  3B81               	subwfb	1,f
 12573  0B25  317F               	addfsr 1,-1
 12574                           
 12575                           ;mcc_generated_files/mtouch/mtouch_button.c: 467:         button->reading += MTOUCH_Sens
      +                          or_RawSample_Get(button->sensor) >> ((uint8_t)2u);
 12576  0B26  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12577  0B27  0086               	movwf	6
 12578  0B28  3001               	movlw	1	; select bank2/3
 12579  0B29  0087               	movwf	7
 12580  0B2A  0801               	movf	1,w
 12581  0B2B  3196  26B7         	fcall	_MTOUCH_Sensor_RawSample_Get
 12582  0B2D  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12583  0B2E  00F9               	movwf	??_Button_Reading_Update_Helper
 12584  0B2F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12585  0B30  00FA               	movwf	??_Button_Reading_Update_Helper+1
 12586  0B31  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12587  0B32  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12588  0B33  36FA               	lsrf	??_Button_Reading_Update_Helper+1,f
 12589  0B34  0CF9               	rrf	??_Button_Reading_Update_Helper,f
 12590  0B35  087B               	movf	Button_Reading_Update_Helper@button,w
 12591  0B36  3E03               	addlw	3
 12592  0B37  0086               	movwf	6
 12593  0B38  3001               	movlw	1	; select bank2/3
 12594  0B39  0087               	movwf	7
 12595  0B3A  0879               	movf	??_Button_Reading_Update_Helper,w
 12596  0B3B  0781               	addwf	1,f
 12597  0B3C  3141               	addfsr 1,1
 12598  0B3D  087A               	movf	??_Button_Reading_Update_Helper+1,w
 12599  0B3E  3D81               	addwfc	1,f
 12600  0B3F  317F               	addfsr 1,-1
 12601                           
 12602                           ;mcc_generated_files/mtouch/mtouch_button.c: 468:     }
 12603  0B40  0008               	return
 12604  0B41                     l5931:	
 12605                           
 12606                           ;mcc_generated_files/mtouch/mtouch_button.c: 470:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 471:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
 12607  0B41  0A7B               	incf	Button_Reading_Update_Helper@button,w
 12608  0B42  0086               	movwf	6
 12609  0B43  3001               	movlw	1	; select bank2/3
 12610  0B44  0087               	movwf	7
 12611  0B45  0801               	movf	1,w
 12612  0B46  3196  26B7         	fcall	_MTOUCH_Sensor_RawSample_Get
 12613  0B48  087B               	movf	Button_Reading_Update_Helper@button,w
 12614  0B49  3E03               	addlw	3
 12615  0B4A  0086               	movwf	6
 12616  0B4B  3001               	movlw	1	; select bank2/3
 12617  0B4C  0087               	movwf	7
 12618  0B4D  0875               	movf	?_MTOUCH_Sensor_RawSample_Get,w
 12619  0B4E  3FC0               	movwi [0]fsr1
 12620  0B4F  0876               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
 12621  0B50  3FC1               	movwi [1]fsr1
 12622  0B51  0008               	return
 12623  0B52                     __end_of_Button_Reading_Update_Helper:	
 12624                           
 12625                           	psect	text80
 12626  16B7                     __ptext80:	
 12627 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
 12628 ;; Defined at:
 12629 ;;		line 792 in file "mcc_generated_files/mtouch/mtouch_sensor.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;  name            1    wreg     enum E2854
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  name            1    8[COMMON] enum E2854
 12634 ;; Return value:  Size  Location     Type
 12635 ;;                  2    5[COMMON] unsigned short 
 12636 ;; Registers used:
 12637 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12643 ;;      Params:         2       0       0       0       0       0       0       0
 12644 ;;      Locals:         1       0       0       0       0       0       0       0
 12645 ;;      Temps:          1       0       0       0       0       0       0       0
 12646 ;;      Totals:         4       0       0       0       0       0       0       0
 12647 ;;Total ram usage:        4 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; Hardware stack levels required when called:    5
 12650 ;; This function calls:
 12651 ;;		___bmul
 12652 ;; This function is called by:
 12653 ;;		_Button_Reading_Update_Helper
 12654 ;;		_Button_Baseline_Initialize
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           
 12659                           ;psect for function _MTOUCH_Sensor_RawSample_Get
 12660  16B7                     _MTOUCH_Sensor_RawSample_Get:	
 12661                           
 12662                           ;incstack = 0
 12663                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12664                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
 12665  16B7  00F8               	movwf	MTOUCH_Sensor_RawSample_Get@name
 12666                           
 12667                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 792: mtouch_sensor_sample_t MTOUCH_Sensor_R
      +                          awSample_Get(enum mtouch_sensor_names name);mcc_generated_files/mtouch/mtouch_sensor.c: 
      +                          793: {;mcc_generated_files/mtouch/mtouch_sensor.c: 794:     if (name < 3u)
 12668  16B8  3003               	movlw	3
 12669  16B9  0278               	subwf	MTOUCH_Sensor_RawSample_Get@name,w
 12670  16BA  1803               	skipnc
 12671  16BB  2ECC               	goto	l5837
 12672                           
 12673                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 795:     {;mcc_generated_files/mtouch/mtouc
      +                          h_sensor.c: 796:         return mtouch_sensor[name].rawSample;
 12674  16BC  3009               	movlw	9
 12675  16BD  00F7               	movwf	??_MTOUCH_Sensor_RawSample_Get
 12676  16BE  0877               	movf	??_MTOUCH_Sensor_RawSample_Get,w
 12677  16BF  00F1               	movwf	___bmul@multiplicand
 12678  16C0  0878               	movf	MTOUCH_Sensor_RawSample_Get@name,w
 12679  16C1  3195  25B6         	fcall	___bmul
 12680  16C3  3E56               	addlw	(low ((_mtouch_sensor| (0+256)+6)))& (0+255)
 12681  16C4  0086               	movwf	6
 12682  16C5  3001               	movlw	1	; select bank2/3
 12683  16C6  0087               	movwf	7
 12684  16C7  3F40               	moviw [0]fsr1
 12685  16C8  00F5               	movwf	?_MTOUCH_Sensor_RawSample_Get
 12686  16C9  3F41               	moviw [1]fsr1
 12687  16CA  00F6               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
 12688  16CB  0008               	return
 12689  16CC                     l5837:	
 12690                           
 12691                           ;mcc_generated_files/mtouch/mtouch_sensor.c: 799:         return (mtouch_sensor_sample_t
      +                          )0;
 12692  16CC  01F5               	clrf	?_MTOUCH_Sensor_RawSample_Get
 12693  16CD  01F6               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
 12694  16CE  0008               	return
 12695  16CF                     __end_of_MTOUCH_Sensor_RawSample_Get:	
 12696                           
 12697                           	psect	text81
 12698  15B6                     __ptext81:	
 12699 ;; *************** function ___bmul *****************
 12700 ;; Defined at:
 12701 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul8.c"
 12702 ;; Parameters:    Size  Location     Type
 12703 ;;  multiplier      1    wreg     unsigned char 
 12704 ;;  multiplicand    1    1[COMMON] unsigned char 
 12705 ;; Auto vars:     Size  Location     Type
 12706 ;;  multiplier      1    4[COMMON] unsigned char 
 12707 ;;  product         1    3[COMMON] unsigned char 
 12708 ;; Return value:  Size  Location     Type
 12709 ;;                  1    wreg      unsigned char 
 12710 ;; Registers used:
 12711 ;;		wreg, status,2, status,0
 12712 ;; Tracked objects:
 12713 ;;		On entry : 0/0
 12714 ;;		On exit  : 0/0
 12715 ;;		Unchanged: 0/0
 12716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12717 ;;      Params:         1       0       0       0       0       0       0       0
 12718 ;;      Locals:         2       0       0       0       0       0       0       0
 12719 ;;      Temps:          1       0       0       0       0       0       0       0
 12720 ;;      Totals:         4       0       0       0       0       0       0       0
 12721 ;;Total ram usage:        4 bytes
 12722 ;; Hardware stack levels used:    1
 12723 ;; Hardware stack levels required when called:    4
 12724 ;; This function calls:
 12725 ;;		Nothing
 12726 ;; This function is called by:
 12727 ;;		_MTOUCH_Sensor_Initialize
 12728 ;;		_MTOUCH_Sensor_RawSample_Get
 12729 ;;		_MTOUCH_Sensor_Enable
 12730 ;;		_MTOUCH_Sensor_Calibrate
 12731 ;;		_MTOUCH_Sensor_isCalibrated
 12732 ;;		_MTOUCH_Sensor_wasSampled
 12733 ;;		_MTOUCH_Sensor_isAnySensorActive
 12734 ;;		_MTOUCH_Sensor_Disable
 12735 ;;		_MTOUCH_Sensor_isEnabled
 12736 ;;		_MTOUCH_Sensor_isActive
 12737 ;;		_MTOUCH_Sensor_AdditionalCap_Get
 12738 ;;		_MTOUCH_Sensor_AcquisitionTime_Get
 12739 ;;		_MTOUCH_Sensor_PreChargeTime_Get
 12740 ;;		_MTOUCH_Sensor_Oversampling_Get
 12741 ;;		_MTOUCH_Sensor_Oversampling_Set
 12742 ;; This function uses a non-reentrant model
 12743 ;;
 12744                           
 12745                           
 12746                           ;psect for function ___bmul
 12747  15B6                     ___bmul:	
 12748                           
 12749                           ;incstack = 0
 12750                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12751                           ;___bmul@multiplier stored from wreg
 12752  15B6  00F4               	movwf	___bmul@multiplier
 12753  15B7  01F3               	clrf	___bmul@product
 12754  15B8                     l5611:	
 12755  15B8  1C74               	btfss	___bmul@multiplier,0
 12756  15B9  2DBE               	goto	l5615
 12757  15BA  0871               	movf	___bmul@multiplicand,w
 12758  15BB  00F2               	movwf	??___bmul
 12759  15BC  0872               	movf	??___bmul,w
 12760  15BD  07F3               	addwf	___bmul@product,f
 12761  15BE                     l5615:	
 12762  15BE  1003               	clrc
 12763  15BF  0DF1               	rlf	___bmul@multiplicand,f
 12764  15C0  1003               	clrc
 12765  15C1  0CF4               	rrf	___bmul@multiplier,f
 12766  15C2  0874               	movf	___bmul@multiplier,w
 12767  15C3  1D03               	btfss	3,2
 12768  15C4  2DB8               	goto	l5611
 12769  15C5  0873               	movf	___bmul@product,w
 12770  15C6  0008               	return
 12771  15C7                     __end_of___bmul:	
 12772                           
 12773                           	psect	text82
 12774  0E58                     __ptext82:	
 12775 ;; *************** function _Button_Deviation_Update *****************
 12776 ;; Defined at:
 12777 ;;		line 399 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12778 ;; Parameters:    Size  Location     Type
 12779 ;;  button          1    wreg     PTR struct .
 12780 ;;		 -> mtouch_button(48), 
 12781 ;; Auto vars:     Size  Location     Type
 12782 ;;  button          1    0[BANK0 ] PTR struct .
 12783 ;;		 -> mtouch_button(48), 
 12784 ;;  deviation       4    1[BANK0 ] long 
 12785 ;; Return value:  Size  Location     Type
 12786 ;;                  1    wreg      void 
 12787 ;; Registers used:
 12788 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12789 ;; Tracked objects:
 12790 ;;		On entry : 0/0
 12791 ;;		On exit  : 0/0
 12792 ;;		Unchanged: 0/0
 12793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12794 ;;      Params:         0       0       0       0       0       0       0       0
 12795 ;;      Locals:         0       5       0       0       0       0       0       0
 12796 ;;      Temps:         10       0       0       0       0       0       0       0
 12797 ;;      Totals:        10       5       0       0       0       0       0       0
 12798 ;;Total ram usage:       15 bytes
 12799 ;; Hardware stack levels used:    1
 12800 ;; Hardware stack levels required when called:    4
 12801 ;; This function calls:
 12802 ;;		Nothing
 12803 ;; This function is called by:
 12804 ;;		_Button_Service
 12805 ;; This function uses a non-reentrant model
 12806 ;;
 12807                           
 12808                           
 12809                           ;psect for function _Button_Deviation_Update
 12810  0E58                     _Button_Deviation_Update:	
 12811                           
 12812                           ;incstack = 0
 12813                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
 12814                           ;Button_Deviation_Update@button stored from wreg
 12815  0E58  0020               	movlb	0	; select bank0
 12816  0E59  00A0               	movwf	Button_Deviation_Update@button
 12817                           
 12818                           ;mcc_generated_files/mtouch/mtouch_button.c: 399: static void Button_Deviation_Update(mt
      +                          ouch_button_t* button);mcc_generated_files/mtouch/mtouch_button.c: 400: {;mcc_generated_
      +                          files/mtouch/mtouch_button.c: 401:     int32_t deviation;;mcc_generated_files/mtouch/mto
      +                          uch_button.c: 403:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((but
      +                          ton->baseline)>>((uint8_t)4u)));
 12819  0E5A  0820               	movf	Button_Deviation_Update@button,w
 12820  0E5B  3E05               	addlw	5
 12821  0E5C  0086               	movwf	6
 12822  0E5D  3001               	movlw	1	; select bank2/3
 12823  0E5E  0087               	movwf	7
 12824  0E5F  3F40               	moviw [0]fsr1
 12825  0E60  00F1               	movwf	??_Button_Deviation_Update
 12826  0E61  3F41               	moviw [1]fsr1
 12827  0E62  00F2               	movwf	??_Button_Deviation_Update+1
 12828  0E63  3F42               	moviw [2]fsr1
 12829  0E64  00F3               	movwf	??_Button_Deviation_Update+2
 12830  0E65  3F43               	moviw [3]fsr1
 12831  0E66  00F4               	movwf	??_Button_Deviation_Update+3
 12832  0E67  3004               	movlw	4
 12833  0E68                     u3235:	
 12834  0E68  36F4               	lsrf	??_Button_Deviation_Update+3,f
 12835  0E69  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12836  0E6A  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12837  0E6B  0CF1               	rrf	??_Button_Deviation_Update,f
 12838  0E6C  0B89               	decfsz	9,f
 12839  0E6D  2E68               	goto	u3235
 12840  0E6E  0820               	movf	Button_Deviation_Update@button,w
 12841  0E6F  3E03               	addlw	3
 12842  0E70  0086               	movwf	6
 12843  0E71  3001               	movlw	1	; select bank2/3
 12844  0E72  0087               	movwf	7
 12845  0E73  3F40               	moviw [0]fsr1
 12846  0E74  00F5               	movwf	??_Button_Deviation_Update+4
 12847  0E75  3F41               	moviw [1]fsr1
 12848  0E76  00F6               	movwf	??_Button_Deviation_Update+5
 12849  0E77  0875               	movf	??_Button_Deviation_Update+4,w
 12850  0E78  00F7               	movwf	??_Button_Deviation_Update+6
 12851  0E79  0876               	movf	??_Button_Deviation_Update+5,w
 12852  0E7A  00F8               	movwf	??_Button_Deviation_Update+7
 12853  0E7B  01F9               	clrf	??_Button_Deviation_Update+8
 12854  0E7C  01FA               	clrf	??_Button_Deviation_Update+9
 12855  0E7D  0871               	movf	??_Button_Deviation_Update,w
 12856  0E7E  02F7               	subwf	??_Button_Deviation_Update+6,f
 12857  0E7F  0872               	movf	??_Button_Deviation_Update+1,w
 12858  0E80  3BF8               	subwfb	??_Button_Deviation_Update+7,f
 12859  0E81  0873               	movf	??_Button_Deviation_Update+2,w
 12860  0E82  3BF9               	subwfb	??_Button_Deviation_Update+8,f
 12861  0E83  0874               	movf	??_Button_Deviation_Update+3,w
 12862  0E84  3BFA               	subwfb	??_Button_Deviation_Update+9,f
 12863  0E85  087A               	movf	??_Button_Deviation_Update+9,w
 12864  0E86  00A4               	movwf	Button_Deviation_Update@deviation+3
 12865  0E87  0879               	movf	??_Button_Deviation_Update+8,w
 12866  0E88  00A3               	movwf	Button_Deviation_Update@deviation+2
 12867  0E89  0878               	movf	??_Button_Deviation_Update+7,w
 12868  0E8A  00A2               	movwf	Button_Deviation_Update@deviation+1
 12869  0E8B  0877               	movf	??_Button_Deviation_Update+6,w
 12870  0E8C  00A1               	movwf	Button_Deviation_Update@deviation
 12871                           
 12872                           ;mcc_generated_files/mtouch/mtouch_button.c: 406:     deviation = deviation >> (button->
      +                          scaling);
 12873  0E8D  0821               	movf	Button_Deviation_Update@deviation,w
 12874  0E8E  00F1               	movwf	??_Button_Deviation_Update
 12875  0E8F  0822               	movf	Button_Deviation_Update@deviation+1,w
 12876  0E90  00F2               	movwf	??_Button_Deviation_Update+1
 12877  0E91  0823               	movf	Button_Deviation_Update@deviation+2,w
 12878  0E92  00F3               	movwf	??_Button_Deviation_Update+2
 12879  0E93  0824               	movf	Button_Deviation_Update@deviation+3,w
 12880  0E94  00F4               	movwf	??_Button_Deviation_Update+3
 12881  0E95  0820               	movf	Button_Deviation_Update@button,w
 12882  0E96  3E0F               	addlw	15
 12883  0E97  0086               	movwf	6
 12884  0E98  3001               	movlw	1	; select bank2/3
 12885  0E99  0087               	movwf	7
 12886  0E9A  0A01               	incf	1,w
 12887  0E9B  2EA0               	goto	u3240
 12888  0E9C                     u3245:	
 12889  0E9C  37F4               	asrf	??_Button_Deviation_Update+3,f
 12890  0E9D  0CF3               	rrf	??_Button_Deviation_Update+2,f
 12891  0E9E  0CF2               	rrf	??_Button_Deviation_Update+1,f
 12892  0E9F  0CF1               	rrf	??_Button_Deviation_Update,f
 12893  0EA0                     u3240:	
 12894  0EA0  0B89               	decfsz	9,f
 12895  0EA1  2E9C               	goto	u3245
 12896  0EA2  0874               	movf	??_Button_Deviation_Update+3,w
 12897  0EA3  00A4               	movwf	Button_Deviation_Update@deviation+3
 12898  0EA4  0873               	movf	??_Button_Deviation_Update+2,w
 12899  0EA5  00A3               	movwf	Button_Deviation_Update@deviation+2
 12900  0EA6  0872               	movf	??_Button_Deviation_Update+1,w
 12901  0EA7  00A2               	movwf	Button_Deviation_Update@deviation+1
 12902  0EA8  0871               	movf	??_Button_Deviation_Update,w
 12903  0EA9  00A1               	movwf	Button_Deviation_Update@deviation
 12904                           
 12905                           ;mcc_generated_files/mtouch/mtouch_button.c: 409:     if (deviation > ((0x7f)))
 12906  0EAA  1BA4               	btfsc	Button_Deviation_Update@deviation+3,7
 12907  0EAB  2EC1               	goto	l4473
 12908  0EAC  0824               	movf	Button_Deviation_Update@deviation+3,w
 12909  0EAD  1D03               	btfss	3,2
 12910  0EAE  2EB9               	goto	l4471
 12911  0EAF  0823               	movf	Button_Deviation_Update@deviation+2,w
 12912  0EB0  1D03               	btfss	3,2
 12913  0EB1  2EB9               	goto	l4471
 12914  0EB2  0822               	movf	Button_Deviation_Update@deviation+1,w
 12915  0EB3  1D03               	btfss	3,2
 12916  0EB4  2EB9               	goto	l4471
 12917  0EB5  3080               	movlw	128
 12918  0EB6  0221               	subwf	Button_Deviation_Update@deviation,w
 12919  0EB7  1C03               	btfss	3,0
 12920  0EB8  2EC1               	goto	l4473
 12921  0EB9                     l4471:	
 12922                           
 12923                           ;mcc_generated_files/mtouch/mtouch_button.c: 410:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 411:         deviation = ((0x7f));
 12924  0EB9  3000               	movlw	0
 12925  0EBA  00A4               	movwf	Button_Deviation_Update@deviation+3
 12926  0EBB  3000               	movlw	0
 12927  0EBC  00A3               	movwf	Button_Deviation_Update@deviation+2
 12928  0EBD  3000               	movlw	0
 12929  0EBE  00A2               	movwf	Button_Deviation_Update@deviation+1
 12930  0EBF  307F               	movlw	127
 12931  0EC0  00A1               	movwf	Button_Deviation_Update@deviation
 12932  0EC1                     l4473:	
 12933                           
 12934                           ;mcc_generated_files/mtouch/mtouch_button.c: 413:     if (deviation < ((-1-0x7f)))
 12935  0EC1  1FA4               	btfss	Button_Deviation_Update@deviation+3,7
 12936  0EC2  2ED5               	goto	l4477
 12937  0EC3  3080               	movlw	128
 12938  0EC4  0221               	subwf	Button_Deviation_Update@deviation,w
 12939  0EC5  30FF               	movlw	255
 12940  0EC6  3B22               	subwfb	Button_Deviation_Update@deviation+1,w
 12941  0EC7  30FF               	movlw	255
 12942  0EC8  3B23               	subwfb	Button_Deviation_Update@deviation+2,w
 12943  0EC9  30FF               	movlw	255
 12944  0ECA  3B24               	subwfb	Button_Deviation_Update@deviation+3,w
 12945  0ECB  1803               	btfsc	3,0
 12946  0ECC  2ED5               	goto	l4477
 12947                           
 12948                           ;mcc_generated_files/mtouch/mtouch_button.c: 414:     {;mcc_generated_files/mtouch/mtouc
      +                          h_button.c: 415:         deviation = ((-1-0x7f));
 12949  0ECD  30FF               	movlw	255
 12950  0ECE  00A4               	movwf	Button_Deviation_Update@deviation+3
 12951  0ECF  30FF               	movlw	255
 12952  0ED0  00A3               	movwf	Button_Deviation_Update@deviation+2
 12953  0ED1  30FF               	movlw	255
 12954  0ED2  00A2               	movwf	Button_Deviation_Update@deviation+1
 12955  0ED3  3080               	movlw	128
 12956  0ED4  00A1               	movwf	Button_Deviation_Update@deviation
 12957  0ED5                     l4477:	
 12958                           
 12959                           ;mcc_generated_files/mtouch/mtouch_button.c: 418:     button->deviation = (mtouch_button
      +                          _deviation_t)deviation;
 12960  0ED5  0821               	movf	Button_Deviation_Update@deviation,w
 12961  0ED6  00F1               	movwf	??_Button_Deviation_Update
 12962  0ED7  0820               	movf	Button_Deviation_Update@button,w
 12963  0ED8  3E09               	addlw	9
 12964  0ED9  0086               	movwf	6
 12965  0EDA  3001               	movlw	1	; select bank2/3
 12966  0EDB  0087               	movwf	7
 12967  0EDC  0871               	movf	??_Button_Deviation_Update,w
 12968  0EDD  0081               	movwf	1
 12969  0EDE  0008               	return
 12970  0EDF                     __end_of_Button_Deviation_Update:	
 12971                           
 12972                           	psect	text83
 12973  14B9                     __ptext83:	
 12974 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
 12975 ;; Defined at:
 12976 ;;		line 528 in file "mcc_generated_files/mtouch/mtouch_button.c"
 12977 ;; Parameters:    Size  Location     Type
 12978 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 12979 ;;		 -> myButtonPressedCallback(1), 
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;		None
 12982 ;; Return value:  Size  Location     Type
 12983 ;;                  1    wreg      void 
 12984 ;; Registers used:
 12985 ;;		wreg
 12986 ;; Tracked objects:
 12987 ;;		On entry : 0/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12991 ;;      Params:         2       0       0       0       0       0       0       0
 12992 ;;      Locals:         0       0       0       0       0       0       0       0
 12993 ;;      Temps:          0       0       0       0       0       0       0       0
 12994 ;;      Totals:         2       0       0       0       0       0       0       0
 12995 ;;Total ram usage:        2 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; Hardware stack levels required when called:    4
 12998 ;; This function calls:
 12999 ;;		Nothing
 13000 ;; This function is called by:
 13001 ;;		_main
 13002 ;; This function uses a non-reentrant model
 13003 ;;
 13004                           
 13005                           
 13006                           ;psect for function _MTOUCH_Button_SetPressedCallback
 13007  14B9                     _MTOUCH_Button_SetPressedCallback:	
 13008                           
 13009                           ;mcc_generated_files/mtouch/mtouch_button.c: 528: void MTOUCH_Button_SetPressedCallback(
      +                          void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.c: 
      +                          529: {;mcc_generated_files/mtouch/mtouch_button.c: 530:     callback_pressed = callback;
 13010                           
 13011                           ;incstack = 0
 13012                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
 13013  14B9  0872               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
 13014  14BA  0021               	movlb	1	; select bank1
 13015  14BB  00D6               	movwf	(_callback_pressed+1)^(0+128)
 13016  14BC  0871               	movf	MTOUCH_Button_SetPressedCallback@callback,w
 13017  14BD  00D5               	movwf	_callback_pressed^(0+128)
 13018  14BE  0008               	return
 13019  14BF                     __end_of_MTOUCH_Button_SetPressedCallback:	
 13020                           
 13021                           	psect	text84
 13022  14B3                     __ptext84:	
 13023 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
 13024 ;; Defined at:
 13025 ;;		line 532 in file "mcc_generated_files/mtouch/mtouch_button.c"
 13026 ;; Parameters:    Size  Location     Type
 13027 ;;  callback        2    1[COMMON] PTR FTN(enum E3069,)void
 13028 ;;		 -> myButtonReleasedCallback(1), 
 13029 ;; Auto vars:     Size  Location     Type
 13030 ;;		None
 13031 ;; Return value:  Size  Location     Type
 13032 ;;                  1    wreg      void 
 13033 ;; Registers used:
 13034 ;;		wreg
 13035 ;; Tracked objects:
 13036 ;;		On entry : 0/0
 13037 ;;		On exit  : 0/0
 13038 ;;		Unchanged: 0/0
 13039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13040 ;;      Params:         2       0       0       0       0       0       0       0
 13041 ;;      Locals:         0       0       0       0       0       0       0       0
 13042 ;;      Temps:          0       0       0       0       0       0       0       0
 13043 ;;      Totals:         2       0       0       0       0       0       0       0
 13044 ;;Total ram usage:        2 bytes
 13045 ;; Hardware stack levels used:    1
 13046 ;; Hardware stack levels required when called:    4
 13047 ;; This function calls:
 13048 ;;		Nothing
 13049 ;; This function is called by:
 13050 ;;		_main
 13051 ;; This function uses a non-reentrant model
 13052 ;;
 13053                           
 13054                           
 13055                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
 13056  14B3                     _MTOUCH_Button_SetNotPressedCallback:	
 13057                           
 13058                           ;mcc_generated_files/mtouch/mtouch_button.c: 532: void MTOUCH_Button_SetNotPressedCallba
      +                          ck(void (*callback)(enum mtouch_button_names));mcc_generated_files/mtouch/mtouch_button.
      +                          c: 533: {;mcc_generated_files/mtouch/mtouch_button.c: 534:     callback_notPressed = cal
      +                          lback;
 13059                           
 13060                           ;incstack = 0
 13061                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
 13062  14B3  0872               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
 13063  14B4  0020               	movlb	0	; select bank0
 13064  14B5  00ED               	movwf	_callback_notPressed+1
 13065  14B6  0871               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
 13066  14B7  00EC               	movwf	_callback_notPressed
 13067  14B8  0008               	return
 13068  14B9                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
 13069                           
 13070                           	psect	text85
 13071  147A                     __ptext85:	
 13072 ;; *************** function _EUSART_is_rx_ready *****************
 13073 ;; Defined at:
 13074 ;;		line 134 in file "mcc_generated_files/eusart.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;		None
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;		None
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  1    wreg      unsigned char 
 13081 ;; Registers used:
 13082 ;;		wreg
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13088 ;;      Params:         0       0       0       0       0       0       0       0
 13089 ;;      Locals:         0       0       0       0       0       0       0       0
 13090 ;;      Temps:          0       0       0       0       0       0       0       0
 13091 ;;      Totals:         0       0       0       0       0       0       0       0
 13092 ;;Total ram usage:        0 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    4
 13095 ;; This function calls:
 13096 ;;		Nothing
 13097 ;; This function is called by:
 13098 ;;		_main
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102                           
 13103                           ;psect for function _EUSART_is_rx_ready
 13104  147A                     _EUSART_is_rx_ready:	
 13105                           
 13106                           ;mcc_generated_files/eusart.c: 136:     return eusartRxCount;
 13107                           
 13108                           ;incstack = 0
 13109                           ; Regs used in _EUSART_is_rx_ready: [wreg]
 13110  147A  0020               	movlb	0	; select bank0
 13111  147B  0865               	movf	_eusartRxCount,w	;volatile
 13112  147C  0008               	return
 13113  147D                     __end_of_EUSART_is_rx_ready:	
 13114                           
 13115                           	psect	text86
 13116  17B5                     __ptext86:	
 13117 ;; *************** function _EUSART_Read *****************
 13118 ;; Defined at:
 13119 ;;		line 148 in file "mcc_generated_files/eusart.c"
 13120 ;; Parameters:    Size  Location     Type
 13121 ;;		None
 13122 ;; Auto vars:     Size  Location     Type
 13123 ;;  readValue       1    2[COMMON] unsigned char 
 13124 ;; Return value:  Size  Location     Type
 13125 ;;                  1    wreg      unsigned char 
 13126 ;; Registers used:
 13127 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13128 ;; Tracked objects:
 13129 ;;		On entry : 0/0
 13130 ;;		On exit  : 0/0
 13131 ;;		Unchanged: 0/0
 13132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13133 ;;      Params:         0       0       0       0       0       0       0       0
 13134 ;;      Locals:         1       0       0       0       0       0       0       0
 13135 ;;      Temps:          1       0       0       0       0       0       0       0
 13136 ;;      Totals:         2       0       0       0       0       0       0       0
 13137 ;;Total ram usage:        2 bytes
 13138 ;; Hardware stack levels used:    1
 13139 ;; Hardware stack levels required when called:    4
 13140 ;; This function calls:
 13141 ;;		Nothing
 13142 ;; This function is called by:
 13143 ;;		_main
 13144 ;;		_getch
 13145 ;; This function uses a non-reentrant model
 13146 ;;
 13147                           
 13148                           
 13149                           ;psect for function _EUSART_Read
 13150  17B5                     _EUSART_Read:	
 13151  17B5                     l4871:	
 13152                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 13153                           
 13154                           ;incstack = 0
 13155                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 13156                           
 13157                           
 13158                           ;mcc_generated_files/eusart.c: 152:     while(0 == eusartRxCount)
 13159  17B5  0020               	movlb	0	; select bank0
 13160  17B6  0865               	movf	_eusartRxCount,w	;volatile
 13161  17B7  1903               	btfsc	3,2
 13162  17B8  2FB5               	goto	l4871
 13163                           
 13164                           ;mcc_generated_files/eusart.c: 156:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
 13165  17B9  0866               	movf	_eusartRxTail,w	;volatile
 13166  17BA  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 13167  17BB  0086               	movwf	6
 13168  17BC  0187               	clrf	7
 13169  17BD  0801               	movf	1,w
 13170  17BE  00F1               	movwf	??_EUSART_Read
 13171  17BF  0871               	movf	??_EUSART_Read,w
 13172  17C0  00E4               	movwf	_eusartRxLastError	;volatile
 13173                           
 13174                           ;mcc_generated_files/eusart.c: 158:     readValue = eusartRxBuffer[eusartRxTail++];
 13175  17C1  0866               	movf	_eusartRxTail,w
 13176  17C2  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 13177  17C3  0086               	movwf	6
 13178  17C4  0187               	clrf	7
 13179  17C5  0801               	movf	1,w
 13180  17C6  00F1               	movwf	??_EUSART_Read
 13181  17C7  0871               	movf	??_EUSART_Read,w
 13182  17C8  00F2               	movwf	EUSART_Read@readValue
 13183  17C9  3001               	movlw	1
 13184  17CA  00F1               	movwf	??_EUSART_Read
 13185  17CB  0871               	movf	??_EUSART_Read,w
 13186  17CC  07E6               	addwf	_eusartRxTail,f	;volatile
 13187                           
 13188                           ;mcc_generated_files/eusart.c: 159:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
 13189  17CD  3008               	movlw	8
 13190  17CE  0266               	subwf	_eusartRxTail,w	;volatile
 13191  17CF  1803               	btfsc	3,0
 13192                           
 13193                           ;mcc_generated_files/eusart.c: 160:     {;mcc_generated_files/eusart.c: 161:         eus
      +                          artRxTail = 0;
 13194  17D0  01E6               	clrf	_eusartRxTail	;volatile
 13195                           
 13196                           ;mcc_generated_files/eusart.c: 163:     PIE1bits.RCIE = 0;
 13197  17D1  0021               	movlb	1	; select bank1
 13198  17D2  1291               	bcf	17,5	;volatile
 13199                           
 13200                           ;mcc_generated_files/eusart.c: 164:     eusartRxCount--;
 13201  17D3  3001               	movlw	1
 13202  17D4  0020               	movlb	0	; select bank0
 13203  17D5  02E5               	subwf	_eusartRxCount,f	;volatile
 13204                           
 13205                           ;mcc_generated_files/eusart.c: 165:     PIE1bits.RCIE = 1;
 13206  17D6  0021               	movlb	1	; select bank1
 13207  17D7  1691               	bsf	17,5	;volatile
 13208                           
 13209                           ;mcc_generated_files/eusart.c: 167:     return readValue;
 13210  17D8  0872               	movf	EUSART_Read@readValue,w
 13211  17D9  0008               	return
 13212  17DA                     __end_of_EUSART_Read:	
 13213                           
 13214                           	psect	text87
 13215  05F7                     __ptext87:	
 13216 ;; *************** function _DATA_PROCESS *****************
 13217 ;; Defined at:
 13218 ;;		line 222 in file "main.c"
 13219 ;; Parameters:    Size  Location     Type
 13220 ;;  x               1    wreg     unsigned char 
 13221 ;; Auto vars:     Size  Location     Type
 13222 ;;  x               1    6[COMMON] unsigned char 
 13223 ;; Return value:  Size  Location     Type
 13224 ;;                  1    wreg      void 
 13225 ;; Registers used:
 13226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13227 ;; Tracked objects:
 13228 ;;		On entry : 0/0
 13229 ;;		On exit  : 0/0
 13230 ;;		Unchanged: 0/0
 13231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13232 ;;      Params:         0       0       0       0       0       0       0       0
 13233 ;;      Locals:         1       0       0       0       0       0       0       0
 13234 ;;      Temps:          2       0       0       0       0       0       0       0
 13235 ;;      Totals:         3       0       0       0       0       0       0       0
 13236 ;;Total ram usage:        3 bytes
 13237 ;; Hardware stack levels used:    1
 13238 ;; Hardware stack levels required when called:    6
 13239 ;; This function calls:
 13240 ;;		_LED_PROCESS
 13241 ;;		_RELAY_PROCESS
 13242 ;; This function is called by:
 13243 ;;		_main
 13244 ;; This function uses a non-reentrant model
 13245 ;;
 13246                           
 13247                           
 13248                           ;psect for function _DATA_PROCESS
 13249  05F7                     _DATA_PROCESS:	
 13250                           
 13251                           ;incstack = 0
 13252                           ; Regs used in _DATA_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13253                           ;DATA_PROCESS@x stored from wreg
 13254  05F7  00F6               	movwf	DATA_PROCESS@x
 13255                           
 13256                           ;main.c: 222: void DATA_PROCESS(char x);main.c: 223: {;main.c: 224:     timeout_count = 
      +                          0;
 13257  05F8  3000               	movlw	0
 13258  05F9  0021               	movlb	1	; select bank1
 13259  05FA  00BB               	movwf	(_timeout_count+3)^(0+128)
 13260  05FB  3000               	movlw	0
 13261  05FC  00BA               	movwf	(_timeout_count+2)^(0+128)
 13262  05FD  3000               	movlw	0
 13263  05FE  00B9               	movwf	(_timeout_count+1)^(0+128)
 13264  05FF  3000               	movlw	0
 13265  0600  00B8               	movwf	_timeout_count^(0+128)
 13266                           
 13267                           ;main.c: 225:     switch(x)
 13268  0601  2E78               	goto	l5089
 13269  0602                     l5033:	
 13270                           
 13271                           ;main.c: 228:         {;main.c: 229:             LED_PROCESS(0);
 13272  0602  3000               	movlw	0
 13273  0603  318D  2575  3185   	fcall	_LED_PROCESS
 13274                           
 13275                           ;main.c: 230:             RELAY_PROCESS(0);
 13276  0606  3000               	movlw	0
 13277  0607  318A  22B8         	fcall	_RELAY_PROCESS
 13278                           
 13279                           ;main.c: 231:             check_request = 0;
 13280  0609  0020               	movlb	0	; select bank0
 13281  060A  01E0               	clrf	_check_request
 13282                           
 13283                           ;main.c: 232:             last_touch_status.full_status = 0;
 13284  060B  01D9               	clrf	_last_touch_status
 13285  060C  01DA               	clrf	_last_touch_status+1
 13286                           
 13287                           ;main.c: 233:             break;
 13288  060D  0008               	return
 13289  060E                     l5039:	
 13290                           
 13291                           ;main.c: 236:         {;main.c: 237:             LED_PROCESS(1);
 13292  060E  3001               	movlw	1
 13293  060F  318D  2575  3185   	fcall	_LED_PROCESS
 13294                           
 13295                           ;main.c: 238:             RELAY_PROCESS(1);
 13296  0612  3001               	movlw	1
 13297  0613  318A  22B8         	fcall	_RELAY_PROCESS
 13298                           
 13299                           ;main.c: 239:             check_request = 0;
 13300  0615  0020               	movlb	0	; select bank0
 13301  0616  01E0               	clrf	_check_request
 13302                           
 13303                           ;main.c: 240:             last_touch_status.full_status = 1;
 13304  0617  3001               	movlw	1
 13305  0618  00D9               	movwf	_last_touch_status
 13306  0619  3000               	movlw	0
 13307  061A  00DA               	movwf	_last_touch_status+1
 13308                           
 13309                           ;main.c: 241:             break;
 13310  061B  0008               	return
 13311  061C                     l5045:	
 13312                           
 13313                           ;main.c: 244:         {;main.c: 245:             LED_PROCESS(2);
 13314  061C  3002               	movlw	2
 13315  061D  318D  2575  3185   	fcall	_LED_PROCESS
 13316                           
 13317                           ;main.c: 246:             RELAY_PROCESS(2);
 13318  0620  3002               	movlw	2
 13319  0621  318A  22B8         	fcall	_RELAY_PROCESS
 13320                           
 13321                           ;main.c: 247:             check_request = 0;
 13322  0623  0020               	movlb	0	; select bank0
 13323  0624  01E0               	clrf	_check_request
 13324                           
 13325                           ;main.c: 248:             last_touch_status.full_status = 2;
 13326  0625  3002               	movlw	2
 13327  0626  00D9               	movwf	_last_touch_status
 13328  0627  3000               	movlw	0
 13329  0628  00DA               	movwf	_last_touch_status+1
 13330                           
 13331                           ;main.c: 249:             break;
 13332  0629  0008               	return
 13333  062A                     l5051:	
 13334                           
 13335                           ;main.c: 252:         {;main.c: 253:             LED_PROCESS(3);
 13336  062A  3003               	movlw	3
 13337  062B  318D  2575  3185   	fcall	_LED_PROCESS
 13338                           
 13339                           ;main.c: 254:             RELAY_PROCESS(3);
 13340  062E  3003               	movlw	3
 13341  062F  318A  22B8         	fcall	_RELAY_PROCESS
 13342                           
 13343                           ;main.c: 255:             check_request = 0;
 13344  0631  0020               	movlb	0	; select bank0
 13345  0632  01E0               	clrf	_check_request
 13346                           
 13347                           ;main.c: 256:             last_touch_status.full_status = 3;
 13348  0633  3003               	movlw	3
 13349  0634  00D9               	movwf	_last_touch_status
 13350  0635  3000               	movlw	0
 13351  0636  00DA               	movwf	_last_touch_status+1
 13352                           
 13353                           ;main.c: 257:             break;
 13354  0637  0008               	return
 13355  0638                     l5057:	
 13356                           
 13357                           ;main.c: 260:         {;main.c: 261:             LED_PROCESS(4);
 13358  0638  3004               	movlw	4
 13359  0639  318D  2575  3185   	fcall	_LED_PROCESS
 13360                           
 13361                           ;main.c: 262:             RELAY_PROCESS(4);
 13362  063C  3004               	movlw	4
 13363  063D  318A  22B8         	fcall	_RELAY_PROCESS
 13364                           
 13365                           ;main.c: 263:             check_request = 0;
 13366  063F  0020               	movlb	0	; select bank0
 13367  0640  01E0               	clrf	_check_request
 13368                           
 13369                           ;main.c: 264:             last_touch_status.full_status = 4;
 13370  0641  3004               	movlw	4
 13371  0642  00D9               	movwf	_last_touch_status
 13372  0643  3000               	movlw	0
 13373  0644  00DA               	movwf	_last_touch_status+1
 13374                           
 13375                           ;main.c: 265:             break;
 13376  0645  0008               	return
 13377  0646                     l5063:	
 13378                           
 13379                           ;main.c: 268:         {;main.c: 269:             LED_PROCESS(5);
 13380  0646  3005               	movlw	5
 13381  0647  318D  2575  3185   	fcall	_LED_PROCESS
 13382                           
 13383                           ;main.c: 270:             RELAY_PROCESS(5);
 13384  064A  3005               	movlw	5
 13385  064B  318A  22B8         	fcall	_RELAY_PROCESS
 13386                           
 13387                           ;main.c: 271:             check_request = 0;
 13388  064D  0020               	movlb	0	; select bank0
 13389  064E  01E0               	clrf	_check_request
 13390                           
 13391                           ;main.c: 272:             last_touch_status.full_status = 5;
 13392  064F  3005               	movlw	5
 13393  0650  00D9               	movwf	_last_touch_status
 13394  0651  3000               	movlw	0
 13395  0652  00DA               	movwf	_last_touch_status+1
 13396                           
 13397                           ;main.c: 273:             break;
 13398  0653  0008               	return
 13399  0654                     l5069:	
 13400                           
 13401                           ;main.c: 276:         {;main.c: 277:             LED_PROCESS(6);
 13402  0654  3006               	movlw	6
 13403  0655  318D  2575  3185   	fcall	_LED_PROCESS
 13404                           
 13405                           ;main.c: 278:             RELAY_PROCESS(6);
 13406  0658  3006               	movlw	6
 13407  0659  318A  22B8         	fcall	_RELAY_PROCESS
 13408                           
 13409                           ;main.c: 279:             check_request = 0;
 13410  065B  0020               	movlb	0	; select bank0
 13411  065C  01E0               	clrf	_check_request
 13412                           
 13413                           ;main.c: 280:             last_touch_status.full_status = 6;
 13414  065D  3006               	movlw	6
 13415  065E  00D9               	movwf	_last_touch_status
 13416  065F  3000               	movlw	0
 13417  0660  00DA               	movwf	_last_touch_status+1
 13418                           
 13419                           ;main.c: 281:             break;
 13420  0661  0008               	return
 13421  0662                     l5075:	
 13422                           
 13423                           ;main.c: 284:         {;main.c: 285:             LED_PROCESS(7);
 13424  0662  3007               	movlw	7
 13425  0663  318D  2575  3185   	fcall	_LED_PROCESS
 13426                           
 13427                           ;main.c: 286:             RELAY_PROCESS(7);
 13428  0666  3007               	movlw	7
 13429  0667  318A  22B8         	fcall	_RELAY_PROCESS
 13430                           
 13431                           ;main.c: 287:             check_request = 0;
 13432  0669  0020               	movlb	0	; select bank0
 13433  066A  01E0               	clrf	_check_request
 13434                           
 13435                           ;main.c: 288:             last_touch_status.full_status = 7;
 13436  066B  3007               	movlw	7
 13437  066C  00D9               	movwf	_last_touch_status
 13438  066D  3000               	movlw	0
 13439  066E  00DA               	movwf	_last_touch_status+1
 13440                           
 13441                           ;main.c: 289:             break;
 13442  066F  0008               	return
 13443  0670                     l5081:	
 13444                           
 13445                           ;main.c: 292:         {;main.c: 293:             check_request = 0;
 13446  0670  0020               	movlb	0	; select bank0
 13447  0671  01E0               	clrf	_check_request
 13448                           
 13449                           ;main.c: 294:             update_state_flag = 1;
 13450  0672  01DD               	clrf	_update_state_flag
 13451  0673  0ADD               	incf	_update_state_flag,f
 13452                           
 13453                           ;main.c: 295:             break;
 13454  0674  0008               	return
 13455  0675                     l5085:	
 13456                           
 13457                           ;main.c: 298:         {;main.c: 299:             check_request = 0;
 13458  0675  0020               	movlb	0	; select bank0
 13459  0676  01E0               	clrf	_check_request
 13460                           
 13461                           ;main.c: 300:             break;
 13462  0677  0008               	return
 13463  0678                     l5089:	
 13464  0678  0876               	movf	DATA_PROCESS@x,w
 13465  0679  00F4               	movwf	??_DATA_PROCESS
 13466  067A  01F5               	clrf	??_DATA_PROCESS+1
 13467                           
 13468                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13469                           ; Switch size 1, requested type "simple"
 13470                           ; Number of cases is 1, Range of values is 0 to 0
 13471                           ; switch strategies available:
 13472                           ; Name         Instructions Cycles
 13473                           ; simple_byte            4     3 (average)
 13474                           ; direct_byte            8     6 (fixed)
 13475                           ; jumptable            260     6 (fixed)
 13476                           ;	Chosen strategy is simple_byte
 13477  067B  0875               	movf	??_DATA_PROCESS+1,w
 13478  067C  3A00               	xorlw	0	; case 0
 13479  067D  1903               	skipnz
 13480  067E  2E80               	goto	l6799
 13481  067F  2E75               	goto	l5085
 13482  0680                     l6799:	
 13483                           
 13484                           ; Switch size 1, requested type "simple"
 13485                           ; Number of cases is 9, Range of values is 48 to 85
 13486                           ; switch strategies available:
 13487                           ; Name         Instructions Cycles
 13488                           ; simple_byte           28    15 (average)
 13489                           ; direct_byte           85     9 (fixed)
 13490                           ; jumptable            263     9 (fixed)
 13491                           ;	Chosen strategy is simple_byte
 13492  0680  0874               	movf	??_DATA_PROCESS,w
 13493  0681  3A30               	xorlw	48	; case 48
 13494  0682  1903               	skipnz
 13495  0683  2E02               	goto	l5033
 13496  0684  3A01               	xorlw	1	; case 49
 13497  0685  1903               	skipnz
 13498  0686  2E0E               	goto	l5039
 13499  0687  3A03               	xorlw	3	; case 50
 13500  0688  1903               	skipnz
 13501  0689  2E1C               	goto	l5045
 13502  068A  3A01               	xorlw	1	; case 51
 13503  068B  1903               	skipnz
 13504  068C  2E2A               	goto	l5051
 13505  068D  3A07               	xorlw	7	; case 52
 13506  068E  1903               	skipnz
 13507  068F  2E38               	goto	l5057
 13508  0690  3A01               	xorlw	1	; case 53
 13509  0691  1903               	skipnz
 13510  0692  2E46               	goto	l5063
 13511  0693  3A03               	xorlw	3	; case 54
 13512  0694  1903               	skipnz
 13513  0695  2E54               	goto	l5069
 13514  0696  3A01               	xorlw	1	; case 55
 13515  0697  1903               	skipnz
 13516  0698  2E62               	goto	l5075
 13517  0699  3A62               	xorlw	98	; case 85
 13518  069A  1903               	skipnz
 13519  069B  2E70               	goto	l5081
 13520  069C  2E75               	goto	l5085
 13521  069D  0008               	return
 13522  069E                     __end_of_DATA_PROCESS:	
 13523                           
 13524                           	psect	text88
 13525  0AB8                     __ptext88:	
 13526 ;; *************** function _RELAY_PROCESS *****************
 13527 ;; Defined at:
 13528 ;;		line 6 in file "relay.c"
 13529 ;; Parameters:    Size  Location     Type
 13530 ;;  x               1    wreg     unsigned char 
 13531 ;; Auto vars:     Size  Location     Type
 13532 ;;  x               1    3[COMMON] unsigned char 
 13533 ;; Return value:  Size  Location     Type
 13534 ;;                  1    wreg      void 
 13535 ;; Registers used:
 13536 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13537 ;; Tracked objects:
 13538 ;;		On entry : 0/0
 13539 ;;		On exit  : 0/0
 13540 ;;		Unchanged: 0/0
 13541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13542 ;;      Params:         0       0       0       0       0       0       0       0
 13543 ;;      Locals:         1       0       0       0       0       0       0       0
 13544 ;;      Temps:          2       0       0       0       0       0       0       0
 13545 ;;      Totals:         3       0       0       0       0       0       0       0
 13546 ;;Total ram usage:        3 bytes
 13547 ;; Hardware stack levels used:    1
 13548 ;; Hardware stack levels required when called:    4
 13549 ;; This function calls:
 13550 ;;		Nothing
 13551 ;; This function is called by:
 13552 ;;		_main
 13553 ;;		_myButtonPressedCallback
 13554 ;;		_DATA_PROCESS
 13555 ;; This function uses a non-reentrant model
 13556 ;;
 13557                           
 13558                           
 13559                           ;psect for function _RELAY_PROCESS
 13560  0AB8                     _RELAY_PROCESS:	
 13561                           
 13562                           ;incstack = 0
 13563                           ; Regs used in _RELAY_PROCESS: [wreg-fsr0h+status,2+status,0]
 13564                           ;RELAY_PROCESS@x stored from wreg
 13565  0AB8  00F3               	movwf	RELAY_PROCESS@x
 13566                           
 13567                           ;relay.c: 6: void RELAY_PROCESS(uint8_t x);relay.c: 7: {;relay.c: 8:     switch(x)
 13568  0AB9  2AE2               	goto	l4199
 13569  0ABA                     l1154:	
 13570                           ;relay.c: 11:         {;relay.c: 12:             do { LATCbits.LATC4 = 1; } while(0);do 
      +                          { LATCbits.LATC3 = 1; } while(0);do { LATCbits.LATC6 = 1; } while(0);
 13571                           
 13572  0ABA  0022               	movlb	2	; select bank2
 13573  0ABB  160E               	bsf	14,4	;volatile
 13574  0ABC  158E               	bsf	14,3	;volatile
 13575  0ABD  170E               	bsf	14,6	;volatile
 13576  0ABE  0008               	return
 13577  0ABF                     l1162:	
 13578                           ;relay.c: 16:         {;relay.c: 17:             do { LATCbits.LATC4 = 1; } while(0);do 
      +                          { LATCbits.LATC3 = 1; } while(0);do { LATCbits.LATC6 = 0; } while(0);
 13579                           
 13580  0ABF  0022               	movlb	2	; select bank2
 13581  0AC0  160E               	bsf	14,4	;volatile
 13582  0AC1  158E               	bsf	14,3	;volatile
 13583  0AC2  130E               	bcf	14,6	;volatile
 13584  0AC3  0008               	return
 13585  0AC4                     l1169:	
 13586                           ;relay.c: 21:         {;relay.c: 22:             do { LATCbits.LATC4 = 1; } while(0);do 
      +                          { LATCbits.LATC3 = 0; } while(0);do { LATCbits.LATC6 = 1; } while(0);
 13587                           
 13588  0AC4  0022               	movlb	2	; select bank2
 13589  0AC5  160E               	bsf	14,4	;volatile
 13590  0AC6  118E               	bcf	14,3	;volatile
 13591  0AC7  170E               	bsf	14,6	;volatile
 13592  0AC8  0008               	return
 13593  0AC9                     l1176:	
 13594                           ;relay.c: 26:         {;relay.c: 27:             do { LATCbits.LATC4 = 1; } while(0);do 
      +                          { LATCbits.LATC3 = 0; } while(0);do { LATCbits.LATC6 = 0; } while(0);
 13595                           
 13596  0AC9  0022               	movlb	2	; select bank2
 13597  0ACA  160E               	bsf	14,4	;volatile
 13598  0ACB  118E               	bcf	14,3	;volatile
 13599  0ACC  130E               	bcf	14,6	;volatile
 13600  0ACD  0008               	return
 13601  0ACE                     l1183:	
 13602                           ;relay.c: 31:         {;relay.c: 32:             do { LATCbits.LATC4 = 0; } while(0);do 
      +                          { LATCbits.LATC3 = 1; } while(0);do { LATCbits.LATC6 = 1; } while(0);
 13603                           
 13604  0ACE  0022               	movlb	2	; select bank2
 13605  0ACF  120E               	bcf	14,4	;volatile
 13606  0AD0  158E               	bsf	14,3	;volatile
 13607  0AD1  170E               	bsf	14,6	;volatile
 13608  0AD2  0008               	return
 13609  0AD3                     l1190:	
 13610                           ;relay.c: 36:         {;relay.c: 37:             do { LATCbits.LATC4 = 0; } while(0);do 
      +                          { LATCbits.LATC3 = 1; } while(0);do { LATCbits.LATC6 = 0; } while(0);
 13611                           
 13612  0AD3  0022               	movlb	2	; select bank2
 13613  0AD4  120E               	bcf	14,4	;volatile
 13614  0AD5  158E               	bsf	14,3	;volatile
 13615  0AD6  130E               	bcf	14,6	;volatile
 13616  0AD7  0008               	return
 13617  0AD8                     l1197:	
 13618                           ;relay.c: 41:         {;relay.c: 42:             do { LATCbits.LATC4 = 0; } while(0);do 
      +                          { LATCbits.LATC3 = 0; } while(0);do { LATCbits.LATC6 = 1; } while(0);
 13619                           
 13620  0AD8  0022               	movlb	2	; select bank2
 13621  0AD9  120E               	bcf	14,4	;volatile
 13622  0ADA  118E               	bcf	14,3	;volatile
 13623  0ADB  170E               	bsf	14,6	;volatile
 13624  0ADC  0008               	return
 13625  0ADD                     l1204:	
 13626                           ;relay.c: 46:         {;relay.c: 47:             do { LATCbits.LATC4 = 0; } while(0);do 
      +                          { LATCbits.LATC3 = 0; } while(0);do { LATCbits.LATC6 = 0; } while(0);
 13627                           
 13628  0ADD  0022               	movlb	2	; select bank2
 13629  0ADE  120E               	bcf	14,4	;volatile
 13630  0ADF  118E               	bcf	14,3	;volatile
 13631  0AE0  130E               	bcf	14,6	;volatile
 13632  0AE1  0008               	return
 13633  0AE2                     l4199:	
 13634  0AE2  0873               	movf	RELAY_PROCESS@x,w
 13635  0AE3  00F1               	movwf	??_RELAY_PROCESS
 13636  0AE4  01F2               	clrf	??_RELAY_PROCESS+1
 13637                           
 13638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13639                           ; Switch size 1, requested type "simple"
 13640                           ; Number of cases is 1, Range of values is 0 to 0
 13641                           ; switch strategies available:
 13642                           ; Name         Instructions Cycles
 13643                           ; simple_byte            4     3 (average)
 13644                           ; direct_byte            8     6 (fixed)
 13645                           ; jumptable            260     6 (fixed)
 13646                           ;	Chosen strategy is simple_byte
 13647  0AE5  0872               	movf	??_RELAY_PROCESS+1,w
 13648  0AE6  3A00               	xorlw	0	; case 0
 13649  0AE7  1903               	skipnz
 13650  0AE8  2AEA               	goto	l6801
 13651  0AE9  2B04               	goto	l1210
 13652  0AEA                     l6801:	
 13653                           
 13654                           ; Switch size 1, requested type "simple"
 13655                           ; Number of cases is 8, Range of values is 0 to 7
 13656                           ; switch strategies available:
 13657                           ; Name         Instructions Cycles
 13658                           ; direct_byte           22     6 (fixed)
 13659                           ; simple_byte           25    13 (average)
 13660                           ; jumptable            260     6 (fixed)
 13661                           ;	Chosen strategy is simple_byte
 13662  0AEA  0871               	movf	??_RELAY_PROCESS,w
 13663  0AEB  3A00               	xorlw	0	; case 0
 13664  0AEC  1903               	skipnz
 13665  0AED  2ABA               	goto	l1154
 13666  0AEE  3A01               	xorlw	1	; case 1
 13667  0AEF  1903               	skipnz
 13668  0AF0  2ABF               	goto	l1162
 13669  0AF1  3A03               	xorlw	3	; case 2
 13670  0AF2  1903               	skipnz
 13671  0AF3  2AC4               	goto	l1169
 13672  0AF4  3A01               	xorlw	1	; case 3
 13673  0AF5  1903               	skipnz
 13674  0AF6  2AC9               	goto	l1176
 13675  0AF7  3A07               	xorlw	7	; case 4
 13676  0AF8  1903               	skipnz
 13677  0AF9  2ACE               	goto	l1183
 13678  0AFA  3A01               	xorlw	1	; case 5
 13679  0AFB  1903               	skipnz
 13680  0AFC  2AD3               	goto	l1190
 13681  0AFD  3A03               	xorlw	3	; case 6
 13682  0AFE  1903               	skipnz
 13683  0AFF  2AD8               	goto	l1197
 13684  0B00  3A01               	xorlw	1	; case 7
 13685  0B01  1903               	skipnz
 13686  0B02  2ADD               	goto	l1204
 13687  0B03  2B04               	goto	l1210
 13688  0B04                     l1210:	
 13689  0B04  0008               	return
 13690  0B05                     __end_of_RELAY_PROCESS:	
 13691                           
 13692                           	psect	text89
 13693  0D75                     __ptext89:	
 13694 ;; *************** function _LED_PROCESS *****************
 13695 ;; Defined at:
 13696 ;;		line 45 in file "led.c"
 13697 ;; Parameters:    Size  Location     Type
 13698 ;;  x               1    wreg     unsigned char 
 13699 ;; Auto vars:     Size  Location     Type
 13700 ;;  x               1    3[COMMON] unsigned char 
 13701 ;; Return value:  Size  Location     Type
 13702 ;;                  1    wreg      void 
 13703 ;; Registers used:
 13704 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13705 ;; Tracked objects:
 13706 ;;		On entry : 0/0
 13707 ;;		On exit  : 0/0
 13708 ;;		Unchanged: 0/0
 13709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13710 ;;      Params:         0       0       0       0       0       0       0       0
 13711 ;;      Locals:         1       0       0       0       0       0       0       0
 13712 ;;      Temps:          2       0       0       0       0       0       0       0
 13713 ;;      Totals:         3       0       0       0       0       0       0       0
 13714 ;;Total ram usage:        3 bytes
 13715 ;; Hardware stack levels used:    1
 13716 ;; Hardware stack levels required when called:    5
 13717 ;; This function calls:
 13718 ;;		_LED_0_SetHigh
 13719 ;;		_LED_0_SetLow
 13720 ;;		_LED_1_SetHigh
 13721 ;;		_LED_1_SetLow
 13722 ;;		_LED_2_SetHigh
 13723 ;;		_LED_2_SetLow
 13724 ;; This function is called by:
 13725 ;;		_main
 13726 ;;		_myButtonPressedCallback
 13727 ;;		_DATA_PROCESS
 13728 ;; This function uses a non-reentrant model
 13729 ;;
 13730                           
 13731                           
 13732                           ;psect for function _LED_PROCESS
 13733  0D75                     _LED_PROCESS:	
 13734                           
 13735                           ;incstack = 0
 13736                           ; Regs used in _LED_PROCESS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13737                           ;LED_PROCESS@x stored from wreg
 13738  0D75  00F3               	movwf	LED_PROCESS@x
 13739                           
 13740                           ;led.c: 45: void LED_PROCESS(uint8_t x);led.c: 46: {;led.c: 47:     switch(x)
 13741  0D76  2DBF               	goto	l4189
 13742  0D77                     l4171:	
 13743                           
 13744                           ;led.c: 50:         {;led.c: 51:             LED_2_SetHigh();LED_1_SetHigh();LED_0_SetHi
      +                          gh();
 13745  0D77  3194  249D  318D   	fcall	_LED_2_SetHigh
 13746  0D7A  3194  2495  318D   	fcall	_LED_1_SetHigh
 13747  0D7D  3194  248D         	fcall	_LED_0_SetHigh
 13748                           
 13749                           ;led.c: 52:             break;
 13750  0D7F  0008               	return
 13751  0D80                     l4173:	
 13752                           
 13753                           ;led.c: 55:         {;led.c: 56:             LED_2_SetHigh();LED_1_SetHigh();LED_0_SetLo
      +                          w();
 13754  0D80  3194  249D  318D   	fcall	_LED_2_SetHigh
 13755  0D83  3194  2495  318D   	fcall	_LED_1_SetHigh
 13756  0D86  3194  2491         	fcall	_LED_0_SetLow
 13757                           
 13758                           ;led.c: 57:             break;
 13759  0D88  0008               	return
 13760  0D89                     l4175:	
 13761                           
 13762                           ;led.c: 60:         {;led.c: 61:             LED_2_SetHigh();LED_1_SetLow();LED_0_SetHig
      +                          h();
 13763  0D89  3194  249D  318D   	fcall	_LED_2_SetHigh
 13764  0D8C  3194  2499  318D   	fcall	_LED_1_SetLow
 13765  0D8F  3194  248D         	fcall	_LED_0_SetHigh
 13766                           
 13767                           ;led.c: 62:             break;
 13768  0D91  0008               	return
 13769  0D92                     l4177:	
 13770                           
 13771                           ;led.c: 65:         {;led.c: 66:             LED_2_SetHigh();LED_1_SetLow();LED_0_SetLow
      +                          ();
 13772  0D92  3194  249D  318D   	fcall	_LED_2_SetHigh
 13773  0D95  3194  2499  318D   	fcall	_LED_1_SetLow
 13774  0D98  3194  2491         	fcall	_LED_0_SetLow
 13775                           
 13776                           ;led.c: 67:             break;
 13777  0D9A  0008               	return
 13778  0D9B                     l4179:	
 13779                           
 13780                           ;led.c: 70:         {;led.c: 71:             LED_2_SetLow();LED_1_SetHigh();LED_0_SetHig
      +                          h();
 13781  0D9B  3194  24A1  318D   	fcall	_LED_2_SetLow
 13782  0D9E  3194  2495  318D   	fcall	_LED_1_SetHigh
 13783  0DA1  3194  248D         	fcall	_LED_0_SetHigh
 13784                           
 13785                           ;led.c: 72:             break;
 13786  0DA3  0008               	return
 13787  0DA4                     l4181:	
 13788                           
 13789                           ;led.c: 75:         {;led.c: 76:             LED_2_SetLow();LED_1_SetHigh();LED_0_SetLow
      +                          ();
 13790  0DA4  3194  24A1  318D   	fcall	_LED_2_SetLow
 13791  0DA7  3194  2495  318D   	fcall	_LED_1_SetHigh
 13792  0DAA  3194  2491         	fcall	_LED_0_SetLow
 13793                           
 13794                           ;led.c: 77:             break;
 13795  0DAC  0008               	return
 13796  0DAD                     l4183:	
 13797                           
 13798                           ;led.c: 80:         {;led.c: 81:             LED_2_SetLow();LED_1_SetLow();LED_0_SetHigh
      +                          ();
 13799  0DAD  3194  24A1  318D   	fcall	_LED_2_SetLow
 13800  0DB0  3194  2499  318D   	fcall	_LED_1_SetLow
 13801  0DB3  3194  248D         	fcall	_LED_0_SetHigh
 13802                           
 13803                           ;led.c: 82:             break;
 13804  0DB5  0008               	return
 13805  0DB6                     l4185:	
 13806                           
 13807                           ;led.c: 85:         {;led.c: 86:             LED_2_SetLow();LED_1_SetLow();LED_0_SetLow(
      +                          );
 13808  0DB6  3194  24A1  318D   	fcall	_LED_2_SetLow
 13809  0DB9  3194  2499  318D   	fcall	_LED_1_SetLow
 13810  0DBC  3194  2491         	fcall	_LED_0_SetLow
 13811                           
 13812                           ;led.c: 87:             break;
 13813  0DBE  0008               	return
 13814  0DBF                     l4189:	
 13815  0DBF  0873               	movf	LED_PROCESS@x,w
 13816  0DC0  00F1               	movwf	??_LED_PROCESS
 13817  0DC1  01F2               	clrf	??_LED_PROCESS+1
 13818                           
 13819                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13820                           ; Switch size 1, requested type "simple"
 13821                           ; Number of cases is 1, Range of values is 0 to 0
 13822                           ; switch strategies available:
 13823                           ; Name         Instructions Cycles
 13824                           ; simple_byte            4     3 (average)
 13825                           ; direct_byte            8     6 (fixed)
 13826                           ; jumptable            260     6 (fixed)
 13827                           ;	Chosen strategy is simple_byte
 13828  0DC2  0872               	movf	??_LED_PROCESS+1,w
 13829  0DC3  3A00               	xorlw	0	; case 0
 13830  0DC4  1903               	skipnz
 13831  0DC5  2DC7               	goto	l6803
 13832  0DC6  2DE1               	goto	l1147
 13833  0DC7                     l6803:	
 13834                           
 13835                           ; Switch size 1, requested type "simple"
 13836                           ; Number of cases is 8, Range of values is 0 to 7
 13837                           ; switch strategies available:
 13838                           ; Name         Instructions Cycles
 13839                           ; direct_byte           22     6 (fixed)
 13840                           ; simple_byte           25    13 (average)
 13841                           ; jumptable            260     6 (fixed)
 13842                           ;	Chosen strategy is simple_byte
 13843  0DC7  0871               	movf	??_LED_PROCESS,w
 13844  0DC8  3A00               	xorlw	0	; case 0
 13845  0DC9  1903               	skipnz
 13846  0DCA  2D77               	goto	l4171
 13847  0DCB  3A01               	xorlw	1	; case 1
 13848  0DCC  1903               	skipnz
 13849  0DCD  2D80               	goto	l4173
 13850  0DCE  3A03               	xorlw	3	; case 2
 13851  0DCF  1903               	skipnz
 13852  0DD0  2D89               	goto	l4175
 13853  0DD1  3A01               	xorlw	1	; case 3
 13854  0DD2  1903               	skipnz
 13855  0DD3  2D92               	goto	l4177
 13856  0DD4  3A07               	xorlw	7	; case 4
 13857  0DD5  1903               	skipnz
 13858  0DD6  2D9B               	goto	l4179
 13859  0DD7  3A01               	xorlw	1	; case 5
 13860  0DD8  1903               	skipnz
 13861  0DD9  2DA4               	goto	l4181
 13862  0DDA  3A03               	xorlw	3	; case 6
 13863  0DDB  1903               	skipnz
 13864  0DDC  2DAD               	goto	l4183
 13865  0DDD  3A01               	xorlw	1	; case 7
 13866  0DDE  1903               	skipnz
 13867  0DDF  2DB6               	goto	l4185
 13868  0DE0  2DE1               	goto	l1147
 13869  0DE1                     l1147:	
 13870  0DE1  0008               	return
 13871  0DE2                     __end_of_LED_PROCESS:	
 13872                           
 13873                           	psect	text90
 13874  14A1                     __ptext90:	
 13875 ;; *************** function _LED_2_SetLow *****************
 13876 ;; Defined at:
 13877 ;;		line 17 in file "led.c"
 13878 ;; Parameters:    Size  Location     Type
 13879 ;;		None
 13880 ;; Auto vars:     Size  Location     Type
 13881 ;;		None
 13882 ;; Return value:  Size  Location     Type
 13883 ;;                  1    wreg      void 
 13884 ;; Registers used:
 13885 ;;		None
 13886 ;; Tracked objects:
 13887 ;;		On entry : 0/0
 13888 ;;		On exit  : 0/0
 13889 ;;		Unchanged: 0/0
 13890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13891 ;;      Params:         0       0       0       0       0       0       0       0
 13892 ;;      Locals:         0       0       0       0       0       0       0       0
 13893 ;;      Temps:          0       0       0       0       0       0       0       0
 13894 ;;      Totals:         0       0       0       0       0       0       0       0
 13895 ;;Total ram usage:        0 bytes
 13896 ;; Hardware stack levels used:    1
 13897 ;; Hardware stack levels required when called:    4
 13898 ;; This function calls:
 13899 ;;		Nothing
 13900 ;; This function is called by:
 13901 ;;		_LED_PROCESS
 13902 ;; This function uses a non-reentrant model
 13903 ;;
 13904                           
 13905                           
 13906                           ;psect for function _LED_2_SetLow
 13907  14A1                     _LED_2_SetLow:	
 13908                           
 13909                           ;incstack = 0
 13910                           ; Regs used in _LED_2_SetLow: []
 13911                           ;led.c: 19:     do { LATAbits.LATA2 = 1; } while(0);
 13912  14A1  0022               	movlb	2	; select bank2
 13913  14A2  150C               	bsf	12,2	;volatile
 13914                           
 13915                           ;led.c: 20:     do { LATCbits.LATC0 = 0; } while(0);
 13916  14A3  100E               	bcf	14,0	;volatile
 13917  14A4  0008               	return
 13918  14A5                     __end_of_LED_2_SetLow:	
 13919                           
 13920                           	psect	text91
 13921  149D                     __ptext91:	
 13922 ;; *************** function _LED_2_SetHigh *****************
 13923 ;; Defined at:
 13924 ;;		line 12 in file "led.c"
 13925 ;; Parameters:    Size  Location     Type
 13926 ;;		None
 13927 ;; Auto vars:     Size  Location     Type
 13928 ;;		None
 13929 ;; Return value:  Size  Location     Type
 13930 ;;                  1    wreg      void 
 13931 ;; Registers used:
 13932 ;;		None
 13933 ;; Tracked objects:
 13934 ;;		On entry : 0/0
 13935 ;;		On exit  : 0/0
 13936 ;;		Unchanged: 0/0
 13937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13938 ;;      Params:         0       0       0       0       0       0       0       0
 13939 ;;      Locals:         0       0       0       0       0       0       0       0
 13940 ;;      Temps:          0       0       0       0       0       0       0       0
 13941 ;;      Totals:         0       0       0       0       0       0       0       0
 13942 ;;Total ram usage:        0 bytes
 13943 ;; Hardware stack levels used:    1
 13944 ;; Hardware stack levels required when called:    4
 13945 ;; This function calls:
 13946 ;;		Nothing
 13947 ;; This function is called by:
 13948 ;;		_LED_PROCESS
 13949 ;; This function uses a non-reentrant model
 13950 ;;
 13951                           
 13952                           
 13953                           ;psect for function _LED_2_SetHigh
 13954  149D                     _LED_2_SetHigh:	
 13955                           
 13956                           ;incstack = 0
 13957                           ; Regs used in _LED_2_SetHigh: []
 13958                           ;led.c: 14:     do { LATCbits.LATC0 = 1; } while(0);
 13959  149D  0022               	movlb	2	; select bank2
 13960  149E  140E               	bsf	14,0	;volatile
 13961                           
 13962                           ;led.c: 15:     do { LATAbits.LATA2 = 0; } while(0);
 13963  149F  110C               	bcf	12,2	;volatile
 13964  14A0  0008               	return
 13965  14A1                     __end_of_LED_2_SetHigh:	
 13966                           
 13967                           	psect	text92
 13968  1499                     __ptext92:	
 13969 ;; *************** function _LED_1_SetLow *****************
 13970 ;; Defined at:
 13971 ;;		line 28 in file "led.c"
 13972 ;; Parameters:    Size  Location     Type
 13973 ;;		None
 13974 ;; Auto vars:     Size  Location     Type
 13975 ;;		None
 13976 ;; Return value:  Size  Location     Type
 13977 ;;                  1    wreg      void 
 13978 ;; Registers used:
 13979 ;;		None
 13980 ;; Tracked objects:
 13981 ;;		On entry : 0/0
 13982 ;;		On exit  : 0/0
 13983 ;;		Unchanged: 0/0
 13984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13985 ;;      Params:         0       0       0       0       0       0       0       0
 13986 ;;      Locals:         0       0       0       0       0       0       0       0
 13987 ;;      Temps:          0       0       0       0       0       0       0       0
 13988 ;;      Totals:         0       0       0       0       0       0       0       0
 13989 ;;Total ram usage:        0 bytes
 13990 ;; Hardware stack levels used:    1
 13991 ;; Hardware stack levels required when called:    4
 13992 ;; This function calls:
 13993 ;;		Nothing
 13994 ;; This function is called by:
 13995 ;;		_LED_PROCESS
 13996 ;; This function uses a non-reentrant model
 13997 ;;
 13998                           
 13999                           
 14000                           ;psect for function _LED_1_SetLow
 14001  1499                     _LED_1_SetLow:	
 14002                           
 14003                           ;incstack = 0
 14004                           ; Regs used in _LED_1_SetLow: []
 14005                           ;led.c: 30:     do { LATAbits.LATA0 = 1; } while(0);
 14006  1499  0022               	movlb	2	; select bank2
 14007  149A  140C               	bsf	12,0	;volatile
 14008                           
 14009                           ;led.c: 31:     do { LATAbits.LATA1 = 0; } while(0);
 14010  149B  108C               	bcf	12,1	;volatile
 14011  149C  0008               	return
 14012  149D                     __end_of_LED_1_SetLow:	
 14013                           
 14014                           	psect	text93
 14015  1495                     __ptext93:	
 14016 ;; *************** function _LED_1_SetHigh *****************
 14017 ;; Defined at:
 14018 ;;		line 23 in file "led.c"
 14019 ;; Parameters:    Size  Location     Type
 14020 ;;		None
 14021 ;; Auto vars:     Size  Location     Type
 14022 ;;		None
 14023 ;; Return value:  Size  Location     Type
 14024 ;;                  1    wreg      void 
 14025 ;; Registers used:
 14026 ;;		None
 14027 ;; Tracked objects:
 14028 ;;		On entry : 0/0
 14029 ;;		On exit  : 0/0
 14030 ;;		Unchanged: 0/0
 14031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14032 ;;      Params:         0       0       0       0       0       0       0       0
 14033 ;;      Locals:         0       0       0       0       0       0       0       0
 14034 ;;      Temps:          0       0       0       0       0       0       0       0
 14035 ;;      Totals:         0       0       0       0       0       0       0       0
 14036 ;;Total ram usage:        0 bytes
 14037 ;; Hardware stack levels used:    1
 14038 ;; Hardware stack levels required when called:    4
 14039 ;; This function calls:
 14040 ;;		Nothing
 14041 ;; This function is called by:
 14042 ;;		_LED_PROCESS
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           
 14047                           ;psect for function _LED_1_SetHigh
 14048  1495                     _LED_1_SetHigh:	
 14049                           
 14050                           ;incstack = 0
 14051                           ; Regs used in _LED_1_SetHigh: []
 14052                           ;led.c: 25:     do { LATAbits.LATA1 = 1; } while(0);
 14053  1495  0022               	movlb	2	; select bank2
 14054  1496  148C               	bsf	12,1	;volatile
 14055                           
 14056                           ;led.c: 26:     do { LATAbits.LATA0 = 0; } while(0);
 14057  1497  100C               	bcf	12,0	;volatile
 14058  1498  0008               	return
 14059  1499                     __end_of_LED_1_SetHigh:	
 14060                           
 14061                           	psect	text94
 14062  1491                     __ptext94:	
 14063 ;; *************** function _LED_0_SetLow *****************
 14064 ;; Defined at:
 14065 ;;		line 39 in file "led.c"
 14066 ;; Parameters:    Size  Location     Type
 14067 ;;		None
 14068 ;; Auto vars:     Size  Location     Type
 14069 ;;		None
 14070 ;; Return value:  Size  Location     Type
 14071 ;;                  1    wreg      void 
 14072 ;; Registers used:
 14073 ;;		None
 14074 ;; Tracked objects:
 14075 ;;		On entry : 0/0
 14076 ;;		On exit  : 0/0
 14077 ;;		Unchanged: 0/0
 14078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14079 ;;      Params:         0       0       0       0       0       0       0       0
 14080 ;;      Locals:         0       0       0       0       0       0       0       0
 14081 ;;      Temps:          0       0       0       0       0       0       0       0
 14082 ;;      Totals:         0       0       0       0       0       0       0       0
 14083 ;;Total ram usage:        0 bytes
 14084 ;; Hardware stack levels used:    1
 14085 ;; Hardware stack levels required when called:    4
 14086 ;; This function calls:
 14087 ;;		Nothing
 14088 ;; This function is called by:
 14089 ;;		_LED_PROCESS
 14090 ;; This function uses a non-reentrant model
 14091 ;;
 14092                           
 14093                           
 14094                           ;psect for function _LED_0_SetLow
 14095  1491                     _LED_0_SetLow:	
 14096                           
 14097                           ;incstack = 0
 14098                           ; Regs used in _LED_0_SetLow: []
 14099                           ;led.c: 41:     do { LATAbits.LATA4 = 1; } while(0);
 14100  1491  0022               	movlb	2	; select bank2
 14101  1492  160C               	bsf	12,4	;volatile
 14102                           
 14103                           ;led.c: 42:     do { LATAbits.LATA5 = 0; } while(0);
 14104  1493  128C               	bcf	12,5	;volatile
 14105  1494  0008               	return
 14106  1495                     __end_of_LED_0_SetLow:	
 14107                           
 14108                           	psect	text95
 14109  148D                     __ptext95:	
 14110 ;; *************** function _LED_0_SetHigh *****************
 14111 ;; Defined at:
 14112 ;;		line 34 in file "led.c"
 14113 ;; Parameters:    Size  Location     Type
 14114 ;;		None
 14115 ;; Auto vars:     Size  Location     Type
 14116 ;;		None
 14117 ;; Return value:  Size  Location     Type
 14118 ;;                  1    wreg      void 
 14119 ;; Registers used:
 14120 ;;		None
 14121 ;; Tracked objects:
 14122 ;;		On entry : 0/0
 14123 ;;		On exit  : 0/0
 14124 ;;		Unchanged: 0/0
 14125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14126 ;;      Params:         0       0       0       0       0       0       0       0
 14127 ;;      Locals:         0       0       0       0       0       0       0       0
 14128 ;;      Temps:          0       0       0       0       0       0       0       0
 14129 ;;      Totals:         0       0       0       0       0       0       0       0
 14130 ;;Total ram usage:        0 bytes
 14131 ;; Hardware stack levels used:    1
 14132 ;; Hardware stack levels required when called:    4
 14133 ;; This function calls:
 14134 ;;		Nothing
 14135 ;; This function is called by:
 14136 ;;		_LED_PROCESS
 14137 ;; This function uses a non-reentrant model
 14138 ;;
 14139                           
 14140                           
 14141                           ;psect for function _LED_0_SetHigh
 14142  148D                     _LED_0_SetHigh:	
 14143                           
 14144                           ;incstack = 0
 14145                           ; Regs used in _LED_0_SetHigh: []
 14146                           ;led.c: 36:     do { LATAbits.LATA5 = 1; } while(0);
 14147  148D  0022               	movlb	2	; select bank2
 14148  148E  168C               	bsf	12,5	;volatile
 14149                           
 14150                           ;led.c: 37:     do { LATAbits.LATA4 = 0; } while(0);
 14151  148F  120C               	bcf	12,4	;volatile
 14152  1490  0008               	return
 14153  1491                     __end_of_LED_0_SetHigh:	
 14154                           
 14155                           	psect	intentry
 14156  0004                     __pintentry:	
 14157 ;; *************** function _INTERRUPT_InterruptManager *****************
 14158 ;; Defined at:
 14159 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14160 ;; Parameters:    Size  Location     Type
 14161 ;;		None
 14162 ;; Auto vars:     Size  Location     Type
 14163 ;;		None
 14164 ;; Return value:  Size  Location     Type
 14165 ;;                  1    wreg      void 
 14166 ;; Registers used:
 14167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14168 ;; Tracked objects:
 14169 ;;		On entry : 0/0
 14170 ;;		On exit  : 0/0
 14171 ;;		Unchanged: 0/0
 14172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14173 ;;      Params:         0       0       0       0       0       0       0       0
 14174 ;;      Locals:         0       0       0       0       0       0       0       0
 14175 ;;      Temps:          0       0       0       0       0       0       0       0
 14176 ;;      Totals:         0       0       0       0       0       0       0       0
 14177 ;;Total ram usage:        0 bytes
 14178 ;; Hardware stack levels used:    1
 14179 ;; Hardware stack levels required when called:    3
 14180 ;; This function calls:
 14181 ;;		Absolute function
 14182 ;;		_EUSART_Receive_ISR
 14183 ;;		_EUSART_Transmit_ISR
 14184 ;; This function is called by:
 14185 ;;		Interrupt level 1
 14186 ;; This function uses a non-reentrant model
 14187 ;;
 14188                           
 14189  0004                     _INTERRUPT_InterruptManager:	
 14190                           
 14191                           ;incstack = 0
 14192  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14193                           
 14194                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14195  0005  3180               	pagesel	$
 14196                           
 14197                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
 14198  0006  1F0B               	btfss	11,6	;volatile
 14199  0007  2821               	goto	i1l845
 14200                           
 14201                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 14202  0008  0021               	movlb	1	; select bank1
 14203  0009  1E11               	btfss	17,4	;volatile
 14204  000A  2815               	goto	i1l840
 14205  000B  0020               	movlb	0	; select bank0
 14206  000C  1E11               	btfss	17,4	;volatile
 14207  000D  2815               	goto	i1l840
 14208                           
 14209                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
 14210  000E  0021               	movlb	1	; select bank1
 14211  000F  084D               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 14212  0010  008A               	movwf	10
 14213  0011  084C               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 14214  0012  000A               	callw
 14215  0013  3180               	pagesel	$
 14216                           
 14217                           ;mcc_generated_files/interrupt_manager.c: 60:         }
 14218  0014  2821               	goto	i1l845
 14219  0015                     i1l840:	
 14220                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 14221                           
 14222  0015  0021               	movlb	1	; select bank1
 14223  0016  1E91               	btfss	17,5	;volatile
 14224  0017  2821               	goto	i1l845
 14225  0018  0020               	movlb	0	; select bank0
 14226  0019  1E91               	btfss	17,5	;volatile
 14227  001A  2821               	goto	i1l845
 14228                           
 14229                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
 14230  001B  0021               	movlb	1	; select bank1
 14231  001C  084B               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14232  001D  008A               	movwf	10
 14233  001E  084A               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14234  001F  000A               	callw
 14235  0020  3180               	pagesel	$
 14236  0021                     i1l845:	
 14237                           ;mcc_generated_files/interrupt_manager.c: 69:     }
 14238                           
 14239                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14240                           
 14241  0021  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14242  0022  0009               	retfie
 14243  0023                     __end_of_INTERRUPT_InterruptManager:	
 14244                           
 14245                           	psect	text97
 14246  0801                     __ptext97:	
 14247 ;; *************** function _EUSART_Transmit_ISR *****************
 14248 ;; Defined at:
 14249 ;;		line 203 in file "mcc_generated_files/eusart.c"
 14250 ;; Parameters:    Size  Location     Type
 14251 ;;		None
 14252 ;; Auto vars:     Size  Location     Type
 14253 ;;		None
 14254 ;; Return value:  Size  Location     Type
 14255 ;;                  1    wreg      void 
 14256 ;; Registers used:
 14257 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14258 ;; Tracked objects:
 14259 ;;		On entry : 0/0
 14260 ;;		On exit  : 0/0
 14261 ;;		Unchanged: 0/0
 14262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14263 ;;      Params:         0       0       0       0       0       0       0       0
 14264 ;;      Locals:         0       0       0       0       0       0       0       0
 14265 ;;      Temps:          1       0       0       0       0       0       0       0
 14266 ;;      Totals:         1       0       0       0       0       0       0       0
 14267 ;;Total ram usage:        1 bytes
 14268 ;; Hardware stack levels used:    1
 14269 ;; This function calls:
 14270 ;;		Nothing
 14271 ;; This function is called by:
 14272 ;;		_EUSART_Initialize
 14273 ;;		_INTERRUPT_InterruptManager
 14274 ;; This function uses a non-reentrant model
 14275 ;;
 14276                           
 14277                           
 14278                           ;psect for function _EUSART_Transmit_ISR
 14279  0801                     _EUSART_Transmit_ISR:	
 14280                           
 14281                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 14282                           
 14283                           ;incstack = 0
 14284                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 14285  0801  3008               	movlw	8
 14286  0802  0021               	movlb	1	; select bank1
 14287  0803  024E               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 14288  0804  1803               	skipnc
 14289  0805  281D               	goto	i1l754
 14290                           
 14291                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 14292  0806  0020               	movlb	0	; select bank0
 14293  0807  0867               	movf	_eusartTxTail,w
 14294  0808  3EB0               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 14295  0809  0086               	movwf	6
 14296  080A  0187               	clrf	7
 14297  080B  0801               	movf	1,w
 14298  080C  0023               	movlb	3	; select bank3
 14299  080D  009A               	movwf	26	;volatile
 14300  080E  3001               	movlw	1
 14301  080F  00F0               	movwf	??_EUSART_Transmit_ISR
 14302  0810  0870               	movf	??_EUSART_Transmit_ISR,w
 14303  0811  0020               	movlb	0	; select bank0
 14304  0812  07E7               	addwf	_eusartTxTail,f	;volatile
 14305                           
 14306                           ;mcc_generated_files/eusart.c: 210:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 14307  0813  3008               	movlw	8
 14308  0814  0267               	subwf	_eusartTxTail,w	;volatile
 14309  0815  1803               	btfsc	3,0
 14310                           
 14311                           ;mcc_generated_files/eusart.c: 211:         {;mcc_generated_files/eusart.c: 212:        
      +                               eusartTxTail = 0;
 14312  0816  01E7               	clrf	_eusartTxTail	;volatile
 14313                           
 14314                           ;mcc_generated_files/eusart.c: 214:         eusartTxBufferRemaining++;
 14315  0817  3001               	movlw	1
 14316  0818  00F0               	movwf	??_EUSART_Transmit_ISR
 14317  0819  0870               	movf	??_EUSART_Transmit_ISR,w
 14318  081A  0021               	movlb	1	; select bank1
 14319  081B  07CE               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 14320                           
 14321                           ;mcc_generated_files/eusart.c: 215:     }
 14322  081C  0008               	return
 14323  081D                     i1l754:	
 14324                           ;mcc_generated_files/eusart.c: 216:     else
 14325                           
 14326                           
 14327                           ;mcc_generated_files/eusart.c: 217:     {;mcc_generated_files/eusart.c: 218:         PIE
      +                          1bits.TXIE = 0;
 14328  081D  1211               	bcf	17,4	;volatile
 14329  081E  0008               	return
 14330  081F                     __end_of_EUSART_Transmit_ISR:	
 14331                           
 14332                           	psect	text98
 14333  0970                     __ptext98:	
 14334 ;; *************** function _EUSART_Receive_ISR *****************
 14335 ;; Defined at:
 14336 ;;		line 222 in file "mcc_generated_files/eusart.c"
 14337 ;; Parameters:    Size  Location     Type
 14338 ;;		None
 14339 ;; Auto vars:     Size  Location     Type
 14340 ;;		None
 14341 ;; Return value:  Size  Location     Type
 14342 ;;                  1    wreg      void 
 14343 ;; Registers used:
 14344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14345 ;; Tracked objects:
 14346 ;;		On entry : 0/0
 14347 ;;		On exit  : 0/0
 14348 ;;		Unchanged: 0/0
 14349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14350 ;;      Params:         0       0       0       0       0       0       0       0
 14351 ;;      Locals:         0       0       0       0       0       0       0       0
 14352 ;;      Temps:          0       0       0       0       0       0       0       0
 14353 ;;      Totals:         0       0       0       0       0       0       0       0
 14354 ;;Total ram usage:        0 bytes
 14355 ;; Hardware stack levels used:    1
 14356 ;; Hardware stack levels required when called:    2
 14357 ;; This function calls:
 14358 ;;		Absolute function
 14359 ;;		_EUSART_DefaultErrorHandler
 14360 ;;		_EUSART_DefaultFramingErrorHandler
 14361 ;;		_EUSART_DefaultOverrunErrorHandler
 14362 ;;		_EUSART_RxDataHandler
 14363 ;; This function is called by:
 14364 ;;		_EUSART_Initialize
 14365 ;;		_INTERRUPT_InterruptManager
 14366 ;; This function uses a non-reentrant model
 14367 ;;
 14368                           
 14369                           
 14370                           ;psect for function _EUSART_Receive_ISR
 14371  0970                     _EUSART_Receive_ISR:	
 14372                           
 14373                           ;mcc_generated_files/eusart.c: 225:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 14374                           
 14375                           ;incstack = 0
 14376                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14377  0970  087C               	movf	_eusartRxHead,w	;volatile
 14378  0971  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14379  0972  0086               	movwf	6
 14380  0973  0187               	clrf	7
 14381  0974  0181               	clrf	1
 14382                           
 14383                           ;mcc_generated_files/eusart.c: 227:     if(RCSTAbits.FERR){
 14384  0975  0023               	movlb	3	; select bank3
 14385  0976  1D1D               	btfss	29,2	;volatile
 14386  0977  2983               	goto	i1l4911
 14387                           
 14388                           ;mcc_generated_files/eusart.c: 228:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 14389  0978  087C               	movf	_eusartRxHead,w	;volatile
 14390  0979  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14391  097A  0086               	movwf	6
 14392  097B  0187               	clrf	7
 14393  097C  1481               	bsf	1,1
 14394                           
 14395                           ;mcc_generated_files/eusart.c: 229:         EUSART_FramingErrorHandler();
 14396  097D  0021               	movlb	1	; select bank1
 14397  097E  0849               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 14398  097F  008A               	movwf	10
 14399  0980  0848               	movf	_EUSART_FramingErrorHandler^(0+128),w
 14400  0981  000A               	callw
 14401  0982  3189               	pagesel	$
 14402  0983                     i1l4911:	
 14403                           
 14404                           ;mcc_generated_files/eusart.c: 232:     if(RCSTAbits.OERR){
 14405  0983  0023               	movlb	3	; select bank3
 14406  0984  1C9D               	btfss	29,1	;volatile
 14407  0985  2991               	goto	i1l4917
 14408                           
 14409                           ;mcc_generated_files/eusart.c: 233:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 14410  0986  087C               	movf	_eusartRxHead,w	;volatile
 14411  0987  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14412  0988  0086               	movwf	6
 14413  0989  0187               	clrf	7
 14414  098A  1501               	bsf	1,2
 14415                           
 14416                           ;mcc_generated_files/eusart.c: 234:         EUSART_OverrunErrorHandler();
 14417  098B  0021               	movlb	1	; select bank1
 14418  098C  0847               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 14419  098D  008A               	movwf	10
 14420  098E  0846               	movf	_EUSART_OverrunErrorHandler^(0+128),w
 14421  098F  000A               	callw
 14422  0990  3189               	pagesel	$
 14423  0991                     i1l4917:	
 14424                           
 14425                           ;mcc_generated_files/eusart.c: 237:     if(eusartRxStatusBuffer[eusartRxHead].status){
 14426  0991  087C               	movf	_eusartRxHead,w	;volatile
 14427  0992  3EA0               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
 14428  0993  0086               	movwf	6
 14429  0994  0187               	clrf	7
 14430  0995  0801               	movf	1,w
 14431  0996  1903               	btfsc	3,2
 14432  0997  299F               	goto	i1l4921
 14433                           
 14434                           ;mcc_generated_files/eusart.c: 238:         EUSART_ErrorHandler();
 14435  0998  0021               	movlb	1	; select bank1
 14436  0999  0845               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
 14437  099A  008A               	movwf	10
 14438  099B  0844               	movf	_EUSART_ErrorHandler^(0+128),w
 14439  099C  000A               	callw
 14440  099D  3189               	pagesel	$
 14441                           
 14442                           ;mcc_generated_files/eusart.c: 239:     } else {
 14443  099E  0008               	return
 14444  099F                     i1l4921:	
 14445                           
 14446                           ;mcc_generated_files/eusart.c: 240:         EUSART_RxDataHandler();
 14447  099F  3196  2689         	fcall	_EUSART_RxDataHandler
 14448  09A1  0008               	return
 14449  09A2                     __end_of_EUSART_Receive_ISR:	
 14450                           
 14451                           	psect	text99
 14452  1489                     __ptext99:	
 14453 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 14454 ;; Defined at:
 14455 ;;		line 258 in file "mcc_generated_files/eusart.c"
 14456 ;; Parameters:    Size  Location     Type
 14457 ;;		None
 14458 ;; Auto vars:     Size  Location     Type
 14459 ;;		None
 14460 ;; Return value:  Size  Location     Type
 14461 ;;                  1    wreg      void 
 14462 ;; Registers used:
 14463 ;;		None
 14464 ;; Tracked objects:
 14465 ;;		On entry : 0/0
 14466 ;;		On exit  : 0/0
 14467 ;;		Unchanged: 0/0
 14468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14469 ;;      Params:         0       0       0       0       0       0       0       0
 14470 ;;      Locals:         0       0       0       0       0       0       0       0
 14471 ;;      Temps:          0       0       0       0       0       0       0       0
 14472 ;;      Totals:         0       0       0       0       0       0       0       0
 14473 ;;Total ram usage:        0 bytes
 14474 ;; Hardware stack levels used:    1
 14475 ;; This function calls:
 14476 ;;		Nothing
 14477 ;; This function is called by:
 14478 ;;		_EUSART_Initialize
 14479 ;;		_EUSART_Receive_ISR
 14480 ;; This function uses a non-reentrant model
 14481 ;;
 14482                           
 14483                           
 14484                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 14485  1489                     _EUSART_DefaultOverrunErrorHandler:	
 14486                           
 14487                           ;mcc_generated_files/eusart.c: 261:     RCSTAbits.CREN = 0;
 14488                           
 14489                           ;incstack = 0
 14490                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 14491  1489  0023               	movlb	3	; select bank3
 14492  148A  121D               	bcf	29,4	;volatile
 14493                           
 14494                           ;mcc_generated_files/eusart.c: 262:     RCSTAbits.CREN = 1;
 14495  148B  161D               	bsf	29,4	;volatile
 14496  148C  0008               	return
 14497  148D                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 14498                           
 14499                           	psect	text100
 14500  1475                     __ptext100:	
 14501 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 14502 ;; Defined at:
 14503 ;;		line 256 in file "mcc_generated_files/eusart.c"
 14504 ;; Parameters:    Size  Location     Type
 14505 ;;		None
 14506 ;; Auto vars:     Size  Location     Type
 14507 ;;		None
 14508 ;; Return value:  Size  Location     Type
 14509 ;;                  1    wreg      void 
 14510 ;; Registers used:
 14511 ;;		None
 14512 ;; Tracked objects:
 14513 ;;		On entry : 0/0
 14514 ;;		On exit  : 0/0
 14515 ;;		Unchanged: 0/0
 14516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14517 ;;      Params:         0       0       0       0       0       0       0       0
 14518 ;;      Locals:         0       0       0       0       0       0       0       0
 14519 ;;      Temps:          0       0       0       0       0       0       0       0
 14520 ;;      Totals:         0       0       0       0       0       0       0       0
 14521 ;;Total ram usage:        0 bytes
 14522 ;; Hardware stack levels used:    1
 14523 ;; This function calls:
 14524 ;;		Nothing
 14525 ;; This function is called by:
 14526 ;;		_EUSART_Initialize
 14527 ;;		_EUSART_Receive_ISR
 14528 ;; This function uses a non-reentrant model
 14529 ;;
 14530                           
 14531                           
 14532                           ;psect for function _EUSART_DefaultFramingErrorHandler
 14533  1475                     _EUSART_DefaultFramingErrorHandler:	
 14534                           
 14535                           ;incstack = 0
 14536                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 14537  1475  0008               	return
 14538  1476                     __end_of_EUSART_DefaultFramingErrorHandler:	
 14539                           
 14540                           	psect	text101
 14541  1477                     __ptext101:	
 14542 ;; *************** function _EUSART_DefaultErrorHandler *****************
 14543 ;; Defined at:
 14544 ;;		line 266 in file "mcc_generated_files/eusart.c"
 14545 ;; Parameters:    Size  Location     Type
 14546 ;;		None
 14547 ;; Auto vars:     Size  Location     Type
 14548 ;;		None
 14549 ;; Return value:  Size  Location     Type
 14550 ;;                  1    wreg      void 
 14551 ;; Registers used:
 14552 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14553 ;; Tracked objects:
 14554 ;;		On entry : 0/0
 14555 ;;		On exit  : 0/0
 14556 ;;		Unchanged: 0/0
 14557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14558 ;;      Params:         0       0       0       0       0       0       0       0
 14559 ;;      Locals:         0       0       0       0       0       0       0       0
 14560 ;;      Temps:          0       0       0       0       0       0       0       0
 14561 ;;      Totals:         0       0       0       0       0       0       0       0
 14562 ;;Total ram usage:        0 bytes
 14563 ;; Hardware stack levels used:    1
 14564 ;; Hardware stack levels required when called:    1
 14565 ;; This function calls:
 14566 ;;		_EUSART_RxDataHandler
 14567 ;; This function is called by:
 14568 ;;		_EUSART_Initialize
 14569 ;;		_EUSART_Receive_ISR
 14570 ;; This function uses a non-reentrant model
 14571 ;;
 14572                           
 14573                           
 14574                           ;psect for function _EUSART_DefaultErrorHandler
 14575  1477                     _EUSART_DefaultErrorHandler:	
 14576                           
 14577                           ;mcc_generated_files/eusart.c: 267:     EUSART_RxDataHandler();
 14578                           
 14579                           ;incstack = 0
 14580                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14581  1477  3196  2689         	fcall	_EUSART_RxDataHandler
 14582  1479  0008               	return
 14583  147A                     __end_of_EUSART_DefaultErrorHandler:	
 14584                           
 14585                           	psect	text102
 14586  1689                     __ptext102:	
 14587 ;; *************** function _EUSART_RxDataHandler *****************
 14588 ;; Defined at:
 14589 ;;		line 246 in file "mcc_generated_files/eusart.c"
 14590 ;; Parameters:    Size  Location     Type
 14591 ;;		None
 14592 ;; Auto vars:     Size  Location     Type
 14593 ;;		None
 14594 ;; Return value:  Size  Location     Type
 14595 ;;                  1    wreg      void 
 14596 ;; Registers used:
 14597 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14598 ;; Tracked objects:
 14599 ;;		On entry : 0/0
 14600 ;;		On exit  : 0/0
 14601 ;;		Unchanged: 0/0
 14602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14603 ;;      Params:         0       0       0       0       0       0       0       0
 14604 ;;      Locals:         0       0       0       0       0       0       0       0
 14605 ;;      Temps:          1       0       0       0       0       0       0       0
 14606 ;;      Totals:         1       0       0       0       0       0       0       0
 14607 ;;Total ram usage:        1 bytes
 14608 ;; Hardware stack levels used:    1
 14609 ;; This function calls:
 14610 ;;		Nothing
 14611 ;; This function is called by:
 14612 ;;		_EUSART_Receive_ISR
 14613 ;;		_EUSART_DefaultErrorHandler
 14614 ;; This function uses a non-reentrant model
 14615 ;;
 14616                           
 14617                           
 14618                           ;psect for function _EUSART_RxDataHandler
 14619  1689                     _EUSART_RxDataHandler:	
 14620                           
 14621                           ;mcc_generated_files/eusart.c: 248:     eusartRxBuffer[eusartRxHead++] = RCREG;
 14622                           
 14623                           ;incstack = 0
 14624                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14625  1689  0023               	movlb	3	; select bank3
 14626  168A  0819               	movf	25,w	;volatile
 14627  168B  00F0               	movwf	??_EUSART_RxDataHandler
 14628  168C  087C               	movf	_eusartRxHead,w
 14629  168D  3EA8               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 14630  168E  0086               	movwf	6
 14631  168F  0187               	clrf	7
 14632  1690  0870               	movf	??_EUSART_RxDataHandler,w
 14633  1691  0081               	movwf	1
 14634  1692  3001               	movlw	1
 14635  1693  00F0               	movwf	??_EUSART_RxDataHandler
 14636  1694  0870               	movf	??_EUSART_RxDataHandler,w
 14637  1695  07FC               	addwf	_eusartRxHead,f	;volatile
 14638                           
 14639                           ;mcc_generated_files/eusart.c: 249:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 14640  1696  3008               	movlw	8
 14641  1697  027C               	subwf	_eusartRxHead,w	;volatile
 14642  1698  1803               	btfsc	3,0
 14643                           
 14644                           ;mcc_generated_files/eusart.c: 250:     {;mcc_generated_files/eusart.c: 251:         eus
      +                          artRxHead = 0;
 14645  1699  01FC               	clrf	_eusartRxHead	;volatile
 14646                           
 14647                           ;mcc_generated_files/eusart.c: 253:     eusartRxCount++;
 14648  169A  3001               	movlw	1
 14649  169B  00F0               	movwf	??_EUSART_RxDataHandler
 14650  169C  0870               	movf	??_EUSART_RxDataHandler,w
 14651  169D  0020               	movlb	0	; select bank0
 14652  169E  07E5               	addwf	_eusartRxCount,f	;volatile
 14653  169F  0008               	return
 14654  16A0                     __end_of_EUSART_RxDataHandler:	
 14655  007E                     btemp	set	126	;btemp
 14656  007E                     int$flags	set	126
 14657  007E                     wtemp0	set	126


Data Sizes:
    Strings     58
    Constant    57
    Data        40
    BSS         142
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     51      79
    BANK1            80      2      59
    BANK2            80      0      75
    BANK3            80      0      32
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    Button_Service$2576$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service$2576	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S2254_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    memcpy@d1	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    memcpy@s1	PTR const void  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 48
		 -> mtouch_button_init(CODE[48]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update_Helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Tick_helper@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_Service@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    sp__memcpy	PTR void  size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 48
		 -> mtouch_button(BANK2[48]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonReleasedCallback(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3069,)void  size(2) Largest target is 1
		 -> myButtonPressedCallback(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibratAcqTime@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Scanfrequency_Evaluation@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_autoCalibration@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acq_ExecutePacket@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_loadADCSettings@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_postAcquisitionProcess@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Acquisition@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_getScanGroupIndex@sensor	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    Sensor_Service@sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    S113$sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc2	PTR struct . size(1) Largest target is 27
		 -> mtouch_sensor(BANK2[27]), 

    S113$sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    sensor_scan_group.sensor_adc1	PTR struct . size(1) Largest target is 27
		 -> NULL(NULL[0]), mtouch_sensor(BANK2[27]), 

    callback_sampled	PTR FTN(enum E2854,)void  size(2) Largest target is 1
		 -> Sensor_DefaultCallback(), 


Critical Paths under _main in COMMON

    _vfpfcnvrt->_fputc
    _pad->_fputc
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_InitializeAll->_memcpy
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _Sensor_RawSample_Update->_Sensor_getScanGroupIndex
    _Sensor_Acquisition->_Sensor_Acq_ExecutePacket
    _Sensor_postAcquisitionProcess->_Sensor_getScanGroupIndex
    _Sensor_postAcquisitionProcess->_abs
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_Sensor_autoCalibration
    _Sensor_loadADCSettings->_Sensor_isCalibrated
    _Sensor_loadADCSettings->_Sensor_isCalibratingAcqTime
    _Sensor_autoCalibration->_Sensor_getScanGroupIndex
    _Sensor_autoCalibration->_abs
    _MTOUCH_Sensor_wasSampled->___bmul
    _MTOUCH_Sensor_isCalibrated->___bmul
    _Button_State_Pressed->_MTOUCH_Button_Initialize
    _Button_State_NotPressed->_MTOUCH_Button_Initialize
    _myButtonPressedCallback->_LED_PROCESS
    _myButtonPressedCallback->_RELAY_PROCESS
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Calibrate->___bmul
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _DATA_PROCESS->_LED_PROCESS
    _DATA_PROCESS->_RELAY_PROCESS

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_check_message
    _update_state->_printf
    _check_message->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_ctoa
    _ctoa->_pad
    _pad->_fputs
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Initializing
    _Button_State_Initializing->_Button_Baseline_Initialize

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   46601
                                              0 BANK1      2     2      0
                       _DATA_PROCESS
                        _EUSART_Read
                 _EUSART_is_rx_ready
                        _LED_PROCESS
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
            _MTOUCH_Button_isPressed
            _MTOUCH_Service_Mainloop
                      _RELAY_PROCESS
                  _SYSTEM_Initialize
                         _check_data
                      _check_message
                             _printf
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         0     0      0    6027
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_message                                        3     3      0    6089
                                             48 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     4      4    6027
                                             40 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    4956
                                             32 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    4521
                                             23 BANK0      9     7      2
                               _ctoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _ctoa                                                 8     6      2    3015
                                             17 BANK0      6     4      2
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    2771
                                              8 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     123
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1226
                                              0 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3     834
                                              4 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      66
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _check_data                                           3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    4468
                  _EUSART_Initialize
                  _MTOUCH_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3978
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          2     2      0    2387
                                              9 COMMON     2     2      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             2     2      0    2288
                                              7 COMMON     2     2      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          2     2      0    1435
                                             11 COMMON     1     1      0
                                              0 BANK0      1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     6      4     424
                                              1 COMMON    10     6      4
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              1     1      0   23594
                                             40 BANK0      1     1      0
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      23
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     189
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   2     2      0     189
                                              4 COMMON     2     2      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   3     3      0     121
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              2 COMMON     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              2     2      0   14526
                                             38 BANK0      2     2      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       7     7      0   14427
                                             31 BANK0      7     7      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
                   _Sensor_isEnabled
                  _Sensor_setSampled
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     3      0     410
                                              5 COMMON     3     3      0
           _Sensor_getScanGroupIndex
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1     106
                                              1 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   4     3      1   13171
                                             27 BANK0      4     3      1
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                    _Sensor_isActive
                _Sensor_isCalibrated
      _Sensor_postAcquisitionProcess
 ---------------------------------------------------------------------------------
 (5) _Sensor_postAcquisitionProcess                        5     5      0    1297
                                              5 COMMON     5     5      0
           _Sensor_getScanGroupIndex
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (6) _Sensor_setInactive                                   1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Sensor_setActive                                     1     1      0      55
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     13    12      1    5745
                                             14 BANK0     13    12      1
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                            15    14      1    5202
                                             11 COMMON     1     0      1
                                              0 BANK0     14    14      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
                    _Sensor_isActive
                _Sensor_isCalibrated
                   _Sensor_isEnabled
             _Sensor_loadADCSettings
            _TMR2_LoadPeriodRegister
                    _TMR2_StartTimer
                     _TMR2_StopTimer
                                _abs
 ---------------------------------------------------------------------------------
 (7) _TMR2_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_LoadPeriodRegister                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_loadADCSettings                               8     7      1     958
                                              2 COMMON     8     7      1
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     1      0     187
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_isEnabled                                     2     2      0     209
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isActive                                      1     1      0     143
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _Sensor_autoCalibration                               6     6      0    1482
                                              5 COMMON     6     6      0
           _Sensor_getScanGroupIndex
        _Sensor_isCalibratingAcqTime
          _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
                                _abs
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     522
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibrated                                 1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_setCalibratAcqTime                            1     1      0     110
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Sensor_isCalibratingAcqTime                          1     1      0      88
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_getScanGroupIndex                             4     4      0     233
                                              1 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             2     2      0    8700
                                             13 BANK0      2     2      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    8601
                                              9 BANK0      4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             2     2      0     692
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 3     2      1    1437
                                              4 BANK0      3     2      1
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
           _myButtonReleasedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonReleasedCallback                             1     0      1     150
                                              4 COMMON     1     0      1
            _MTOUCH_Button_isPressed
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_isPressed                              2     2      0      44
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              3     2      1    1831
                                              4 BANK0      3     2      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
            _myButtonPressedCallback *
 ---------------------------------------------------------------------------------
 (5) _myButtonPressedCallback                              1     0      1     163
                                              4 COMMON     1     0      1
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             4     4      0     912
                                              7 COMMON     4     4      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              2     2      0     723
                                              5 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              4 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1401
                                              4 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              1 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     862
                                              9 COMMON     1     1      0
                                              0 BANK0      4     4      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                1     1      0    1110
                                              0 BANK0      1     1      0
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         3     3      0    1012
                                              9 COMMON     3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          4     2      2     723
                                              5 COMMON     4     2      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) ___bmul                                               4     3      1     661
                                              1 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             15    15      0     213
                                              1 COMMON    10    10      0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          2     2      0      24
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DATA_PROCESS                                         3     3      0      66
                                              4 COMMON     3     3      0
                        _LED_PROCESS
                      _RELAY_PROCESS
 ---------------------------------------------------------------------------------
 (1) _RELAY_PROCESS                                        3     3      0      22
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _LED_PROCESS                                          3     3      0      22
                                              1 COMMON     3     3      0
                      _LED_0_SetHigh
                       _LED_0_SetLow
                      _LED_1_SetHigh
                       _LED_1_SetLow
                      _LED_2_SetHigh
                       _LED_2_SetLow
 ---------------------------------------------------------------------------------
 (7) _LED_2_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_2_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_1_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetLow                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _LED_0_SetHigh                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DATA_PROCESS
     _LED_PROCESS
       _LED_0_SetHigh
       _LED_0_SetLow
       _LED_1_SetHigh
       _LED_1_SetLow
       _LED_2_SetHigh
       _LED_2_SetLow
     _RELAY_PROCESS
   _EUSART_Read
   _EUSART_is_rx_ready
   _LED_PROCESS
     _LED_0_SetHigh
     _LED_0_SetLow
     _LED_1_SetHigh
     _LED_1_SetLow
     _LED_2_SetHigh
     _LED_2_SetLow
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Button_isPressed
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonPressedCallback *
             _LED_PROCESS
               _LED_0_SetHigh
               _LED_0_SetLow
               _LED_1_SetHigh
               _LED_1_SetLow
               _LED_2_SetHigh
               _LED_2_SetLow
             _RELAY_PROCESS
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
               ___bmul
           _myButtonReleasedCallback *
             _MTOUCH_Button_isPressed
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _MTOUCH_Sensor_isCalibrated *
           ___bmul
         _MTOUCH_Sensor_wasSampled *
           ___bmul
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_autoCalibration
               _Sensor_getScanGroupIndex
               _Sensor_isCalibratingAcqTime
               _Sensor_setCalibratAcqTime
               _Sensor_setCalibrated
               _abs
             _Sensor_isActive
             _Sensor_isCalibrated
             _Sensor_isEnabled
             _Sensor_loadADCSettings
               _Sensor_isCalibrated
               _Sensor_isCalibratingAcqTime
             _TMR2_LoadPeriodRegister
             _TMR2_StartTimer
             _TMR2_StopTimer
             _abs
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_autoCalibration
                 _Sensor_getScanGroupIndex
                 _Sensor_isCalibratingAcqTime
                 _Sensor_setCalibratAcqTime
                 _Sensor_setCalibrated
                 _abs
               _Sensor_isActive
               _Sensor_isCalibrated
               _Sensor_isEnabled
               _Sensor_loadADCSettings
                 _Sensor_isCalibrated
                 _Sensor_isCalibratingAcqTime
               _TMR2_LoadPeriodRegister
               _TMR2_StartTimer
               _TMR2_StopTimer
               _abs
           _Sensor_isActive
           _Sensor_isCalibrated
           _Sensor_postAcquisitionProcess
             _Sensor_getScanGroupIndex
             _Sensor_isEnabled
             _Sensor_setActive
             _Sensor_setInactive
             _abs
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _Sensor_getScanGroupIndex
         _Sensor_isEnabled
         _Sensor_setSampled
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _RELAY_PROCESS
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
             ___bmul
           _MTOUCH_Sensor_Enable
             ___bmul
           _Sensor_Sampled_Reset
           ___bmul
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _check_data
   _check_message
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _EUSART_Write
             _fputs
               _fputc
                 _putch
                   _EUSART_Write
             _strlen
         _fputc
           _putch
             _EUSART_Write
   _update_state
     _printf
       _vfprintf
         _vfpfcnvrt
           _ctoa
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     102       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     33      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      2      3B       8       73.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4B      10       93.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      20      12       40.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     102      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Aug 12 14:03:13 2019

                       ?_EUSART_SetRxInterruptHandler 0071                       Sensor_loadADCSettings@adc_index 0072  
                        ?_MTOUCH_Sensor_RawSample_Get 0075                                          _update_state 0BF7  
                                      ___bmul@product 0073                                          ?_LED_PROCESS 0070  
                                         __CFG_CP$OFF 0000                               ?_Sensor_autoCalibration 0070  
                          __end_of_Sensor_setInactive 14FF                             _Sensor_setCalibratAcqTime 1587  
                                         __CFG_LVP$ON 0000                                                   l303 043F  
                                                 l305 0456                                                   l257 04AD  
                                                 l522 071F                                                   l293 039F  
                                                 l286 039C                                                   l288 0398  
                                                 l742 179D                                                   _GIE 005F  
                                                 _PR2 001B                                                   _abs 16A0  
                              ??_EUSART_RxDataHandler 0070                                                   _pad 0B52  
                      ?_EUSART_SetFramingErrorHandler 0071                               ?_Sensor_loadADCSettings 0072  
                                     _TMR2_Initialize 150F                                          __CFG_BORV$LO 0000  
                                       DATA_PROCESS@x 0076                                                   wreg 0009  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0072                       ?_MTOUCH_Sensor_Sampled_ResetAll 0070  
                    __size_of_MTOUCH_Sensor_SampleAll 0016                        Sensor_getScanGroupIndex@sensor 0073  
                   __size_of_MTOUCH_Sensor_Initialize 0015                             ?_MTOUCH_Sensor_Initialize 0070  
                                        ?_EUSART_Read 0070                                                  l1210 0B04  
                                                ?_abs 0071                                                  l1204 0ADD  
                                                l1028 0C50                                                  l1302 0B8A  
                                                l1303 0B96                                                  l1162 0ABF  
                                                l1154 0ABA                                                  l1147 0DE1  
                                                l1190 0AD3                                                  l1183 0ACE  
                                                l1176 0AC9                                                  l1169 0AC4  
                                                l1197 0AD8                                                  l1299 0B6A  
                                                l5005 09A8                                                  l5033 0602  
                                                l4313 0F29                                                  l6001 165B  
                                                l4171 0D77                                                  l5051 062A  
                                                l4331 17E8                                                  l4243 0A73  
                                                l4181 0DA4                                                  l4173 0D80  
                                                l5045 061C                                                  l4237 0A66  
                                                l6101 05C9                                                  l4183 0DAD  
                                                l4175 0D89                                                  l5063 0646  
                                                l5039 060E                                                  l4335 17EF  
                                                l4239 0A68                                                  l4185 0DB6  
                                                l4177 0D92                                                  l5081 0670  
                                                l5057 0638                                                  l4425 08AD  
                                                l6121 156B                                                  l3801 09DD  
                                                l6201 094A                                                  l4179 0D9B  
                                                l5075 0662                                                  l4339 17F7  
                                                l6035 0CC3                                                  l6051 06DD  
                                                l4611 1674                                                  l6019 08C4  
                                                l6107 05D4                                                  l6203 0967  
                                                l4189 0DBF                                                  l5085 0675  
                                                l5069 0654                                                  l6029 154A  
                                                l6037 0CC7                                                  l6221 165F  
                                                l3805 0A00                                                  ?_pad 0028  
                                                l4199 0AE2                                                  l4471 0EB9  
                                                l6151 077E                                                  l6135 1747  
                                                l3735 1793                                                  l6311 0C14  
                                                l6303 0BF8                                                  l5089 0678  
                                                l4473 0EC1                                                  l6057 0716  
                                                l6241 1598                                                  l3761 08F7  
                                                l6161 079F                                                  l6145 076F  
                                                l6313 0C1B                                                  l6305 0BFF  
                                                l6321 0C30                                                  l5611 15B8  
                                                l6067 0D37                                                  l3771 090A  
                                                l3851 04A9                                                  l6155 078F  
                                                l6227 1668                                                  l3915 16D4  
                                                l6091 05A2                                                  l6315 0C22  
                                                l6307 0C06                                                  l4477 0ED5  
                                                l3765 08F9                                                  l3829 15D6  
                                                l3749 17B2                                                  l3917 16E0  
                                                l6333 0871                                                  l6317 0C29  
                                                l6309 0C0D                                                  l5615 15BE  
                                                l3943 1700                                                  l3759 08E8  
                                                l3839 1562                                                  l3871 052D  
                                                l5703 0366                                                  l6167 07B1  
                                                l6263 1728                                                  l5607 0823  
                                                l6193 0BE3                                                  l3865 0507  
                                                l5801 046C                                                  l5713 0379  
                                                l5641 02FB                                                  l6169 07D4  
                                                l6097 05C3                                                  l6329 086F  
                                                l6513 019D                                                  l6441 0096  
                                                l3891 0FAF                                                  l5651 0319  
                                                l6339 0882                                                  l6603 02C9  
                                                l6531 01C9                                                  l3869 051A  
                                                l5813 0492                                                  l5653 032E  
                                                l5901 0E42                                                  l6509 0195  
                                                l6517 01A2                                                  l4871 17B5  
                                                l5807 0480                                                  l5671 0321  
                                                l6447 009E                                                  l6801 0AEA  
                                                l3897 0FE1                                                  l3889 0FAB  
                                                l5761 041C                                                  l5753 0402  
                                                l5737 03A2                                                  l5729 0393  
                                                l5649 0312                                                  l6803 0DC7  
                                                l5931 0B41                                                  l5683 0330  
                                                l5659 031B                                                  l4955 09A4  
                                                l6459 00C2                                                  l5837 16CC  
                                                l5765 0436                                                  l5749 03E7  
                                                l5845 0B60                                                  l6581 0294  
                                                l6573 0278                                                  l6485 012C  
                                                l5687 033A                                                  l5855 0B6C  
                                                l6575 027C                                                  l5793 045A  
                                                l5961 0C5F                                                  l5849 0B68  
                                                l5937 07E2                                                  l6585 02A3  
                                                l6593 02B4                                                  l5939 07E8  
                                                l5797 0463                                                  l5981 0C92  
                                                l5973 0C7A                                                  l5895 0E16  
                                                l5887 0E12                                                  l5879 0DFF  
                                                l5967 0C67                                                  l4999 09A6  
                                                l6791 088A                                                  l5897 0E29  
                                                l5985 0CA2                                                  l5977 0C82  
                                                l6793 09B0                                                  l6795 07BE  
                                                l5989 0CAB                                                  l6797 07C3  
                                                l6789 0C36                                                  l6799 0680  
                                                STR_1 1800                                                  STR_2 1809  
                                                STR_3 1814                                                  STR_4 1819  
                                                STR_5 181E                                                  STR_6 1823  
                                                STR_7 1828                                                  STR_8 182D  
                                                STR_9 1832                         ?_Button_Reading_Update_Helper 0070  
                                                _LATA 010C                                                  _LATB 010D  
                                                _LATC 010E                                                  u2305 0542  
                                                u2235 09FE                                                  u2325 0F8E  
                                                u2430 16FE                                                  u2335 0F98  
                                                u3240 0EA0                                                  u2425 16EF  
                                                u3235 0E68                                                  u2195 16A9  
                                                u2355 0FD2                                                  u3245 0E9C  
                                                u3455 1677                                                  u5095 0BA7  
                                                u4725 0E30                                                  u2975 0EF1  
                                                u5607 0107                                                  u2985 0F37  
                                                u4745 0A0D                                                  u4665 0B76  
                                                u5617 0114                                                  u4755 0936  
                                                u5707 0214                                                  u5627 013B  
                                                u5717 0221                                                  u5637 0148  
                                                u4935 0CF0                                                  u5727 022E  
                                                u5647 0155                                                  u5567 00D3  
                                                u5737 023B                                                  u5657 0162  
                                                u5577 00E0                                                  u5747 0248  
                                                u5667 016F                                                  u5587 00ED  
                                      ??_LED_0_SetLow 0071                                                  u4965 06F3  
                                                u5757 0255                                                  u5677 017C  
                                                u5597 00FA                                                  u5687 01FA  
                                                u5697 0207                            Button_State_Pressed@button 0024  
                                                _TMR2 001A                                 __end_of_check_message 0893  
                                                _WPUA 020C                                                  _WPUB 020D  
                   __size_of_Sensor_Acq_ExecutePacket 01CA                                        ??_LED_1_SetLow 0071  
                            _Sensor_getScanGroupIndex 08E6                             ?_Sensor_Acq_ExecutePacket 007B  
                                        __CFG_WRT$OFF 0000                                        ??_LED_2_SetLow 0071  
                                  _MTOUCH_needReburst 0002                                                  abs@a 0071  
                                                _dbuf 01A0                                                  _ctoa 07D7  
                                                _main 006D                  __size_of_MTOUCH_Button_InitializeAll 001C  
                                                _prec 00BE                                                  _nout 00BC  
                                                pad@i 002C                                                  pad@p 0029  
                                                fsr0h 0005                                                  fsr1h 0007  
                                                indf0 0000                                                  fsr0l 0004  
                                                indf1 0001                                                  fsr1l 0006  
                                                pad@w 002E                  __size_of_MTOUCH_Sensor_InitializeAll 000E  
                                                btemp 007E                                                  start 0023  
                                   ___bmul@multiplier 0074                                         __CFG_MCLRE$ON 0000  
                                 ?_MTOUCH_needReburst 0070                        __end_of_Sensor_autoCalibration 1000  
__end_ofSensor_Scanfrequency_Evaluation@frequency_hop 1814          Sensor_Scanfrequency_Evaluation@frequency_hop 180F  
                                       __CFG_LPBOR$ON 0000                              _myButtonReleasedCallback 1772  
                            ?_MTOUCH_Service_Mainloop 0070                      __size_of_MTOUCH_Button_isPressed 001B  
                       __size_of_Button_State_Pressed 0066                                                 ??_abs 0073  
                                               ??_pad 002B                           ?_Button_Baseline_Initialize 0070  
               Sensor_postAcquisitionProcess@adcIndex 0078                         ??_MTOUCH_Sensor_RawSample_Get 0077  
                       Sensor_RawSample_Update@sensor 0077                         myButtonPressedCallback@button 0074  
                           __size_of_Sensor_isEnabled 0011                                         ?_EUSART_Write 0070  
                      __size_of_OSCILLATOR_Initialize 0006                         __end_of_OSCILLATOR_Initialize 14E3  
   Sensor_Scanfrequency_Evaluation@best_packet_sample 0036                   __end_of_Sensor_isCalibratingAcqTime 1520  
                         _Sensor_isCalibratingAcqTime 1517                                                 ?_ctoa 0031  
                                               ?_main 0070                                                 STR_10 1837  
                                               STR_11 1840                                         __CFG_WDTE$OFF 0000  
                      __end_of_Sensor_loadADCSettings 054F                                                 _T2CON 001C  
                             __size_of_Button_Service 0055                                       ??_LED_0_SetHigh 0071  
                                               i1l840 0015                                                 i1l754 081D  
                                               i1l845 0021                                                 _RCREG 0199  
                                               _RCSTA 019D                                          vfpfcnvrt@fmt 0037  
                                               _TRISA 008C                                                 _TRISB 008D  
                                               _TRISC 008E                                       ??_LED_1_SetHigh 0071  
                                               _TXREG 019A                                                 _TXSTA 019E  
                     __size_of_Button_DefaultCallback 0001                                       ??_LED_2_SetHigh 0071  
                                ??_MTOUCH_needReburst 0071                       __size_of_Sensor_DefaultCallback 0001  
                                               _blink 005F                                                 _flags 00C0  
                             __size_of_Sensor_Service 0095                 __end_of_MTOUCH_Sensor_Scan_Initialize 15B6  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0010                         _MTOUCH_Sensor_Scan_Initialize 15A6  
                                      _WDT_Initialize 14A5                               Sensor_setSampled@sensor 0071  
                                               _fputc 09D4                                                 _fputs 081F  
                                        LED_PROCESS@x 0073                                                 pad@fp 0030  
                                               _width 0057                                                 ctoa@c 0031  
                                               _putch 14AE                                                 ctoa@w 0034  
                    __size_of_Button_State_NotPressed 00A4                                                 pclath 000A  
                                _Sensor_Sampled_Reset 1507                                                 status 0003  
                                               wtemp0 007E                                       _TMR2_StartTimer 147D  
                    __size_of_TMR2_LoadPeriodRegister 0005                             __size_of_Sensor_setActive 0008  
                              Sensor_isEnabled@sensor 0072                                       __initialization 0025  
                                        __end_of_ctoa 0800                                          __end_of_main 02D5  
                                _Sensor_setCalibrated 154E                                 __size_of_DATA_PROCESS 00A7  
                                      ??_EUSART_Write 0071                               __end_of_TMR2_Initialize 1517  
                         ?_INTERRUPT_InterruptManager 0070                        ??_EUSART_SetRxInterruptHandler 0073  
                    __end_of_MTOUCH_Button_Initialize 0A3F                                                ??_ctoa 0033  
                                              ??_main 00D9                               _MTOUCH_Sensor_Calibrate 15E9  
                           Sensor_Service@sensor_adc1 0044                             Sensor_Service@sensor_adc2 0045  
                             ??_Button_Reading_Update 007C                  MTOUCH_Sensor_Sampled_ResetAll@sensor 0073  
                            ?_Button_Deviation_Update 0070                                __end_of_WDT_Initialize 14A9  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0077  
           __end_of_EUSART_DefaultFramingErrorHandler 1476            __size_of_EUSART_DefaultFramingErrorHandler 0001  
                 ??_EUSART_DefaultFramingErrorHandler 0070                    ?_EUSART_DefaultFramingErrorHandler 0070  
                   _EUSART_DefaultFramingErrorHandler 1475                            _EUSART_OverrunErrorHandler 00C6  
                __size_of_MTOUCH_Sensor_RawSample_Get 0018                                                ?_fputc 0074  
                                              ?_fputs 0020                                                _APFCON 011D  
                                              _ANSELA 018C                                                ?_putch 0070  
                                              _ANSELB 018D                                                _ANSELC 018E  
                          __end_of_EUSART_is_rx_ready 147D                                                _BORCON 0116  
                                              i1l4911 0983                                                i1l4921 099F  
                                              i1l4917 0991                                 ?_Sensor_Sampled_Reset 0070  
                                              _OSCCON 0099                                                _SPBRGH 019C  
                                              _SPBRGL 019B                                                _WDTCON 0097  
                   MTOUCH_Button_InitializeAll@button 0020                                          _DATA_PROCESS 05F7  
                      ??_Button_Reading_Update_Helper 0079                                _Button_DefaultCallback 1476  
                     __end_of_MTOUCH_Service_Mainloop 1739                                        __CFG_PWRTE$OFF 0000  
                                 _Sensor_isCalibrated 1520                                _Sensor_DefaultCallback 0800  
                                        vfprintf@cfmt 0046                                         _packet_sample 0053  
                                              ___bmul 15B6                                 ?_Sensor_setCalibrated 0070  
                        Sensor_DefaultCallback@sensor 0071                                        __CFG_STVREN$ON 0000  
                    __size_of_myButtonPressedCallback 0026                                   _EUSART_Transmit_ISR 0801  
                                              _memcpy 08BB                                                _rxData 0063  
                                __end_of_LED_0_SetLow 1495                      __end_of_MTOUCH_Button_ServiceAll 15A6  
                                __end_of_LED_1_SetLow 149D                                                _printf 15D8  
                                              pad@buf 0028                                  __size_of_LED_PROCESS 006D  
                                              ctoa@fp 0036                          Sensor_autoCalibration@sensor 007A  
                                __end_of_LED_2_SetLow 14A5                                                _strlen 16CF  
                                              fputc@c 0074                                                fputs@c 0024  
                                              fputs@i 0025                                                fputs@s 0027  
                             _MTOUCH_Sensor_SampleAll 165D                          Button_DefaultCallback@button 0074  
                                ?_Sensor_isCalibrated 0070                                       ?_WDT_Initialize 0070  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 0CAD  
                              __size_of_RELAY_PROCESS 004D                               ?_Button_Baseline_Update 0070  
                                    __end_of_vfprintf 0970                   Sensor_postAcquisitionProcess@sensor 0079  
                             __end_of_TMR2_StartTimer 1480                    __size_of_Sensor_setCalibratAcqTime 000F  
            __end_of_MTOUCH_Button_SetPressedCallback 14BF             __size_of_MTOUCH_Button_SetPressedCallback 0006  
                  ??_MTOUCH_Button_SetPressedCallback 0073                     ?_MTOUCH_Button_SetPressedCallback 0071  
                    _MTOUCH_Button_SetPressedCallback 14B9                              __size_of_Sensor_isActive 000E  
                                ?_EUSART_Transmit_ISR 0070                       MTOUCH_Sensor_RawSample_Get@name 0078  
                 Sensor_getScanGroupIndex@sensorGroup 0074                                  __size_of_EUSART_Read 0025  
                                   _SYSTEM_Initialize 160D                               __end_of__initialization 0069  
                 __size_of_Button_Baseline_Initialize 002E                        ?_MTOUCH_Sensor_Scan_Initialize 0070  
                     ??_Sensor_postAcquisitionProcess 0075                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 00CF                            __end_of_Button_Tick_helper 086C  
                                   _update_state_flag 005D                         MTOUCH_Sensor_Calibrate@sensor 0076  
                __end_of_EUSART_SetTxInterruptHandler 14DD                 __size_of_EUSART_SetTxInterruptHandler 0006  
                        _EUSART_SetTxInterruptHandler 14D7           Sensor_Acq_ExecutePacket@sensor1ForceEnabled 0024  
                                 ___bmul@multiplicand 0071                                        __pcstackCOMMON 0070  
                             _MTOUCH_Button_isPressed 16E7                                          __pidataBANK0 1486  
                                        __pidataBANK1 152A                                          __pidataBANK2 1702  
         __end_of_MTOUCH_Button_SetNotPressedCallback 14B9          __size_of_MTOUCH_Button_SetNotPressedCallback 0006  
               ??_MTOUCH_Button_SetNotPressedCallback 0073                  ?_MTOUCH_Button_SetNotPressedCallback 0071  
                 _MTOUCH_Button_SetNotPressedCallback 14B3                                   ??_SYSTEM_Initialize 007C  
                          __end_of_MTOUCH_Button_Tick 1689                                         __end_of_fputc 0A09  
                                       __end_of_fputs 0845                      __end_of_MTOUCH_Sensor_Initialize 1647  
                                       __end_of_putch 14B3                             ??_MTOUCH_Sensor_Calibrate 0075  
                                    _Sensor_isEnabled 15C7                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0EDF                              Sensor_setInactive@sensor 0071  
                                      _Button_Service 0BA2                      __end_of_Sensor_Acq_ExecutePacket 049F  
                          ?_Button_State_Initializing 0024                                  Button_Service@button 002C  
                                      _OPTION_REGbits 0095                                 ??_Sensor_isCalibrated 0071  
                          ??_Sensor_getScanGroupIndex 0071                                  _eusartRxStatusBuffer 00A0  
                      __end_of_Button_Baseline_Update 0F6E                   Sensor_Acq_ExecutePacket@sensor_adc1 002D  
                 Sensor_Acq_ExecutePacket@sensor_adc2 007B                              _MTOUCH_Button_Initialize 0A09  
                     ??_EUSART_SetOverrunErrorHandler 0073                                        _Sensor_Service 0742  
                             _Button_State_NotPressed 069E                         __size_of_MTOUCH_Sensor_Enable 0012  
                                  _Sensor_setInactive 14F7                                     _sensor_scan_group 183C  
                                             ??_fputc 0077                             __end_of_SYSTEM_Initialize 161F  
                                   _lowpowerActivated 006A                                               ??_fputs 0021  
                               ??_EUSART_Transmit_ISR 0070                      MTOUCH_Sensor_isCalibrated@sensor 0076  
                              ??_Sensor_Sampled_Reset 0071                                               ??_putch 0073  
                                          __pbssBANK0 0053                                            __pbssBANK1 00A0  
                                          __pbssBANK2 0120                                            __pbssBANK3 01A0  
                                          _check_data 09A2                                  __end_of_EUSART_Write 17B5  
                             _TMR2_LoadPeriodRegister 14A9                            ??_myButtonReleasedCallback 0075  
                        Sensor_loadADCSettings@sensor 0079                                   ?_Sensor_setInactive 0070  
                                    _Sensor_setActive 14EF                           __size_of_EUSART_Receive_ISR 0032  
                          __end_of_mtouch_button_init 1030                                     _last_touch_status 0059  
         Sensor_Acq_ExecutePacket@sensor2ForceEnabled 0025                                ??_Sensor_setCalibrated 0071  
                                          __pmaintext 006D                                         _RELAY_PROCESS 0AB8  
                                             ?___bmul 0071                         ?_EUSART_SetTxInterruptHandler 0071  
                    _EUSART_TxDefaultInterruptHandler 00CC                                               _AD1CON0 0711  
                                             _AD1CON2 0713                                               _AD1CON3 0714  
                                             _AD2CON0 0791                                               _AD2CON2 0793  
                                             _AD2CON3 0794                                               _AAD1CAP 0719  
                                             _AAD1GRD 0718                                               _AAD2GRD 0798  
                      MTOUCH_Sensor_wasSampled@sensor 0076                                            __pintentry 0004  
                              __end_of_Button_Service 0BF7                                               ?_memcpy 0071  
                                             _BAUDCON 019F                                             _AD1ACQCON 0717  
                 __end_of_MTOUCH_Button_InitializeAll 1755                           _MTOUCH_Button_InitializeAll 1739  
                                           _AD2ACQCON 0797                          ??_EUSART_DefaultErrorHandler 0071  
                 __end_of_MTOUCH_Sensor_InitializeAll 1578                           _MTOUCH_Sensor_InitializeAll 156A  
                           ??_MTOUCH_Sensor_SampleAll 0046                                               ?_printf 0048  
                     __end_of_Sensor_RawSample_Update 08BB                                  ??_Sensor_setInactive 0071  
                                             ?_strlen 0071                     __size_of_MTOUCH_Sensor_wasSampled 000F  
                           ?_MTOUCH_Sensor_wasSampled 0070                                         _eusartRxCount 0065  
                                           _AD1PRECON 0716                             Sensor_isCalibrated@sensor 0071  
                                           _AD2PRECON 0796                     __end_of_Button_State_Initializing 0D0F  
                              __end_of_Sensor_Service 07D7                               Sensor_Service@scanGroup 0042  
                            _MTOUCH_Button_ServiceAll 1596                             __end_of_sensor_scan_group 1840  
                                  __size_of_vfpfcnvrt 00A8                         __size_of_EUSART_RxDataHandler 0017  
                    __size_of_MTOUCH_Service_Mainloop 001C                          __end_of_Button_State_Pressed 0D75  
                             __size_of_TMR2_StopTimer 0003                              ??_EUSART_SetErrorHandler 0073  
                                    ?_TMR2_StartTimer 0070                      Button_Baseline_Initialize@button 0079  
                     Sensor_setCalibratAcqTime@sensor 0071                                  __size_of_MTOUCH_Tick 0003  
                 Sensor_loadADCSettings@addressOffset 0078                  __size_of_Sensor_isCalibratingAcqTime 0009  
               Sensor_Acq_ExecutePacket@ADCOMCON_temp 0021                             ??_MTOUCH_Button_isPressed 0071  
                                          _count_conf 00C2                                     ??_Sensor_isActive 0071  
                 __size_of_EUSART_DefaultErrorHandler 0003                                        ?_RELAY_PROCESS 0070  
               __end_of_Sensor_postAcquisitionProcess 0A77                __size_of_Sensor_postAcquisitionProcess 0038  
                       _Sensor_postAcquisitionProcess 0A3F                                 __size_of_LED_0_SetLow 0004  
                               __size_of_LED_1_SetLow 0004                               _myButtonPressedCallback 17DA  
                             Sensor_Acquisition@retry 003D                                       __size_of___bmul 0011  
                                         _AD1CON0bits 0711                                 __size_of_LED_2_SetLow 0004  
                      MTOUCH_Button_Initialize@button 007A                                           _AD2CON0bits 0791  
                                           ?_vfprintf 0040                                       ?_Button_Service 0070  
          Sensor_Scanfrequency_Evaluation@sensor_adc1 0031            Sensor_Scanfrequency_Evaluation@sensor_adc2 002E  
                                     __size_of_memcpy 002B                                               __ptext1 0BF7  
                                             __ptext2 086C                                               __ptext3 15D8  
                                             __ptext4 0941                                               __ptext5 054F  
                                             __ptext6 07D7                                               __ptext7 0B52  
                                             __ptext8 16CF                                               __ptext9 081F  
                              __size_of_check_message 0027                                       __size_of_printf 0011  
                         Button_Reading_Update@button 0020                                       __size_of_strlen 0018  
                            _MTOUCH_Sensor_Initialize 1632                                 _OSCILLATOR_Initialize 14DD  
                                           _T2CONbits 001C                                          __size_of_abs 0017  
                                        __size_of_pad 0050                             ??_Button_State_NotPressed 0025  
                                             _prcData 0062                                       ?_Sensor_Service 0070  
                               __end_of_LED_0_SetHigh 1491                              ??_PIN_MANAGER_Initialize 0071  
                      __size_of_Button_Reading_Update 000E                           __size_of_MTOUCH_needReburst 0002  
                               __end_of_LED_1_SetHigh 1499                         __end_of_Button_Reading_Update 154E  
                   MTOUCH_Sensor_InitializeAll@sensor 007A                              _Sensor_Acq_ExecutePacket 02D5  
                                    _callback_sampled 00D7                                 __end_of_LED_2_SetHigh 14A1  
                           ??_TMR2_LoadPeriodRegister 0071                       Sensor_RawSample_Update@adcIndex 0076  
                          __size_of_SYSTEM_Initialize 0012                                               clrloop0 14E4  
                                    _callback_pressed 00D5                        MTOUCH_Sensor_Initialize@sensor 0078  
                                end_of_initialization 0069                                           ?_check_data 0070  
                             ?_Button_DefaultCallback 0074                 __end_of_EUSART_SetOverrunErrorHandler 14D1  
              __size_of_EUSART_SetOverrunErrorHandler 0006                         _EUSART_SetOverrunErrorHandler 14CB  
                                             memcpy@d 007A                                               memcpy@n 0073  
                                             memcpy@s 0077                                               fputc@fp 0076  
                                        _LED_0_SetLow 1491                                               init_ram 14E9  
                                             fputs@fp 0020                                          _LED_1_SetLow 1499  
                                             initloop 14EA                                          _LED_2_SetLow 14A1  
                             ?_Sensor_DefaultCallback 0071                         Sensor_Acquisition@sensor_adc1 003E  
                       Sensor_Acquisition@sensor_adc2 003B                      __size_of_Button_Deviation_Update 0087  
                                   _EUSART_Initialize 0A77                          ??_MTOUCH_Sensor_isCalibrated 0075  
                                  ?_EUSART_Initialize 0070                                     __end_of_vfpfcnvrt 05F7  
                 __end_of_MTOUCH_Sensor_RawSample_Get 16CF                           _MTOUCH_Sensor_RawSample_Get 16B7  
                                           _RCSTAbits 019D                                    _EUSART_is_rx_ready 147A  
                                          ??_vfprintf 0043                                               strlen@a 0074  
                                             strlen@s 0075                                   ??_EUSART_Initialize 0073  
                                    ??_WDT_Initialize 0071                        ??_EUSART_SetTxInterruptHandler 0073  
                                 ?_EUSART_is_rx_ready 0070                                Sensor_setActive@sensor 0071  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 0034  
                       Button_Deviation_Update@button 0020                  Sensor_Acq_ExecutePacket@AD1CON2_temp 0022  
                               __size_of_EUSART_Write 0023              MTOUCH_Button_SetPressedCallback@callback 0071  
                          MTOUCH_Sensor_Enable@sensor 0076                  Sensor_Acq_ExecutePacket@AD2CON2_temp 0023  
                                 _callback_notPressed 006C                   __size_of_MTOUCH_Sensor_isCalibrated 0016  
                      __end_of_Button_DefaultCallback 1477                       __size_of_EUSART_SetErrorHandler 0006  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 0032                                    _sensor_globalFlags 0069  
                            __end_of_Sensor_isEnabled 15D8                            Sensor_setCalibrated@sensor 0071  
                      __end_of_Sensor_DefaultCallback 0801                      __end_of_myButtonReleasedCallback 1792  
                           __end_of_EUSART_Initialize 0AB8                                  ??_EUSART_is_rx_ready 0071  
                                       _check_message 086C                            _Sensor_loadADCSettings$562 0076  
                            ??_Sensor_autoCalibration 0075                                             _TXSTAbits 019E  
                                       _check_request 0060                                       ??_RELAY_PROCESS 0071  
                           ??_myButtonPressedCallback 0075                      __size_of_Sensor_RawSample_Update 0028  
                                  _Sensor_Acquisition 0C51                              ??_Sensor_loadADCSettings 0073  
                                       ?_update_state 0070                                         ??_LED_PROCESS 0071  
                                _Button_State_Pressed 0D0F                                        __end_of___bmul 15C7  
                  __end_of_EUSART_DefaultErrorHandler 147A                            _EUSART_DefaultErrorHandler 1477  
                                 ?_Sensor_Acquisition 003B                                           vfpfcnvrt@ap 0038  
                                         vfpfcnvrt@fp 003F                            ??_MTOUCH_Button_Initialize 0077  
         MTOUCH_Button_SetNotPressedCallback@callback 0071                       ??_MTOUCH_Sensor_Scan_Initialize 0071  
                      ?_Sensor_postAcquisitionProcess 0070                                          _EUSART_Write 1792  
                                 __size_of_check_data 0032                                    _Button_Tick_helper 0845  
                                      __end_of_memcpy 08E6                                ?_OSCILLATOR_Initialize 0070  
                                 MTOUCH_Button_Tick@i 0075                              __end_of_Sensor_setActive 14F7  
                    TMR2_LoadPeriodRegister@periodVal 0071                                        __end_of_printf 15E9  
                         ??_Button_State_Initializing 0025                                        __end_of_strlen 16E7  
                                 start_initialization 0025                               _MTOUCH_Service_Mainloop 171D  
                     __size_of_PIN_MANAGER_Initialize 001D                                    _MTOUCH_Button_Tick 1673  
                                 ?_Button_Tick_helper 0070                                           __end_of_abs 16B7  
                                         __end_of_pad 0BA2                                        _TMR2_StopTimer 1480  
                                       ??_EUSART_Read 0071          EUSART_SetRxInterruptHandler@interruptHandler 0071  
        EUSART_SetTxInterruptHandler@interruptHandler 0071                                           putch@txData 0073  
                                ??_Sensor_Acquisition 003C                                        ?_check_message 0070  
                                 ?_MTOUCH_Button_Tick 0070                       Button_State_Initializing@button 0024  
                      Sensor_autoCalibration@adcIndex 0079                        ?_EUSART_SetOverrunErrorHandler 0071  
                    __end_of_MTOUCH_Sensor_wasSampled 1587                                  ??_Button_Tick_helper 0071  
                        __end_of_MTOUCH_Sensor_Enable 160D                                           vfprintf@fmt 0040  
                                        _packet_noise 005B                                        ??_update_state 007C  
                          _EUSART_FramingErrorHandler 00C8                                              ??___bmul 0072  
                               ?_Button_State_Pressed 0024                                _EUSART_SetErrorHandler 14BF  
                          ??_MTOUCH_Button_ServiceAll 002D                                           __pdataBANK0 006C  
                                         __pdataBANK1 00CF                                           __pdataBANK2 0150  
                                      check_message@x 0052                                              ??_memcpy 0075  
                         __end_of_Sensor_isCalibrated 152A                          ??_Button_Baseline_Initialize 0020  
                                       _sample_period 006E                                  ??_MTOUCH_Button_Tick 0074  
                                  _mtouch_button_init 1000                            Sensor_Sampled_Reset@sensor 0071  
                                            ??_printf 004C                                              ??_strlen 0073  
                        ?_Sensor_isCalibratingAcqTime 0070                       __end_of_myButtonPressedCallback 1800  
                                 __end_of_LED_PROCESS 0DE2                           __end_of_EUSART_Transmit_ISR 081F  
                              __end_of_TMR2_StopTimer 1483                                           __pbssCOMMON 007C  
                                           ___latbits 0002                                         __pcstackBANK0 0020  
                                       __pcstackBANK1 00D9                              __size_of_TMR2_Initialize 0008  
                                     _Sensor_isActive 155C                        MTOUCH_Button_ServiceAll@button 002E  
                                 Sensor_Service@error 0043                            __end_of_EUSART_Receive_ISR 09A2  
                       __size_of_Sensor_Sampled_Reset 0008                            __size_of_EUSART_Initialize 0041  
                             _Button_Deviation_Update 0E58                            ?_Sensor_setCalibratAcqTime 0070  
                    _EUSART_RxDefaultInterruptHandler 00CA                                   __end_of_EUSART_Read 17DA  
                           _Button_State_Initializing 0CAD                    __end_of_MTOUCH_Sensor_isCalibrated 165D  
                          _MTOUCH_Sensor_isCalibrated 1647                                             __pnvBANK1 00C4  
                     __size_of_Sensor_autoCalibration 0092                     __size_of_Sensor_getScanGroupIndex 002D  
                                   _Sensor_setSampled 14FF                             ?_Sensor_getScanGroupIndex 0070  
                        __end_of_EUSART_RxDataHandler 16A0                                _PIN_MANAGER_Initialize 1755  
                                    ??_Button_Service 0029                              ?_MTOUCH_Sensor_Calibrate 0070  
                                EUSART_Read@readValue 0072                                    ?_Sensor_setSampled 0070  
                  Button_Reading_Update_Helper@button 007B                            ??_MTOUCH_Sensor_Initialize 0077  
                       __size_of_Sensor_setCalibrated 000E                                             __ptext100 1475  
                                           __ptext101 1477                                             __ptext102 1689  
                     __size_of_Sensor_loadADCSettings 00B0                                              _AAD1CON2 0713  
                                            _AAD1CON3 0714                                              _AAD2CON3 0794  
                                            _AAD1RES0 071A                                          _eusartRxHead 007C  
                                            _AAD2RES0 079A                                          _eusartTxHead 0068  
                                        _eusartRxTail 0066                                          _eusartTxTail 0067  
                                    ??_Sensor_Service 003F                            ??_Sensor_Acq_ExecutePacket 0020  
                        ??_INTERRUPT_InterruptManager 0071                                   ??_Sensor_setSampled 0071  
                   __size_of_myButtonReleasedCallback 0020                                           _blink_count 005E  
                           ?_myButtonReleasedCallback 0074                             ??_MTOUCH_Service_Mainloop 0048  
                                   __size_of_vfprintf 002F                                              _ADCOMCON 0712  
                             _eusartTxBufferRemaining 00CE                           __size_of_Sensor_setInactive 0008  
                      Sensor_Acq_ExecutePacket@last_a 0028                        Sensor_Acq_ExecutePacket@last_b 002A  
                                     ?_TMR2_StopTimer 0070                         ??_Sensor_isCalibratingAcqTime 0071  
                                       ??_MTOUCH_Tick 0076                                       ??_check_message 0050  
                                      __size_of_fputc 0035                                        __size_of_fputs 0026  
                                      __size_of_putch 0005                                          ??_check_data 0071  
                                      _eusartRxBuffer 00A8                                        _eusartTxBuffer 00B0  
                           __end_of_Sensor_setSampled 1507                                              _LATAbits 010C  
              EUSART_SetErrorHandler@interruptHandler 0071                                              _LATCbits 010E  
                                       ?_DATA_PROCESS 0070                               _Sensor_RawSample_Update 0893  
                   __end_of_Sensor_setCalibratAcqTime 1596                                             clear_ram0 14E3  
                                            _PIE1bits 0091                                     _eusartRxLastError 0064  
                            __size_of_TMR2_StartTimer 0003                   __size_of_INTERRUPT_InterruptManager 001F  
                                            _PIR1bits 0011                       ??_EUSART_SetFramingErrorHandler 0073  
              Sensor_Acq_ExecutePacket@packet_counter 002C                                              _PIR2bits 0012  
                              ??_Button_State_Pressed 0025                __end_of_MTOUCH_Sensor_Sampled_ResetAll 1632  
             __size_of_MTOUCH_Sensor_Sampled_ResetAll 0013                        _MTOUCH_Sensor_Sampled_ResetAll 161F  
                            ?_MTOUCH_Sensor_SampleAll 0070             __end_of_EUSART_DefaultOverrunErrorHandler 148D  
          __size_of_EUSART_DefaultOverrunErrorHandler 0004                   ??_EUSART_DefaultOverrunErrorHandler 0070  
                  ?_EUSART_DefaultOverrunErrorHandler 0070                     _EUSART_DefaultOverrunErrorHandler 1489  
                  Sensor_Acq_ExecutePacket@ADxIF_flag 0026                                           _LED_PROCESS 0D75  
                            _MTOUCH_Sensor_wasSampled 1578                                    _mtouch_time_toScan 006B  
                                           _vfpfcnvrt 054F                              ??_Button_Baseline_Update 0071  
                                  __end_of_check_data 09D4                               __end_of_Sensor_isActive 156A  
                              _Sensor_autoCalibration 0F6E                            __end_of_MTOUCH_needReburst 0004  
                      myButtonReleasedCallback@button 0074                                _Sensor_loadADCSettings 049F  
                                _MTOUCH_Sensor_Enable 15FB                                           _EUSART_Read 17B5  
                                __end_of_update_state 0C51                                            vfpfcnvrt@c 003E  
                            Button_Tick_helper@button 0073                             ??_Button_Deviation_Update 0071  
                               _Button_Reading_Update 1540                              ?_MTOUCH_Button_isPressed 0070  
                                   ?_Sensor_isEnabled 0070                                        ??_DATA_PROCESS 0074  
                                   ??_TMR2_Initialize 0071                                   __end_of_MTOUCH_Tick 1486  
                                   _MTOUCH_Initialize 1534                       __end_of_MTOUCH_Sensor_Calibrate 15FB  
                                  ??_Sensor_isEnabled 0071                                    ?_MTOUCH_Initialize 0070  
              Sensor_postAcquisitionProcess@deviation 0076                                             memcpy@tmp 0076  
                                          vfprintf@ap 0042                                            vfprintf@fp 0045  
                              __size_of_LED_0_SetHigh 0004                                            _APFCONbits 011D  
                              __size_of_LED_1_SetHigh 0004                               ??_OSCILLATOR_Initialize 0071  
                  __end_of_Button_Baseline_Initialize 0941                            _Button_Baseline_Initialize 0913  
                                 _EUSART_ErrorHandler 00C4                                __size_of_LED_2_SetHigh 0004  
                                 ??_MTOUCH_Initialize 007C                           ?_EUSART_DefaultErrorHandler 0070  
                                          ?_vfpfcnvrt 0037                              ?_Button_State_NotPressed 0024  
                                         check_data@x 0073                                    Button_Service@name 002B  
                                   ?_Sensor_setActive 0070                              ?_TMR2_LoadPeriodRegister 0070  
                               Sensor_isActive@sensor 0071                  Sensor_Scanfrequency_Evaluation@retry 0035  
                                  ??_Sensor_setActive 0071                                  _EUSART_RxDataHandler 1689  
                               ?_MTOUCH_Sensor_Enable 0070                                              __ptext10 09D4  
                                            __ptext11 14AE                                              __ptext20 156A  
                                            __ptext12 1792                                              __ptext21 1632  
                                            __ptext13 09A2                                              __ptext30 14BF  
                                            __ptext22 15FB                                              __ptext14 160D  
                                            __ptext31 171D                                              __ptext23 1739  
                                            __ptext15 14A5                                              __ptext40 14FF  
                                            __ptext32 0002                                              __ptext24 08BB  
                                            __ptext16 150F                                              __ptext41 0893  
                                            __ptext33 1483                                              __ptext25 0A77  
                                            __ptext17 1755                                              __ptext50 147D  
                                            __ptext42 0800                                              __ptext34 1673  
                                            __ptext26 14D7                                              __ptext18 14DD  
                                            __ptext51 14A9                                              __ptext43 0C51  
                                            __ptext35 0845                                              __ptext27 14D1  
                                            __ptext19 1534                                              __ptext60 1517  
                                            __ptext52 049F                                              __ptext44 0A3F  
                                            __ptext36 161F                                              __ptext28 14CB  
                                            __ptext61 08E6                                              __ptext53 1520  
                                            __ptext45 14F7                                              __ptext37 1507  
                                            __ptext29 14C5                                              __ptext70 17DA  
                                            __ptext62 15A6                                              __ptext54 15C7  
                                            __ptext46 14EF                                              __ptext38 165D  
                                            __ptext71 1476                                              __ptext63 1596  
                                            __ptext55 155C                                              __ptext47 0DE2  
                                            __ptext39 0742                                              __ptext80 16B7  
                                            __ptext72 1772                                              __ptext64 0BA2  
                                            __ptext56 0F6E                                              __ptext48 02D5  
                                            __ptext81 15B6                                              __ptext73 16E7  
                                            __ptext65 1578                                              __ptext57 16A0  
                                            __ptext49 1480                                              __ptext90 14A1  
                                            __ptext82 0E58                                              __ptext74 0A09  
                                            __ptext66 1647                                              __ptext58 154E  
                                            __ptext91 149D                                              __ptext83 14B9  
                                            __ptext75 15E9                                              __ptext67 069E  
                                            __ptext59 1587                                              __ptext92 1499  
                                            __ptext84 14B3                                              __ptext76 0EDF  
                                            __ptext68 0CAD                                              __ptext93 1495  
                                            __ptext85 147A                                              __ptext77 0913  
                                            __ptext69 0D0F                                              __ptext94 1491  
                                            __ptext86 17B5                                              __ptext78 1540  
                                            __ptext95 148D                                              __ptext87 05F7  
                                            __ptext79 0B05                                              __ptext88 0AB8  
                                            __ptext97 0801                                              __ptext89 0D75  
                                            __ptext98 0970                                              __ptext99 1489  
                           __end_of_MTOUCH_Initialize 1540                             ??_Sensor_RawSample_Update 0075  
                          __size_of_Sensor_setSampled 0008                           __size_of_EUSART_is_rx_ready 0003  
                                       __size_of_ctoa 0029                                         __size_of_main 0268  
                     __end_of_MTOUCH_Sensor_SampleAll 1673                      Sensor_Scanfrequency_Evaluation@i 003A  
                             ?_EUSART_SetErrorHandler 0071                                 __end_of_RELAY_PROCESS 0B05  
       EUSART_SetOverrunErrorHandler@interruptHandler 0071                                              int$flags 007E  
                                            _vfprintf 0941                    __size_of_Button_State_Initializing 0062  
                                   ??_TMR2_StartTimer 0071                    __end_of_INTERRUPT_InterruptManager 0023  
                          _INTERRUPT_InterruptManager 0004                                             printf@fmt 0048  
               __end_of_EUSART_SetFramingErrorHandler 14CB                __size_of_EUSART_SetFramingErrorHandler 0006  
                       _EUSART_SetFramingErrorHandler 14C5                                        RELAY_PROCESS@x 0073  
                     __size_of_Button_Baseline_Update 008F                          ?_MTOUCH_Button_InitializeAll 0070  
                        MTOUCH_Sensor_SampleAll@group 0047                          ?_MTOUCH_Sensor_InitializeAll 0070  
                                    ?_Sensor_isActive 0070                                         _mtouch_button 0120  
                                          _INTCONbits 000B                                 ?_EUSART_RxDataHandler 0070  
                                       _mtouch_sensor 0150                                              memcpy@d1 0079  
                                            memcpy@s1 0071                       __end_of_MTOUCH_Button_isPressed 1702  
                                       _LED_0_SetHigh 148D                      __end_of_Sensor_getScanGroupIndex 0913  
                                   __CFG_BOREN$NSLEEP 0000                                        __pstringtext10 1828  
                                      __pstringtext11 182D                                        __pstringtext12 1832  
                                      __pstringtext13 1837                                        __pstringtext14 1840  
                                      __pstringtext15 0000                                           _MTOUCH_Tick 1483  
                              ?_Button_Reading_Update 0070                                         _LED_1_SetHigh 1495  
                    Button_Deviation_Update@deviation 0021                               __size_of_WDT_Initialize 0004  
                        MTOUCH_Button_Initialize@name 0079                                         _LED_2_SetHigh 149D  
                   __size_of_MTOUCH_Button_Initialize 0036                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 005C  
                            ?_myButtonPressedCallback 0074               __end_of_Sensor_Scanfrequency_Evaluation 0E58  
            __size_of_Sensor_Scanfrequency_Evaluation 0076                     ??_Sensor_Scanfrequency_Evaluation 002F  
                    ?_Sensor_Scanfrequency_Evaluation 002E                       _Sensor_Scanfrequency_Evaluation 0DE2  
                             ?_PIN_MANAGER_Initialize 0070                                         _timeout_count 00B8  
                         ??_Sensor_setCalibratAcqTime 0071                        __end_of_EUSART_SetErrorHandler 14C5  
                                   __CFG_CLKOUTEN$OFF 0000                           ?_MTOUCH_Sensor_isCalibrated 0070  
                __end_of_EUSART_SetRxInterruptHandler 14D7                 __size_of_EUSART_SetRxInterruptHandler 0006  
                        _EUSART_SetRxInterruptHandler 14D1                                         _config_status 0061  
                         __size_of_Button_Tick_helper 0027                       __end_of_Button_State_NotPressed 0742  
                                            printf@ap 004F                                    _EUSART_Receive_ISR 0970  
       EUSART_SetFramingErrorHandler@interruptHandler 0071                          __end_of_Sensor_Sampled_Reset 150F  
                                         ??_vfpfcnvrt 0039                                      ??_TMR2_StopTimer 0071  
                     __end_of_TMR2_LoadPeriodRegister 14AE                           __size_of_MTOUCH_Button_Tick 0016  
                                       __pstringtext1 180F                                         __pstringtext2 183C  
                                       __pstringtext3 1000                                         __pstringtext4 1800  
                                       __pstringtext5 1809                                         __pstringtext6 1814  
                                       __pstringtext7 1819                                         __pstringtext8 181E  
                                       __pstringtext9 1823                                  __end_of_DATA_PROCESS 069E  
                                 ?_EUSART_Receive_ISR 0070                                 __size_of_update_state 005A  
                       ??_MTOUCH_Button_InitializeAll 007B                              ??_Button_DefaultCallback 0075  
                       ??_MTOUCH_Sensor_InitializeAll 0079                  Sensor_Acq_ExecutePacket@activeSensor 0027  
                    __size_of_MTOUCH_Sensor_Calibrate 0012                                ??_MTOUCH_Sensor_Enable 0075  
                                      ?_LED_0_SetHigh 0070                     Sensor_isCalibratingAcqTime@sensor 0071  
                        __size_of_Sensor_isCalibrated 000A                              ??_Sensor_DefaultCallback 0072  
                        __end_of_Sensor_setCalibrated 155C                                        ?_LED_1_SetHigh 0070  
                __end_of_Button_Reading_Update_Helper 0B52                 __size_of_Button_Reading_Update_Helper 004D  
                        _Button_Reading_Update_Helper 0B05                                        ?_LED_2_SetHigh 0070  
                   __size_of_MTOUCH_Button_ServiceAll 0010                             ?_MTOUCH_Button_ServiceAll 0070  
                       Button_State_NotPressed@button 0024                                    EUSART_Write@txData 0072  
                        __size_of_EUSART_Transmit_ISR 001E                            __size_of_MTOUCH_Initialize 000C  
                      __end_of_PIN_MANAGER_Initialize 1772                                _Button_Baseline_Update 0EDF  
                                       ?_LED_0_SetLow 0070                                         ?_LED_1_SetLow 0070  
                                       ?_LED_2_SetLow 0070                           MTOUCH_Button_isPressed@name 0072  
                                ??_EUSART_Receive_ISR 0071                            ??_MTOUCH_Sensor_wasSampled 0075  
